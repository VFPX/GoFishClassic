*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gofishui.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _gofish AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cappname
		*p: capppath
		*p: cbuilddate
		*p: cversion
		*p: oresultsform
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		cappname = 
		capppath = 
		cbuilddate = 
		cversion = 
		Name = "_gofish"
		oresultsform = .NULL.
		_memberdata = <VFPData>
			<memberdata name="cappname" display="cAppName"/>
			<memberdata name="capppath" display="cAppPath"/>
			<memberdata name="cversion" display="cVersion"/>
			<memberdata name="oresultsform" display="oResultsForm"/>
			<memberdata name="cbuilddate" display="cBuildDate"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Destroy
		This.oResultsForm = .null.
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_baseform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: copyobjectproperties
		*m: loadformsettings
		*m: saveformsettings
		*p: ccr_storelocal		&& Location of storage.
		*p: cuisettingsfile
		*p: lcr_allow		&& Turn on CR options
		*p: nfirstload		&& LoadFormSettings is not run once.
		*p: oform
		*p: omy
		*p: osearchengine
		*p: osearchoptions
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "GoFish"
		ccr_storelocal = (ADDBS(HOME(7)))
		cuisettingsfile = 
		Desktop = .T.
		DoCreate = .T.
		Height = 325
		Left = 0
		Name = "gf_baseform"
		nfirstload = 0
		oform = .NULL.
		omy = .NULL.
		osearchengine = .NULL.
		osearchoptions = .NULL.
		Top = 0
		Width = 662
		_memberdata = <VFPData>
			<memberdata name="loadformsettings" display="LoadFormSettings"/>
			<memberdata name="cuisettingsfile" display="cUISettingsFile"/>
			<memberdata name="saveformsettings" display="SaveFormSettings"/>
			<memberdata name="oform" display="oForm"/>
			<memberdata name="osearchengine" display="oSearchEngine"/>
			<memberdata name="osearchoptions" display="oSearchOptions"/>
			<memberdata name="omy" display="oMy"/>
			<memberdata name="copyobjectproperties" display="CopyObjectProperties"/>
			<memberdata name="nfirstload" type="property" display="nFirstLoad" favorites="False"/>
			<memberdata name="ccr_storelocal" type="property" display="cCR_StoreLocal" favorites="False"/>
			<memberdata name="lcr_allow" type="property" display="lCR_Allow" favorites="False"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Activate
		Set Talk Off && Just in case user has turn this on somehow or accidentally
		Set Echo Off
		Set Exact On
		Set Deleted Off
	ENDPROC

	PROCEDURE copyobjectproperties
		Lparameters toSourceObject, toNewObject
		*-- Adapted from: http://www.berezniker.com/content/pages/visual-foxpro/shallow-copy-object
		
		Local laProps[1], lcPropName, lnI
		
		For lnI = 1 To Amembers(laProps, toSourceObject, 0, 'U')
		    lcPropName = Lower(laProps[lnI])
		    If Type([toSourceObject.] + lcPropName ,1) = 'A'
		        AddProperty(toNewObject, lcPropName + '[1]', Null )
		        = Acopy(toSourceObject.&lcPropName, loNewObject.&lcPropName)
		    Else
		        AddProperty(toNewObject, lcPropName, Evaluate('toSourceObject.' + lcPropName) )
		    Endif
		Endfor
		
		Return toNewObject
		
	ENDPROC

	PROCEDURE Destroy
		DoDefault()
		
		This.SaveFormSettings()
		
		*This.oForm = .null.
		
	ENDPROC

	PROCEDURE Init
		Lparameters toForm
		
		This.oForm = toForm
		
		If Vartype(m.toForm)="O" And Pemstatus(m.toForm, "cCR_StoreLocal", 5) Then
			This.cCR_StoreLocal = m.toForm.cCR_StoreLocal
		Endif &&VARTYPE(m.toForm)="O" AND PEMSTATUS(m.toForm, "cCR_StoreLocal", 5)
		
		If This.Desktop Or This.Dockable=1 Then
		*Move forms with this setting into screen, might be odd on multiple monitors
		
		*get coords of vfp
			This.Top  = _Screen.Top
			This.Left = _Screen.Left
		*twice, first reads odd values
			This.Top  = _Screen.Top
			This.Left = _Screen.Left
		Endif &&This.Desktop Or This.Dockable=1
		
		This.LoadFormSettings()
		
		If Vartype(toForm) = 'O'
			This.oSearchEngine = toForm.oSearchEngine
			This.oSearchOptions = toForm.oSearchEngine.oSearchOptions
		Endif
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off
		Set Echo Off
		
		DoDefault()
		
	ENDPROC

	PROCEDURE loadformsettings
		Local;
			lcFile     As String,;
			loMy       As 'My' Of 'My.vcx',;
			loSettings As Object
		
		Local;
			lnTop          As Integer,;
			lnLeft         As Integer,;
			lnWidth        As Integer,;
			lnHeight       As Integer,;
			lnScreenTop    As Integer,;
			lnScreenBottom As Integer,;
			lnScreenLeft   As Integer,;
			lnScreenRight  As Integer,;
			loMonitor      As Empty
		
		lcFile = Lower(Strtran(This.Name, ' ', '_') + '_Form_Settings.xml')
		
		*rename old style settings file
		If ! m.lcFile==Lower(This.cUISettingsFile);
				And File(This.cCR_StoreLocal + m.lcFile) Then
		
			If File(This.cCR_StoreLocal + This.cUISettingsFile) Then
				Delete File (This.cCR_StoreLocal + m.lcFile)
		
			Else  &&File(This.cCR_StoreLocal + This.cUISettingsFile)
				Rename (This.cCR_StoreLocal + m.lcFile) To (This.cCR_StoreLocal + This.cUISettingsFile)
		
			Endif &&File(This.cCR_StoreLocal + This.cUISettingsFile)
		Endif &&! m.lcFile==Lower(This.cUISettingsFile) And File(This.cCR_StoreLocal + m.lcFile)
		
		lcFile = This.cCR_StoreLocal + This.cUISettingsFile
		
		loMy       = Newobject('My', 'My.vcx')
		loSettings = m.loMy.Settings
		
		Thisform.oMy = m.loMy
		
		If !File(m.lcFile)
			Return
		Endif
		
		loSettings.Load(m.lcFile)
		
		*-- Resize form size and position--------------------
		If loSettings.Exists('FormTop')
			With m.loSettings
				lnTop          = 0
				lnHeight       = This.Height
				lnLeft         = 0
				lnWidth        = This.Width
		
				lnScreenTop    = 0
				lnScreenBottom = _Screen.Height
				lnScreenLeft   = 0
				lnScreenRight  = _Screen.Width
		
				If This.Desktop Or This.Dockable=1 Then
					loMonitor = GetMonitorStatistics()
		
					lnTop          = _Screen.Top
					lnLeft         = _Screen.Left
		
					lnScreenTop    = m.loMonitor.gnVirtualTop
					lnScreenBottom = m.loMonitor.gnVirtualBottom
					lnScreenLeft   = m.loMonitor.gnVirtualLeft
					lnScreenRight  = m.loMonitor.gnVirtualRight
		
				Endif &&This.Desktop Or This.Dockable=1
		
				If Between(.FormTop , m.lnScreenTop, m.lnScreenBottom) Then
					lnTop    = .FormTop
					lnHeight = .FormHeight
				Endif &&Between(.FormTop , m.lnScreenTop, m.lnScreenBottom)
		
				If Between(.FormLeft, m.lnScreenLeft, m.lnScreenRight) Then
					lnLeft   = .FormLeft
					lnWidth  = .FormWidth
				Endif &&Between(.FormLeft, m.lnScreenLeft, m.lnScreenRight)
		
				Thisform.Move(m.lnLeft, m.lnTop, m.lnWidth, m.lnHeight)
		
			Endwith
		
			This.Resize()
		Endif
		
	ENDPROC

	PROCEDURE LostFocus
		Activate Screen
	ENDPROC

	PROCEDURE saveformsettings
		Local;
			lcFile     As String,;
			loSettings As Object
		
		loSettings = Thisform.oMy.Settings
		
		lcFile = This.cCR_StoreLocal + This.cUISettingsFile
		
		With m.loSettings
		*-- Form Size and Position -----------------------------
			.Add('FormTop',    This.Top)
			.Add('FormLeft',   This.Left)
			.Add('FormHeight', This.Height)
			.Add('FormWidth',  This.Width)
		
			.Save(m.lcFile)
		
		Endwith
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_combosearchexpressionhistory AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: loadrows
		*m: opentable
		*m: savesearchexpression
		*p: ctable
		*p: nexpressionstostore
		*p: nmaxmru
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		ctable = 
		Height = 24
		Name = "gf_combosearchexpressionhistory"
		nexpressionstostore = 15
		nmaxmru = 7
		Visible = .F.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="nexpressionstostore" display="nExpressionsToStore"/>
			<memberdata name="opentable" display="OpenTable"/>
			<memberdata name="loadrows" display="LoadRows"/>
			<memberdata name="ctable" display="cTable"/>
			<memberdata name="savesearchexpression" display="SaveSearchExpression"/>
			<memberdata name="nmaxmru" display="nMaxMRU"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		This.Visible = .F.
		
		With This.Parent.editSearch
			.Value = Rtrim(This.Value)
			.SetFocus()
			.SelStart = 999
		Endwith
		
		lcValue = This.value
		This.SaveSearchExpression(This.Value) && Will move this entry to the top of the list
		This.Value = Alltrim(lcValue)
		
		
	ENDPROC

	PROCEDURE Init
		this.Top = this.Parent.editSearch.top
		
		*SF 20221018 -> local storage
		*This.cTable = Addbs(Home(7)) + 'GF_Search_Expression_History.dbf'
		This.cTable = Thisform.cCR_StoreLocal + 'GF_Search_Expression_History.dbf'
		*/SF 20221018 -> local storage
		
		This.LoadRows()
		
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		If nKeyCode = 27 && ESC Key
			this.Tag = 'ESCAPE'
			this.Visible = .f.
			This.Parent.editSearch.SetFocus()
			This.Parent.editSearch.SelStart = 999
			This.Parent.editSearch.SelLength = 1
			NoDefault 
		EndIf
		
		
		
	ENDPROC

	PROCEDURE loadrows
		Local lItemExists, lcItem, lnSelect, lnCounter
		
		lnCounter = 0
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Rebuild the combobox values -------------------------------
		This.RowSource = '' && Clear out rows
		
		Scan
		
			lcItem = Alltrim(Lower(expression))
			lItemExists = .F. && assume the value isn't in the list.
		
			For i = 1 To This.ListCount
				If Alltrim(Lower(This.List(i))) == lcItem
					lItemExists = .T.
					Exit
				Endif
			Endfor
		
			If !lItemExists
				This.AddItem(lcItem)
				lnCounter = lnCounter + 1
				If lnCounter = This.nMaxMRU
					Exit
				Endif
			Endif
		Endscan
		
		Use
		
		This.Refresh()
		
		Select (lnSelect)  
	ENDPROC

	PROCEDURE LostFocus
		this.Visible = .f.
		
	ENDPROC

	PROCEDURE opentable
		Local lcCursor, lcFilter, lcScope, lcSearchExpressionTable, lnExpressionsToStore
		
		lcSearchExpressionTable = This.cTable
		lnExpressionsToStore = This.nExpressionsToStore
		
		If !File(lcSearchExpressionTable)
			Create Table (lcSearchExpressionTable) Free (Expression C(128), Item I, scope C(254))
			Append Blank
			Use
		Endif
		
		If !Used(Juststem(lcSearchExpressionTable))
			Select 0
			Use (lcSearchExpressionTable)
		Endif
		
		Goto Top
		
	ENDPROC

	PROCEDURE Refresh
		Try
			This.Enabled = !Thisform.lSearching&& and !Thisform.lReplaceMode
		Catch
		Endtry
		
		
	ENDPROC

	PROCEDURE savesearchexpression
		Lparameters tcSearchExpression
		
		Local lcCursor, lcScope, lcTable, lnExpressionsToStore, loCombo
		
		If Empty(tcSearchExpression)
			Return
		Endif
		
		lcCursor = 'SearchExpressionHistory'
		lnExpressionsToStore = This.nExpressionsToStore
		lcTable = This.cTable
		lcScope = Lower(Thisform.GetCurrentScope())
		
		*-- New cursor with this new search express
		Create Cursor (lcCursor) (Expression C(128), Item I, scope C(254))
		Append Blank
		Replace Item With 1
		Replace Expression With tcSearchExpression
		Replace scope With lcScope
		
		*--- Pull other records from the scope out of expression hist table
		Insert Into (lcCursor) (Expression, Item, scope) ;
			Select Expression, Item + 1, scope From (lcTable) ;
			Where Item < lnExpressionsToStore ;
			And !(Rtrim(Expression) == Rtrim(tcSearchExpression)) ;
			And !Empty(Expression)
		
		Replace Item With Recno(lcCursor) In (lcCursor) All
		
		Use In (Juststem(lcTable))
		
		Try
			Delete File (lcTable)
			Copy To (lcTable)
			Use (lcTable)
		Catch
		Endtry
		
		This.LoadRows()
	ENDPROC

	PROCEDURE Valid
		If This.Tag = 'ESCAPE'
			With This.Parent.editSearch
				.Value = This.Parent.comboSearchExpressionHistoryDropDownArrow.Tag
				.SelStart = 999
				.SelLength = 1
			Endwith
			This.Tag = ''
		Endif
		
		lItemExists = .F. && assume the value isn't in the list.
		For i = 1 To This.ListCount
			If Lower(This.List(i)) = Lower(This.Text)
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(Lower(This.Text))
		Endif
		
		
		This.Value = This.Text
		
		Thisform.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_combosearchscope AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "gofish.h"
	*<DefinedPropArrayMethod>
		*m: addrow
		*m: loadprojects		&& Adds a list item for each project in the passed collection of Projects.
		*m: loadrows
		*m: opentable
		*m: savesearchscope
		*m: updateimageicon
		*p: ctable
		*p: nexpressionstostore
		*p: nmaxmru
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		ctable = 
		Height = 24
		Name = "gf_combosearchscope"
		nexpressionstostore = 15
		nmaxmru = 7
		Width = 365
		_memberdata = <VFPData>
			<memberdata name="opentable" display="OpenTable"/>
			<memberdata name="nexpressionstostore" display="nExpressionsToStore"/>
			<memberdata name="savesearchscope" display="SaveSearchScope"/>
			<memberdata name="loadrows" display="LoadRows"/>
			<memberdata name="loadprojects" display="LoadProjects"/>
			<memberdata name="ctable" display="cTable"/>
			<memberdata name="addrow" display="AddRow"/>
			<memberdata name="updateimageicon" display="UpdateImageIcon"/>
			<memberdata name="nmaxmru" display="nMaxMRU"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE addrow
		Lparameters tcScope
		
		Local lItemExists, lcItem
		
		If Right(tcScope, 1) == ' '
			lcItem = Alltrim(Lower(tcScope))
		Else
			lcItem = tcScope
		EndIf
		
		lcItem = Rtrim(lcItem, '\')
		
		lItemExists = .F. && assume the value isn't in the list.
		
		For i = 1 To This.ListCount
			If Alltrim(Lower(This.List(i))) == lcItem
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(lcItem)
		Endif
	ENDPROC

	PROCEDURE GotFocus
		This.Tag = This.value
	ENDPROC

	PROCEDURE Init
		*SF 20221018 -> local storage
		*This.cTable = Addbs(Home(7)) + 'GF_Search_Scope_History.dbf'
		This.cTable = Thisform.cCR_StoreLocal + 'GF_Search_Scope_History.dbf'
		*/SF 20221018 -> local storage
		
		This.LoadRows()
		 
	ENDPROC

	PROCEDURE InteractiveChange
		This.UpdateImageIcon()
	ENDPROC

	PROCEDURE loadprojects		&& Adds a list item for each project in the passed collection of Projects.
		Lparameters toProjects
		
		Local lcSearchScopeTable, lnSelect, loProject
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Be sure that each of the recent projects are in the Scope History table ----------
		For Each loProject in toProjects
			Locate for Alltrim(Lower(scope)) == Alltrim(Lower(loProject))
			If !Found()
				Append Blank
				Replace scope with Alltrim(Lower(loProject))
				Replace item with Recno()
			Endif
		EndFor
		
		Select (lnSelect) 
	ENDPROC

	PROCEDURE loadrows
		Local lItemExists, lcItem, lnSelect, lcScope, lnCounter
		
		lnCounter = 0
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Rebuild the combobox values -------------------------------
		This.RowSource = '' && Clear out rows
		
		This.AddRow('\ -- Projects -------------------------')
		If Type('_vfp.ActiveProject') = 'O'
			This.AddRow('<< Active Project >>')
		Endif
		
		*-- Add Projects --------------------------
		Scan for Upper(JustExt(scope)) == 'PJX'
			This.AddRow(scope)
			lnCounter = lnCounter + 1
			If lnCounter = This.nMaxMRU
				Exit
			Endif
		Endscan
		
		This.AddRow('')
		This.AddRow('\ -- Folders ----------------------------')
		This.AddRow('<< Current Dir >>')
		
		*-- Add Folders
		Scan for Upper(JustExt(scope)) <> 'PJX'
			lcScope = scope
			If Left(lcScope,2) = '\\'
			 lcScope = '\' + '\' + lcScope
			Endif
		
			This.AddRow(lcScope)
		
			lnCounter = lnCounter + 1
		
			If lnCounter = 2 * This.nMaxMRU
				Exit
			Endif
		
		Endscan
		
		Use
		
		This.Refresh()
		
		Select (lnSelect)    
	ENDPROC

	PROCEDURE opentable
		Local lcTable, lnExpressionsToStore
		
		lcTable = This.cTable
		lnExpressionsToStore = This.nExpressionsToStore
		
		If !File(lcTable)
			Create Table (lcTable) Free (scope C(254), item I)
			Append Blank
			Use
		EndIf
		
		If !Used(JustStem(lcTable))
			Select 0
			Use (lcTable) 
		Else
			Select (JustStem(lcTable))
		Endif
		
		*-- Clean out any junk or missing scopes---
		Scan
			lcScope = Alltrim(scope)
			If !Directory(lcScope, 1) and !File(lcScope) or Empty(lcScope)
				Delete Next 1 In (JustStem(lcTable))
			Endif
		Endscan
		 
		Goto Top
		
	ENDPROC

	PROCEDURE Refresh
		This.UpdateImageIcon()
	ENDPROC

	PROCEDURE savesearchscope
		Lparameters tcSearchScope
		
		Local lItemExists, lcCursor, lcSearchScopeTable, lcTable, lnExpressionsToStore, lnSelect, loCombo
		
		lnSelect = Select()
		
		If Empty(tcSearchScope)
			Return
		Endif
		
		lcCursor = 'SearchScopeHistory'
		
		lcSearchScopeTable = This.cTable
		lnExpressionsToStore = This.nExpressionsToStore
		
		*SF 20221018 -> local storage
		*lcTable = Home(7) + lcSearchScopeTable + '.dbf'
		lcTable = Thisform.cCR_StoreLocal + lcSearchScopeTable + '.dbf'
		*/SF 20221018 -> local storage
		
		tcSearchScope = Rtrim(Alltrim(tcSearchScope), 0, '\')
		
		*-- New cursor with this new search express
		Create Cursor (lcCursor) (scope C(254), item I)
		Append Blank
		Replace item With 1
		Replace scope With tcSearchScope 
		
		*--- Pull other scope records from hist table
		Insert Into (lcCursor) (scope, item) ; 
			Select Distinct Lower(Rtrim(scope, ' ', '\')), item ;
			From (lcSearchScopeTable) ;
			Where item < lnExpressionsToStore ;
				and !(Lower(Rtrim(scope, ' ',  '\')) == Lower(Rtrim(tcSearchScope, ' ', '\'))) ;
				and !Empty(scope) ;
			Order By 2
		
		Replace item With Recno(lcCursor) in (lcCursor) All
		
		*-- Update the permanent table (newest record is now at top) ---------------
		Use in (JustStem(lcSearchScopeTable))
		
		Try
			Delete File (lcSearchScopeTable) 
			Copy To (lcSearchScopeTable)
		Catch
		Endtry
		
		This.LoadRows()
		
		Select (lnSelect) 
	ENDPROC

	PROCEDURE updateimageicon
		Local lcScope, loImage
		
		lcScope = Upper(This.Text)
		loImage = This.parent.imgScopeIcon
		loImage.Visible = .t.
		
		Do Case
		
			Case '.PJX' $ lcScope
				loImage.Picture = '..\images\gf_project_icon_16.bmp'
		
			Case Empty(lcScope)
				loImage.Picture = ''
				loImage.Visible = .f.
				
			Otherwise
				loImage.Picture = '..\images\gf_folder_icon_16.bmp'
		Endcase
		
		 
		
		 
	ENDPROC

	PROCEDURE Valid
		Local lItemExists
		
		lItemExists = .F. && assume the value isn't in the list.
		lcValue = Alltrim(This.Text)
		lcValue = Rtrim(Lower(lcValue), '\')
		
		If This.Value = This.Tag and !Empty(This.Tag)
			Return .t.
		EndIf
		
		For i = 1 To This.ListCount
			If Lower(This.List(i)) = lcValue
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(lcValue)
		Endif
		
		Do Case
		
			Case Empty(lcValue)
				Thisform.Refresh()
				Return
		
			Case lcValue == Lower('<< Active Project >>')
				Thisform.oSearchOptions.nSearchScope = 1
				lcValue = Lower(Thisform.oSearchEngine.GetActiveProject())
				Thisform.oSearchOptions.cProject = lcValue
		
			Case '.PJX' $ Upper(lcValue)
				If !File(lcValue)
					MessageBox('File not found.', 16, 'Error')
					This.Value = lcValue
					Return
				Endif
				Thisform.oSearchOptions.nSearchScope = 2
				Thisform.oSearchOptions.cProject = lcValue
		
			Case lcValue == Lower('<< Current Dir >>')
				Thisform.oSearchOptions.nSearchScope = 3
				lcValue = Alltrim(Lower(Thisform.oSearchEngine.GetCurrentDirectory()), '\')
				Thisform.oSearchOptions.cPath = lcValue
		
			Otherwise
				If !Directory(lcValue, 1)
					MessageBox('Invalid directory.', 16, 'Error')
					This.Value = lcValue
					Return
				Endif
				Thisform.oSearchOptions.nSearchScope = 4
				Thisform.oSearchOptions.cPath = lcValue
		
		Endcase
		
		This.SaveSearchScope(lcValue) && Will move this entry to the top of the list
		This.Value = Alltrim(lcValue)
		This.Tag = This.Value
		
		Thisform.Refresh()    
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_filtercheckbox AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "gofish.h"
	*<DefinedPropArrayMethod>
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Alignment = 0
		AutoSize = .T.
		BackStyle = 0
		Caption = "<Caption>"
		FontName = "Tahoma"
		FontSize = 8
		Height = 15
		Name = "gf_filtercheckbox"
		TabIndex = 1
		Value = .T.
		Width = 71
		_memberdata = <VFPData>
			<memberdata name="caption" display="Caption"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		*By the time we get here, the value has already been toggled by VFP.
		*Toggle back to what it was before they clicked it.
		this.Value = !this.Value
		
		*-- Now process with this logic...
		If this.Value = .t. 
			this.Value = .f.
		Else
			If this.ForeColor = RGB(0,0,0)
				This.Value = .t.
			Endif
		EndIf
		
		this.Parent.Refresh()
		
		
		
		
			
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_filtercheckboxcontainer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: cleardecoration
		*m: decorate
		*m: ldecorated_assign
		*m: setallcheckboxes
		*m: shouldbedecorated
		*p: cfilter
		*p: ldecorated
		*p: ncheckboxcount
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderColor = 150,150,150
		cfilter = 
		Height = 390
		ldecorated = .F.
		Name = "gf_filtercheckboxcontainer"
		ncheckboxcount = 0
		Width = 218
		_memberdata = <VFPData>
			<memberdata name="setallcheckboxes" display="SetAllCheckBoxes"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="ncheckboxcount" display="nCheckBoxCount"/>
			<memberdata name="bordercolor" display="BorderColor"/>
			<memberdata name="clear" display="Clear"/>
			<memberdata name="decorate" display="Decorate"/>
			<memberdata name="cleardecoration" display="ClearDecoration"/>
			<memberdata name="ldecorated" display="lDecorated"/>
			<memberdata name="ldecorated_assign" display="lDecorated_Assign"/>
			<memberdata name="shouldbedecorated" display="ShouldBeDecorated"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Anchor = 4, ;
		Caption = "All", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 10, ;
		Name = "Command1", ;
		TabStop = .F., ;
		Top = 367, ;
		Width = 31
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Anchor = 4, ;
		Caption = "Clear", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 46, ;
		Name = "Command2", ;
		TabStop = .F., ;
		Top = 367, ;
		Width = 48
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "Caption", ;
		Height = 17, ;
		Left = 7, ;
		Name = "Label1", ;
		Top = 4, ;
		Width = 207
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 6, ;
		Name = "Line1", ;
		Top = 20, ;
		Width = 207
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		Anchor = 14, ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 5, ;
		Name = "Line2", ;
		Top = 362, ;
		Visible = .F., ;
		Width = 206
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
		For Each loControl in This.Controls
			If Upper(loControl.BaseClass) = 'CHECKBOX'
				loControl.value = 0
			Endif
		Endfor
		
		This.Refresh()
	ENDPROC

	PROCEDURE cleardecoration
		This.lDecorated = .F.
		
	ENDPROC

	PROCEDURE decorate
		This.lDecorated = .T.
	ENDPROC

	PROCEDURE Init
		Local loControl
		
		For Each loControl in This.Controls
			If Upper(loControl.baseclass) = 'CHECKBOX'
				this.nCheckBoxCount = this.nCheckBoxCount + 1
				BindEvent(loControl, 'Click', this, 'Refresh')
		
				*-- Apply This.label.caption so ControlSource will to match class property
				If !Empty(this.Label1.Tag) && Tag can override caption to set controlsource
					loControl.ControlSource = this.label1.Tag + '_' + Iif(!Empty(loControl.tag), loControl.Tag, loControl.Caption)
				Else
					lcProperty = Strtran(loControl.Caption, '<', '')
					lcProperty = Strtran(lcProperty, '>', '')
					lcProperty = Strtran(lcProperty, ' ', '')
		
					loControl.ControlSource = this.label1.Caption + '_' + Iif(!Empty(loControl.tag), loControl.Tag, lcProperty)
				Endif		
			
			Endif
				
		EndFor
		
		     
	ENDPROC

	PROCEDURE ldecorated_assign
		Lparameters tlDecorated
		This.lDecorated = m.tlDecorated
		
		If m.tlDecorated
			This.Label1.FontBold = .T.
			This.BorderWidth	 = 2
			This.BorderColor	 = Rgb(255, 0, 0)
		Else
			This.Label1.FontBold = .F.
			This.BorderWidth	 = 1
			This.BorderColor	 = Rgb(175, 175, 175)
		Endif
		
		If Pemstatus(Thisform, 'DecoratePage', 5) And This.Parent.BaseClass = 'Page'
			Thisform.DecoratePage(This.Parent)
		Endif
	ENDPROC

	PROCEDURE Refresh
		This.Label1.FontBold = .F.
		This.ClearDecoration()
		
		If This.ShouldBeDecorated()
			This.Label1.FontBold = .T.
			This.Decorate()
		Endif
		
	ENDPROC

	PROCEDURE setallcheckboxes
		Lparameters tnValue
		
		For each loControl in This.controls
			If PemStatus(loControl, 'Value', 5)
		*		If loControl.Enabled  = .t.
					loControl.value = tnValue
		*		EndIf
			EndIf
		EndFor
		
		
	ENDPROC

	PROCEDURE shouldbedecorated
		Local loControl
		For Each m.loControl In This.Controls
			If Upper(m.loControl.BaseClass) = 'CHECKBOX' And Not Empty(m.loControl.Value)&& and loControl.Enabled
				Return .T.
				Exit
			Endif
		Endfor
		Return .F.
	ENDPROC

	PROCEDURE Command1.Click
		This.Parent.SetAllCheckboxes(1)
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE Command2.Click
		This.parent.SetAllCheckboxes(0)
		This.Parent.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_filterform AS gf_baseform OF "gofishui.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Container1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check21" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check10" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check18" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check14" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check17" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check16" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check19" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check20" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check22" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check23" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Check24" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Line3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchType.Gf_filtercheckbox7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkTXT" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkASP" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.ChkHTML" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkH" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkMNX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkSCX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkVCX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkDBC" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkLBX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkFRX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkPJX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkPRG" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkSPR" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkMPR" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkini" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkJSP" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkJava" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFileType.chkXML" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFilename" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerFilePath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerObjectName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerClassName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMatchedLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerMethodName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.containerTimestamp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.Textboxcontainer1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.Textboxcontainer2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.Textboxcontainer3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Container1.Gf_textboxcontainer1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Check2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />

	#INCLUDE "gofish.h"
	*<DefinedPropArrayMethod>
		*m: applychanges
		*m: bind
		*m: buildcheckboxfilter
		*m: buildcontainerfilters
		*m: buildfilterstring
		*m: buildtextboxfilter
		*m: enablecontrol
		*m: loadfiltersettings		&& Loads saved settings from XML file.
		*m: savefiltersettings
		*p: ccodetypefilter
		*p: cfilenamefilter
		*p: cfiletypefilter
		*p: cfilter
		*p: cfilteroptionsclass
		*p: cfilteroptionsxmlfile
		*p: csearchresults
		*p: llreturn
		*p: ofilter
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderStyle = 2
		Caption = "GoFish Filter Builder"
		ccodetypefilter = 
		cfilenamefilter = 
		cfiletypefilter = 
		cfilter = 
		cfilteroptionsclass = GF_SearchResultsFilter
		cfilteroptionsxmlfile = GF_Filter_Settings.xml
		csearchresults = 
		DoCreate = .T.
		Height = 400
		Left = 0
		llreturn = .F.
		Name = "gf_filterform"
		ofilter = .NULL.
		Top = 0
		Visible = .T.
		Width = 885
		WindowType = 1
		_memberdata = <VFPData>
			<memberdata name="ofilter" display="oFilter"/>
			<memberdata name="applychanges" display="ApplyChanges"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="cfiletypefilter" display="cFileTypeFilter"/>
			<memberdata name="csearchresults" display="cSearchResults"/>
			<memberdata name="enablecontrol" display="EnableControl"/>
			<memberdata name="ccodetypefilter" display="cCodeTypeFilter"/>
			<memberdata name="bind" display="Bind"/>
			<memberdata name="cfilenamefilter" display="cFilenameFilter"/>
			<memberdata name="buildfilterstring" display="BuildFilterString"/>
			<memberdata name="loadformsettings" display="LoadFormSettings"/>
			<memberdata name="saveformsettings" display="SaveFormSettings"/>
			<memberdata name="cuisettingsfile" display="cUISettingsFile"/>
			<memberdata name="loadfiltersettings" display="LoadFilterSettings"/>
			<memberdata name="cfilteroptionsxmlfile" display="cFilterOptionsXMLFile"/>
			<memberdata name="cfilteroptionsclass" display="cFilterOptionsClass"/>
			<memberdata name="savefiltersettings" display="SaveFilterSettings"/>
			<memberdata name="buildcheckboxfilter" display="BuildCheckBoxFilter"/>
			<memberdata name="buildtextboxfilter" display="BuildTextboxFilter"/>
			<memberdata name="buildcontainerfilters" display="BuildContainerFilters"/>
			<memberdata name="llreturn" display="llReturn"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Check1' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Use leading ! (for NOT)", ;
		ControlSource = "Thisform.oFilter.FilterNot", ;
		Height = 17, ;
		Left = 703, ;
		Name = "Check1", ;
		Top = 317, ;
		Width = 144, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Check2' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Use wildcards (* and ?)", ;
		ControlSource = "Thisform.oFilter.FilterLike", ;
		Height = 17, ;
		Left = 703, ;
		Name = "Check2", ;
		Top = 288, ;
		Width = 147, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Anchor = 8, ;
		AutoSize = .F., ;
		Caption = "Apply", ;
		Default = .T., ;
		FontSize = 10, ;
		Height = 29, ;
		Left = 36, ;
		Name = "cmdOK", ;
		Top = 366, ;
		Width = 71, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Anchor = 8, ;
		AutoSize = .F., ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 815, ;
		Name = "Command2", ;
		Top = 427, ;
		Visible = .F., ;
		Width = 65, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command3' AS commandbutton WITH ;
		Anchor = 8, ;
		AutoSize = .F., ;
		Caption = "\<Clear All", ;
		FontSize = 10, ;
		Height = 29, ;
		Left = 786, ;
		Name = "Command3", ;
		Top = 366, ;
		Width = 65, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Container1' AS container WITH ;
		BorderWidth = 0, ;
		Height = 358, ;
		Left = 4, ;
		Name = "Container1", ;
		Top = -2, ;
		Width = 880, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Container1.containerClassName' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 80, ;
		Left = 750, ;
		Name = "containerClassName", ;
		TabIndex = 8, ;
		Tag = "_Class", ;
		Top = 95, ;
		Visible = .T., ;
		Width = 121, ;
		Label1.Caption = "Containing Class", ;
		Label1.Name = "Label1", ;
		Label1.Width = 114, ;
		Command1.Name = "Command1", ;
		Command1.Top = 55, ;
		Command2.Name = "Command2", ;
		Command2.Top = 55, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 114, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 51, ;
		LINE2.Width = 113, ;
		txt1.Name = "txt1", ;
		txt1.Width = 113
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerFilename' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 77, ;
		Left = 368, ;
		Name = "containerFilename", ;
		TabIndex = 4, ;
		Top = 191, ;
		Visible = .T., ;
		Width = 124, ;
		Label1.Caption = "Filename", ;
		Label1.Name = "Label1", ;
		Label1.Width = 113, ;
		Command1.Name = "Command1", ;
		Command1.Top = 54, ;
		Command2.Name = "Command2", ;
		Command2.Top = 54, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 113, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 50, ;
		LINE2.Width = 112, ;
		txt1.Name = "txt1", ;
		txt1.Width = 112
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerFilePath' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 77, ;
		Left = 496, ;
		Name = "containerFilePath", ;
		TabIndex = 5, ;
		Top = 191, ;
		Visible = .T., ;
		Width = 124, ;
		Label1.Caption = "FilePath", ;
		Label1.Name = "Label1", ;
		Label1.Width = 113, ;
		Command1.Left = 10, ;
		Command1.Name = "Command1", ;
		Command1.Top = 54, ;
		Command2.Left = 65, ;
		Command2.Name = "Command2", ;
		Command2.Top = 54, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 113, ;
		LINE2.Left = 5, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 51, ;
		LINE2.Width = 112, ;
		txt1.Name = "txt1", ;
		txt1.Width = 112
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerFileType' AS gf_filtercheckboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 344, ;
		Left = 1, ;
		Name = "containerFileType", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 106, ;
		Label1.Caption = "FileType", ;
		Label1.Name = "Label1", ;
		Label1.TabIndex = 19, ;
		Label1.Width = 95, ;
		Command1.Name = "Command1", ;
		Command1.TabIndex = 20, ;
		Command1.Top = 321, ;
		Command2.Name = "Command2", ;
		Command2.TabIndex = 21, ;
		Command2.Top = 321, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 95, ;
		LINE2.Height = 0, ;
		LINE2.Left = 5, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 316, ;
		LINE2.Width = 95
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerFileType.chkASP' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "ASP", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 59, ;
		Name = "chkASP", ;
		TabIndex = 16, ;
		Top = 191, ;
		Value = .T., ;
		Width = 37
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkDBC' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "DBC", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkDBC", ;
		TabIndex = 7, ;
		Top = 136, ;
		Value = .T., ;
		Width = 38
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkFRX' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "FRX", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkFRX", ;
		TabIndex = 3, ;
		Top = 62, ;
		Value = .T., ;
		Width = 37
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkH' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = ".h", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 61, ;
		Name = "chkH", ;
		TabIndex = 12, ;
		Tag = "h", ;
		Top = 100, ;
		Value = .T., ;
		Width = 28
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.ChkHTML' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "HTML", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 59, ;
		Name = "ChkHTML", ;
		TabIndex = 13, ;
		Top = 134, ;
		Value = .T., ;
		Width = 44
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkini' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "INI", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 61, ;
		Name = "chkini", ;
		TabIndex = 11, ;
		Top = 82, ;
		Value = .T., ;
		Width = 33
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkJava' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "JAVA", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 59, ;
		Name = "chkJava", ;
		TabIndex = 17, ;
		Top = 210, ;
		Value = .T., ;
		Width = 43
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkJSP' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "JSP", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 59, ;
		Name = "chkJSP", ;
		TabIndex = 18, ;
		Top = 229, ;
		Value = .T., ;
		Width = 35
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkLBX' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "LBX", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkLBX", ;
		TabIndex = 4, ;
		Top = 80, ;
		Value = .T., ;
		Width = 35
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkMNX' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "MNX", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkMNX", ;
		TabIndex = 5, ;
		Top = 98, ;
		Value = .T., ;
		Width = 39
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkMPR' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "MPR", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 61, ;
		Name = "chkMPR", ;
		TabIndex = 9, ;
		Top = 44, ;
		Value = .T., ;
		Width = 39
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkPJX' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "PJX", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkPJX", ;
		TabIndex = 6, ;
		Top = 117, ;
		Value = .T., ;
		Width = 35
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkPRG' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "PRG", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 61, ;
		Name = "chkPRG", ;
		TabIndex = 8, ;
		Top = 25, ;
		Value = .T., ;
		Width = 38
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkSCX' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "SCX", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkSCX", ;
		TabIndex = 1, ;
		Top = 24, ;
		Value = .T., ;
		Width = 37
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkSPR' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "SPR", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 61, ;
		Name = "chkSPR", ;
		TabIndex = 10, ;
		Top = 63, ;
		Value = .T., ;
		Width = 37
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkTXT' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "TXT", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 59, ;
		Name = "chkTXT", ;
		TabIndex = 15, ;
		Top = 172, ;
		Value = .T., ;
		Width = 36
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkVCX' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "VCX", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "chkVCX", ;
		TabIndex = 2, ;
		Top = 43, ;
		Value = .T., ;
		Width = 37
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerFileType.chkXML' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "XML", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 59, ;
		Name = "chkXML", ;
		TabIndex = 14, ;
		Top = 153, ;
		Value = .T., ;
		Width = 37
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchedLine' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 77, ;
		Left = 368, ;
		Name = "containerMatchedLine", ;
		TabIndex = 3, ;
		Top = 10, ;
		Visible = .T., ;
		Width = 253, ;
		Label1.Caption = "Matched Line", ;
		Label1.Name = "Label1", ;
		Label1.Tag = "matchline", ;
		Label1.Width = 242, ;
		Command1.Name = "Command1", ;
		Command1.Top = 53, ;
		Command2.Name = "Command2", ;
		Command2.Top = 53, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 242, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 49, ;
		LINE2.Width = 241, ;
		txt1.Name = "txt1", ;
		txt1.Width = 241
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerMatchType' AS gf_filtercheckboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 344, ;
		Left = 112, ;
		Name = "containerMatchType", ;
		TabIndex = 2, ;
		Top = 9, ;
		Visible = .T., ;
		Width = 250, ;
		Label1.Caption = "MatchType", ;
		Label1.Left = 69, ;
		Label1.Name = "Label1", ;
		Label1.TabIndex = 31, ;
		Label1.Top = 4, ;
		Label1.Width = 111, ;
		Command1.Left = 10, ;
		Command1.Name = "Command1", ;
		Command1.TabIndex = 29, ;
		Command1.Top = 321, ;
		Command2.Left = 46, ;
		Command2.Name = "Command2", ;
		Command2.TabIndex = 30, ;
		Command2.Top = 321, ;
		LINE1.Height = 0, ;
		LINE1.Left = 6, ;
		LINE1.Name = "LINE1", ;
		LINE1.Top = 20, ;
		LINE1.Width = 238, ;
		LINE2.Height = 0, ;
		LINE2.Left = 5, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 313, ;
		LINE2.Width = 238
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerMatchType.Check1' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Name>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check1", ;
		TabIndex = 11, ;
		Top = 191, ;
		Value = .T., ;
		Width = 61
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check10' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Filename>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check10", ;
		TabIndex = 1, ;
		Top = 23, ;
		Value = .T., ;
		Width = 76
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check11' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Class Def>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check11", ;
		TabIndex = 2, ;
		Top = 40, ;
		Value = .T., ;
		Width = 79
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check12' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Method Def>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check12", ;
		TabIndex = 3, ;
		Top = 57, ;
		Value = .T., ;
		Width = 90
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check14' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Function>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check14", ;
		TabIndex = 5, ;
		Top = 90, ;
		Value = .T., ;
		Width = 75
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check16' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Method>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check16", ;
		TabIndex = 6, ;
		Top = 107, ;
		Value = .T., ;
		Width = 70
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check17' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Baseclass>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check17", ;
		TabIndex = 8, ;
		Top = 141, ;
		Value = .T., ;
		Width = 80
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check18' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Class>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check18", ;
		TabIndex = 9, ;
		Top = 158, ;
		Value = .T., ;
		Width = 59
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check19' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Parent>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check19", ;
		TabIndex = 13, ;
		Top = 23, ;
		Value = .T., ;
		Width = 66
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check2' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Comment>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check2", ;
		TabIndex = 21, ;
		Top = 158, ;
		Value = .T., ;
		Width = 79
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check20' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Parent Class>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check20", ;
		TabIndex = 10, ;
		Top = 175, ;
		Value = .T., ;
		Width = 94
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check21' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Procedure>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check21", ;
		TabIndex = 14, ;
		Top = 40, ;
		Value = .T., ;
		Width = 83
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check22' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Property Desc>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check22", ;
		TabIndex = 15, ;
		Top = 57, ;
		Value = .T., ;
		Width = 102
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check23' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<FileDate>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check23", ;
		TabIndex = 18, ;
		Top = 107, ;
		Value = .T., ;
		Width = 73
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check24' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<TimeStamp>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check24", ;
		TabIndex = 19, ;
		Top = 124, ;
		Value = .T., ;
		Width = 86
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check3' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Property Def>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check3", ;
		TabIndex = 4, ;
		Top = 74, ;
		Value = .T., ;
		Width = 96
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check4' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Property Name>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check4", ;
		TabIndex = 16, ;
		Top = 74, ;
		Value = .T., ;
		Width = 106
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check5' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Containing Class>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check5", ;
		TabIndex = 12, ;
		Top = 208, ;
		Value = .T., ;
		Width = 113
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check7' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Property Value>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check7", ;
		TabIndex = 17, ;
		Top = 90, ;
		Value = .T., ;
		Width = 105
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check8' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Method Desc>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 9, ;
		Name = "Check8", ;
		TabIndex = 7, ;
		Top = 124, ;
		Value = .T., ;
		Width = 96
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Check9' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Constant>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Check9", ;
		TabIndex = 20, ;
		Top = 141, ;
		Value = .T., ;
		Width = 78
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox1' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Code", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 141, ;
		Name = "Gf_filtercheckbox1", ;
		TabIndex = 22, ;
		Top = 176, ;
		Value = .T., ;
		Width = 43
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox2' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Expr>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Gf_filtercheckbox2", ;
		TabIndex = 23, ;
		Top = 277, ;
		Value = .T., ;
		Width = 56
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox3' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<SupExpr>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 174, ;
		Name = "Gf_filtercheckbox3", ;
		TabIndex = 28, ;
		Top = 293, ;
		Value = .T., ;
		Width = 74
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox4' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Name>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 10, ;
		Name = "Gf_filtercheckbox4", ;
		TabIndex = 26, ;
		Top = 294, ;
		Value = .T., ;
		Width = 61
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox5' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Tag>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 99, ;
		Name = "Gf_filtercheckbox5", ;
		TabIndex = 24, ;
		Top = 276, ;
		Value = .T., ;
		Width = 52
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox6' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Tag2>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 99, ;
		Name = "Gf_filtercheckbox6", ;
		TabIndex = 27, ;
		Top = 293, ;
		Value = .T., ;
		Width = 58
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Gf_filtercheckbox7' AS gf_filtercheckbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "<Picture>", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 175, ;
		Name = "Gf_filtercheckbox7", ;
		TabIndex = 25, ;
		Top = 276, ;
		Value = .T., ;
		Width = 67
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Container1.containerMatchType.Label2' AS label WITH ;
		Caption = "Reports", ;
		Height = 22, ;
		Left = 8, ;
		Name = "Label2", ;
		TabIndex = 32, ;
		Top = 256, ;
		Width = 123
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Container1.containerMatchType.Line3' AS line WITH ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 8, ;
		Name = "Line3", ;
		Top = 271, ;
		Width = 233
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Container1.containerMethodName' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 80, ;
		Left = 369, ;
		Name = "containerMethodName", ;
		TabIndex = 7, ;
		Top = 95, ;
		Visible = .T., ;
		Width = 124, ;
		Label1.Caption = "Class", ;
		Label1.Name = "Label1", ;
		Label1.Width = 113, ;
		Command1.Name = "Command1", ;
		Command1.Top = 56, ;
		Command2.Name = "Command2", ;
		Command2.Top = 56, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 113, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 52, ;
		LINE2.Width = 112, ;
		txt1.Name = "txt1", ;
		txt1.Width = 112
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerObjectName' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 77, ;
		Left = 367, ;
		Name = "containerObjectName", ;
		TabIndex = 11, ;
		Top = 278, ;
		Visible = .T., ;
		Width = 124, ;
		Label1.Caption = "Name", ;
		Label1.Name = "Label1", ;
		Label1.Width = 113, ;
		Command1.Name = "Command1", ;
		Command1.Top = 52, ;
		Command2.Name = "Command2", ;
		Command2.Top = 52, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 113, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 48, ;
		LINE2.Width = 112, ;
		txt1.Name = "txt1", ;
		txt1.Width = 112
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.containerTimestamp' AS gf_timestampcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 59, ;
		Left = 624, ;
		Name = "containerTimestamp", ;
		TabIndex = 6, ;
		Top = 194, ;
		Visible = .T., ;
		Width = 251, ;
		Label1.Caption = "TimeStamp", ;
		Label1.Left = 266, ;
		Label1.Name = "Label1", ;
		Label1.Top = 3, ;
		Label1.Width = 76, ;
		Command1.Left = 159, ;
		Command1.Name = "Command1", ;
		Command1.Top = 24, ;
		Command2.Left = 106, ;
		Command2.Name = "Command2", ;
		Command2.Top = 1, ;
		Command2.Visible = .T., ;
		LINE1.Left = 6, ;
		LINE1.Name = "LINE1", ;
		LINE1.Top = 22, ;
		LINE1.Width = 211, ;
		LINE2.Left = 5, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 74, ;
		LINE2.Width = 210, ;
		chkTimeStamp.Alignment = 0, ;
		chkTimeStamp.Caption = "TimeStamp", ;
		chkTimeStamp.ControlSource = "Filter", ;
		chkTimeStamp.Height = 17, ;
		chkTimeStamp.Left = 30, ;
		chkTimeStamp.Name = "chkTimeStamp", ;
		chkTimeStamp.Tag = "Filter", ;
		chkTimeStamp.Top = 2, ;
		chkTimeStamp.Width = 71, ;
		Label11.Left = 3, ;
		Label11.Name = "Label11", ;
		Label11.Top = 31, ;
		Label12.Left = 126, ;
		Label12.Name = "Label12", ;
		Label12.Top = 31, ;
		txtTimeStampFrom.ControlSource = "Timestamp_FilterFrom", ;
		txtTimeStampFrom.Height = 23, ;
		txtTimeStampFrom.Left = 28, ;
		txtTimeStampFrom.Name = "txtTimeStampFrom", ;
		txtTimeStampFrom.Top = 26, ;
		txtTimeStampFrom.Width = 88, ;
		txtTimeStampTo.ControlSource = "Timestamp_FilterTo", ;
		txtTimeStampTo.Height = 23, ;
		txtTimeStampTo.Left = 150, ;
		txtTimeStampTo.Name = "txtTimeStampTo", ;
		txtTimeStampTo.Top = 26, ;
		txtTimeStampTo.Width = 88
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.Gf_textboxcontainer1' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 77, ;
		Left = 626, ;
		Name = "Gf_textboxcontainer1", ;
		TabIndex = 3, ;
		Top = 10, ;
		Visible = .T., ;
		Width = 253, ;
		Label1.Caption = "Procedure", ;
		Label1.Name = "Label1", ;
		Label1.Tag = "ProcCode", ;
		Label1.Width = 242, ;
		Command1.Name = "Command1", ;
		Command1.Top = 53, ;
		Command2.Name = "Command2", ;
		Command2.Top = 53, ;
		Line1.Name = "Line1", ;
		Line1.Width = 242, ;
		Line2.Name = "Line2", ;
		Line2.Top = 49, ;
		Line2.Width = 241, ;
		txt1.Name = "txt1", ;
		txt1.Width = 241
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.Textboxcontainer1' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 80, ;
		Left = 624, ;
		Name = "Textboxcontainer1", ;
		TabIndex = 10, ;
		Top = 95, ;
		Visible = .T., ;
		Width = 122, ;
		Label1.Caption = "Baseclass", ;
		Label1.Height = 17, ;
		Label1.Left = 7, ;
		Label1.Name = "Label1", ;
		Label1.Top = 4, ;
		Label1.Width = 110, ;
		Command1.Name = "Command1", ;
		Command1.Top = 55, ;
		Command2.Name = "Command2", ;
		Command2.Top = 55, ;
		LINE1.Height = 0, ;
		LINE1.Left = 6, ;
		LINE1.Name = "LINE1", ;
		LINE1.Top = 20, ;
		LINE1.Width = 109, ;
		LINE2.Height = 0, ;
		LINE2.Left = 5, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 51, ;
		LINE2.Width = 110, ;
		txt1.Height = 23, ;
		txt1.Left = 7, ;
		txt1.Name = "txt1", ;
		txt1.Top = 26, ;
		txt1.Width = 108
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.Textboxcontainer2' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 80, ;
		Left = 497, ;
		Name = "Textboxcontainer2", ;
		TabIndex = 9, ;
		Top = 95, ;
		Width = 124, ;
		Label1.Caption = "Parent Class", ;
		Label1.Name = "Label1", ;
		Label1.Width = 113, ;
		Command1.Name = "Command1", ;
		Command1.Top = 56, ;
		Command2.Name = "Command2", ;
		Command2.Top = 56, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 113, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 52, ;
		LINE2.Width = 112, ;
		txt1.Name = "txt1", ;
		txt1.Width = 112
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Container1.Textboxcontainer3' AS gf_textboxcontainer WITH ;
		BorderColor = 200,200,200, ;
		Height = 77, ;
		Left = 497, ;
		Name = "Textboxcontainer3", ;
		TabIndex = 12, ;
		Top = 277, ;
		Visible = .T., ;
		Width = 124, ;
		Label1.Caption = "Method Name", ;
		Label1.Name = "Label1", ;
		Label1.Width = 113, ;
		Command1.Name = "Command1", ;
		Command1.Top = 53, ;
		Command2.Name = "Command2", ;
		Command2.Top = 53, ;
		LINE1.Name = "LINE1", ;
		LINE1.Width = 113, ;
		LINE2.Name = "LINE2", ;
		LINE2.Top = 49, ;
		LINE2.Width = 112, ;
		txt1.Name = "txt1", ;
		txt1.Width = 112
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 240,240,240, ;
		BackStyle = 1, ;
		Caption = "  Within textboxes  ", ;
		Height = 17, ;
		Left = 724, ;
		Name = "Label4", ;
		TabIndex = 14, ;
		Top = 264, ;
		Width = 102, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 360, ;
		Width = 910
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Curvature = 3, ;
		Height = 77, ;
		Left = 684, ;
		Name = "Shape1", ;
		Top = 271, ;
		Width = 181, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE applychanges
		This.SaveFilterSettings(This.cFilterOptionsXMLFile)
		
		
	ENDPROC

	PROCEDURE bind
		Lparameters toContainer
		
		lcControlSourceRoot = 'Thisform.oFilter.'
		
		For each control in toContainer.Controls
			If PemStatus(control, 'ControlSource', 5) and !Empty(control.ControlSource)
				control.ControlSource = lcControlSourceRoot + control.ControlSource
			EndIf
		EndFor
		
	ENDPROC

	PROCEDURE buildcheckboxfilter
		Lparameters toContainer, tcFilterObjectProperty, tcSeparator
		
		Local lcCondition, lcExistingString, lcField, lcFilter, lcFilterObjectProperty, lcNewString, lcValue
		
		lnSelect = Select()
		Select (Thisform.oForm.cSearchResultsAlias)
		
		lcField = Getwordnum(tcFilterObjectProperty, 1, '_')
		lcValue = Getwordnum(tcFilterObjectProperty, 2, '_')
		
		lcFilterObjectProperty = 'Thisform.oFilter.' + tcFilterObjectProperty
		lcFilterObjectProperty = Strtran(lcFilterObjectProperty, '<', '')
		lcFilterObjectProperty = Strtran(lcFilterObjectProperty, '>', '')
		lcFilterObjectProperty = Strtran(lcFilterObjectProperty, ' ', '')
		
		lcNewString = ''
		
		If Empty(tcSeparator)
			tcSeparator = 'or'
		Endif
		
		lcExistingString = toContainer.cFilter
		
		If !Empty(lcExistingString)
			lcNewString = lcExistingString + ' ' + tcSeparator + ' '
		Endif
		
		*lcCondition = 'Alltrim(Upper(' + lcField + ')) == [' + Alltrim(Upper(lcValue)) + ']'
		
		lcCondition = 'Alltrim(' + lcField + ')==[' + Alltrim(lcValue) + ']'
		
		*-- Determine if passed value is present in column of search resutls.
		*-- If not, then disable control since, well, there are none, 
		Locate For &lcCondition
		
		If !Found()
			This.EnableControl(toContainer, lcValue, .F.)
		Else
			This.EnableControl(toContainer, lcValue, .T.)
		Endif
		
		
		*-- Add this filter to the filter string if the property is selected, and the value exists
		Try && Could fail if we matched on the (alternate) Tag value, which is fine.
			If Eval(lcFilterObjectProperty)&& And Found()
				lcFilter = lcNewString + lcCondition
				toContainer.cFilter = lcFilter
			Endif
		Catch
		Endtry
		
		Select (lnSelect)
		
	ENDPROC

	PROCEDURE buildcontainerfilters
		Lparameters toContainer
		
		Local lcField, lcFilterObjectProperty, lcValue, loControl
		
		Do Case
		
			Case Upper(toContainer.Class) = 'GF_FILTERCHECKBOXCONTAINER'
				For Each loControl in toContainer.Controls
					
					*==== CHECKBOXES =================================================
					If Upper(loControl.baseclass) = 'CHECKBOX'
						lcFilterObjectProperty = GetWordNum(loControl.ControlSource, 3, '.')
		
						If Upper(toContainer.name) <> 'CONTAINERMATCHTYPE'
							This.BuildCheckBoxFilter(toContainer, lcFilterObjectProperty)
						Endif
		
						*-- Optionally work with Tag value if ControlSource did not match up with any values in the table
						*If (loControl.Enabled = .f. or '<' $ loControl.tag) and !Empty(loControl.Tag)  && Tag could hold an alternate match in the column
						If !Empty(loControl.Tag)  && Tag could hold an alternate match in the column
							lcField = GetWordNum(lcFilterObjectProperty, 1, '_')
							lcValue = '_' + loControl.tag
							This.BuildCheckBoxFilter(toContainer, lcField + lcValue)
						Endif
						
					EndIf
			EndFor
			
			Case Upper(toContainer.Class) = 'GF_TEXTBOXCONTAINER'
						loControl = toContainer.txt1
						lcFilterObjectProperty = GetWordNum(loControl.ControlSource, 3, '.')
						lcFieldInTable = GetWordNum(lcFilterObjectProperty, 1, '_')&& Need to chop off the '_Filter' part of the ControlSource
						lcValue = Alltrim(loControl.Value)
						This.BuildTextboxFilter(toContainer, lcFieldInTable, lcValue)
				
			Case Upper(toContainer.Class) = 'GF_TIMESTAMPCONTAINER'
					lcFilter = ''
					ldFromDate = Thisform.oFilter.Timestamp_FilterFrom
					ldToDate = Thisform.oFilter.Timestamp_FilterTo
		
					If !Empty(toContainer.chkTimeStamp.value)
						lcFromDate = Transform(dtos(ldFromDate), '@R {^####/##/##') + '}'
						lcToDate = Transform(dtos(ldToDate), '@R {^####/##/##') + '}'
		
						Do Case
							Case Empty(ldFromDate) and Empty(ldToDate)
								*-- Do Nothing
							Case Empty(ldFromDate)
								lcFilter = 'TimeStamp <= ' + lcToDate
							Case Empty(ldToDate)
								lcFilter = 'TimeStamp >= ' + lcFromDate
							Otherwise
								lcFilter = 'TimeStamp >= ' + lcFromDate + ' and TimeStamp <= ' + lcToDate
						Endcase
		
						toContainer.cFilter = lcFilter
		
					EndIf
		
		Endcase
		
		
		
		 
		
		
		     
	ENDPROC

	PROCEDURE buildfilterstring
		Local lcAnd, lcFilter, loContainer
		
		lcFilter = ''
		lcAnd = ''
		
		For Each loControl in Thisform.Container1.Controls
			If Upper(loControl.baseclass) = 'CONTAINER'
				loControl.cFilter = ''
				This.BuildContainerFilters(loControl)
				If !Empty(loControl.cFilter)
					lcFilter = lcFilter + lcAnd + '(' + loControl.cFilter + ')'
					lcAnd = ' and '
				EndIf		
			EndIf
		EndFor
		This.cFilter = lcFilter	
		  
	ENDPROC

	PROCEDURE buildtextboxfilter
		Lparameters toContainer, tcField, tcValue
		
		Local lcFilter, llLike, llNot
		
		tcValue = Alltrim(Upper(tcValue))
		
		If Left(tcValue, 1) = '!' and Thisform.oFilter.FilterNot
		 tcValue = Substr(tcValue, 2)
		 llNot = .t.
		EndIf
		
		tcValue = Alltrim(Upper(tcValue))
		
		If ('*' $ tcValue or '?' $ tcValue) and Thisform.oFilter.FilterLike
			tcValue = '*' + tcValue + '*'
			llLike = .t.
		Endif
		
		
		If !Empty(tcValue)
		
			If llLike = .t.
				lcFilter = 'Like([' + tcValue + '], Alltrim(Upper(' + tcField + ')))'
			Else
				lcFilter = '[' + tcValue + '] $ Alltrim(Upper(' + tcField + '))'
			EndIf
			
			If llNot
				lcFilter = '!(' + lcFilter + ')'
			Endif
			
		Else
			lcFilter = ''
		Endif
		
		toContainer.cFilter = lcFilter
		
		  
	ENDPROC

	PROCEDURE Destroy
		DoDefault()
		
		This.BuildFilterString()
		
		This.oFilter = .null.
		
		
	ENDPROC

	PROCEDURE enablecontrol
		Lparameters toContainer, tcCaption, tlEnabled
		
		*-- Looks for a Checkbox within the passed Container, based on the the Caption.
		*-- If found, sets Enabled status to tlEnabed.
		
		Local lcContainer, loControl
		
		For each loControl in toContainer.Controls
			If Upper(loControl.baseclass) = 'CHECKBOX'
				lcTag = Alltrim(Upper(loControl.Tag))
				lcCaption = Alltrim(Upper(Strtran(loControl.caption, '.', '')))	  && To handle .h caption on FileType container
				tcCaption = Alltrim(Upper(tcCaption))
		
				If tcCaption = lcCaption or (lcTag = tcCaption and !Empty(lcTag))
					*loControl.Enabled = tlEnabled
					
					If tlEnabled = .t.
						loControl.Forecolor = Rgb(0,0,0)
						*loControl.FontBold = .t.
					Else
						loControl.Forecolor = Rgb(180,180,180)
						*loControl.FontBold = .f.
					Endif
					
				EndIf
				
				If !loControl.Enabled
					*loControl.Value = 0
				EndIf
					
			EndIf
		EndFor
		
		
		
		
		
		
		   
	ENDPROC

	PROCEDURE Init
		Lparameters toForm, toFilter
		
		This.MaxHeight = This.Height
		This.MaxWidth = This.Width
		
		DoDefault(toForm)
		
		*SF 20221018 -> local storage
		This.cFilterOptionsXMLFile = This.cCR_StoreLocal + This.cFilterOptionsXMLFile
		*/SF 20221018 -> local storage
		
		If Vartype(toFilter) = 'O'
			*-- oFilter should already loaded up with values.
			Thisform.oFilter = toFilter
		Else
			This.oFilter = CreateObject(this.cFilterOptionsClass)
			This.oFilter.LoadFromFile(this.cFilterOptionsXMLFile)
			*Thisform.LoadFilterSettings(this.cFilterOptionsXMLFile)
		EndIf
		
		*-- XML file stores DateTime, so need to convert to just Date
		With Thisform.oFilter
			If Vartype(.Timestamp_FilterFrom) = 'T'
				.Timestamp_FilterFrom = Ttod(.Timestamp_FilterFrom)
			Endif
			If Vartype(.Timestamp_FilterTo) = 'T'
				.Timestamp_FilterTo = Ttod(.Timestamp_FilterTo)
			Endif
		Endwith
		
		*-- Bind up controls to an empty class instance so form can set up
		For Each loControl in This.Container1.Controls
			If Upper(loControl.baseclass) = 'CONTAINER'
				This.Bind(loControl)
			EndIf
		EndFor
		
		Thisform.BuildFilterString() && Call this to handle disabling of checkboxes
		
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE loadfiltersettings		&& Loads saved settings from XML file.
		Lparameters tcFile
		
		Local loMy as 'My' OF 'My.vcx'
		Local laProperties[1], lcProperty
		
		If !File(tcFile)
			Return
		EndIf
		
		loMy = Newobject('My', 'My.vcx')
		AMembers(laProperties, This.oFilter, 0, 'U')
		loMy.Settings.Load(tcFile)
		
		With loMy.Settings
		 
		 For x = 1 to Alen(laProperties)
		 	lcProperty = laProperties[x]
			Try
			 	Store Evaluate('.' + lcProperty) to ('This.oFilter.' + lcProperty)
			Catch
			EndTry
		 Endfor
		
		Endwith
		
		
		
	ENDPROC

	PROCEDURE loadformsettings
		This.MinWidth = this.Width
		This.MinHeight = This.Height
		
		DoDefault()
		
		
	ENDPROC

	PROCEDURE QueryUnload
		thisform.llReturn = .f.
	ENDPROC

	PROCEDURE savefiltersettings
		Lparameters tcFile
		 
		Local loMy as 'My' OF 'My.vcx'
		Local laProperties[1], lcProperty
		
		loMy = Newobject('My', 'My.vcx')
		
		AMembers(laProperties, This.oFilter, 0, 'U')
		
		With loMy.Settings
		 
		 For x = 1 to Alen(laProperties)
		 	lcProperty = laProperties[x]
		 	If !lcProperty = '_MEMBERDATA'
			 	.Add(lcProperty, Evaluate('This.oFilter.' + lcProperty))
			EndIf
		 Endfor
		
		.Save(tcFile)
		
		Endwith
		  
	ENDPROC

	PROCEDURE Unload
		If Thisform.llReturn = .t.
			Return Thisform.cFilter
		Else
			Return .null.
		Endif
		
		 
	ENDPROC

	PROCEDURE cmdOK.Click
		Thisform.llReturn = .t.
		
		ThisForm.ApplyChanges()
		
		Thisform.Release()
		
		 
	ENDPROC

	PROCEDURE Command2.Click
		Thisform.Release()
		
		 
	ENDPROC

	PROCEDURE Command3.Click
		For Each loContainer in Thisform.Container1.Controls
			loContainer.Clear()
		Endfor
		
		Thisform.container1.containerMatchedLine.txt1.SetFocus()
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check1.Init
		This.Caption = MATCHTYPE_NAME
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check10.Init
		This.Caption = MATCHTYPE_FILENAME
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check11.Init
		This.Caption = MATCHTYPE_CLASS_DEF
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check12.Init
		This.Caption = MATCHTYPE_METHOD_DEF
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check16.Init
		This.Caption = MATCHTYPE_METHOD
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check17.Init
		This.Caption = MATCHTYPE_BASECLASS
		
		
		 
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check18.Init
		This.Caption = MATCHTYPE_CLASS
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check2.Init
		This.Caption = MATCHTYPE_COMMENT
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check20.Init
		This.Caption = MATCHTYPE_PARENTCLASS
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check22.Init
		This.Caption = MATCHTYPE_PROPERTY_DESC
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check23.Init
		This.Caption = MATCHTYPE_FILEDATE
		
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check24.Init
		This.Caption = MATCHTYPE_TIMESTAMP
		
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check3.Init
		This.Caption = MATCHTYPE_PROPERTY_DEF
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check4.Init
		This.Caption = MATCHTYPE_PROPERTY_NAME
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check5.Init
		This.Caption = MATCHTYPE_CONTAINING_CLASS
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check7.Init
		This.Caption = MATCHTYPE_PROPERTY_VALUE
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check8.Init
		This.Caption = MATCHTYPE_METHOD_DESC
	ENDPROC

	PROCEDURE Container1.containerMatchType.Check9.Init
		This.Caption = MATCHTYPE_CONSTANT
		
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox1.Init
		This.Caption = MATCHTYPE_CODE
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox2.Init
		This.Caption = MATCHTYPE_FRX_EXPR
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox3.Init
		This.Caption = MATCHTYPE_FRX_SUPEXPR
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox4.Init
		This.Caption = MATCHTYPE_FRX_NAME
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox5.Init
		This.Caption = MATCHTYPE_FRX_TAG
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox6.Init
		This.Caption = MATCHTYPE_FRX_TAG2
	ENDPROC

	PROCEDURE Container1.containerMatchType.Gf_filtercheckbox7.Init
		This.Caption = MATCHTYPE_FRX_PICTURE
	ENDPROC

	PROCEDURE Container1.containerMatchType.Init
		
		DoDefault()
		
		For Each loControl in This.Controls
			If Upper(loControl.baseclass) = 'CHECKBOX'
				loControl.Tag = loControl.Caption	
			Endif
		EndFor
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_filtersinglecheckboxcontainer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkApplyFilter" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: cleardecoration
		*m: decorate
		*m: ldecorated_assign
		*m: setallcheckboxes
		*m: shouldbedecorated
		*p: cfilter
		*p: ldecorated
		*p: ncheckboxcount
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderColor = 150,150,150
		cfilter = 
		Height = 25
		ldecorated = .F.
		Name = "gf_filtersinglecheckboxcontainer"
		ncheckboxcount = 0
		Width = 218
		_memberdata = <VFPData>
			<memberdata name="setallcheckboxes" display="SetAllCheckBoxes"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="ncheckboxcount" display="nCheckBoxCount"/>
			<memberdata name="bordercolor" display="BorderColor"/>
			<memberdata name="clear" display="Clear"/>
			<memberdata name="decorate" display="Decorate"/>
			<memberdata name="cleardecoration" display="ClearDecoration"/>
			<memberdata name="ldecorated" display="lDecorated"/>
			<memberdata name="ldecorated_assign" display="lDecorated_Assign"/>
			<memberdata name="shouldbedecorated" display="ShouldBeDecorated"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'chkApplyFilter' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "Caption", ;
		ControlSource = "", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 10, ;
		Name = "chkApplyFilter", ;
		Picture = ..\images\, ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 61
		*< END OBJECT: BaseClass="checkbox" />
	
	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
	ENDPROC

	PROCEDURE cleardecoration
		This.lDecorated = .F.
		
	ENDPROC

	PROCEDURE decorate
		This.lDecorated = .T.
	ENDPROC

	PROCEDURE ldecorated_assign
		Lparameters tlDecorated
		This.lDecorated = m.tlDecorated
		
		If m.tlDecorated
			This.BorderWidth	 = 2
			This.BorderColor	 = Rgb(255, 0, 0)
		Else
			This.BorderWidth	 = 1
			This.BorderColor	 = Rgb(175, 175, 175)
		Endif
		
		If Pemstatus(Thisform, 'DecoratePage', 5) And This.Parent.BaseClass = 'Page'
			Thisform.DecoratePage(This.Parent)
		Endif
	ENDPROC

	PROCEDURE Refresh
		This.ClearDecoration()
		
		If This.ShouldBeDecorated()
			This.Decorate()
		Endif
		
	ENDPROC

	PROCEDURE setallcheckboxes
	ENDPROC

	PROCEDURE shouldbedecorated
		Local loControl
		For Each m.loControl In This.Controls
			If Upper(m.loControl.BaseClass) = 'CHECKBOX' And Not Empty(m.loControl.Value)&& and loControl.Enabled
				Return .T.
				Exit
			Endif
		Endfor
		Return .F.
	ENDPROC

	PROCEDURE chkApplyFilter.Valid
		This.Parent.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_grid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: arrangecolumns
		*m: findcolumn
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Height = 200
		Name = "gf_grid"
		Width = 320
		_memberdata = <VFPData>
			<memberdata name="arrangecolumns" display="ArrangeColumns"/>
			<memberdata name="findcolumn" display="FindColumn"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE arrangecolumns
		Local laColumns[1], lnColumnCount, lnI, loColumn
		
		lnColumnCount = This.ColumnCount
		
		Dimension laColumns[lnColumnCount, 4] 
		
		For lnI = 1 to lnColumnCount
			loColumn = This.Columns[lnI]
			laColumns[lnI, 1] = loColumn
			laColumns[lnI, 2] = loColumn.ColumnOrder
			laColumns[lnI, 3] = loColumn.Visible
			laColumns[lnI, 4] = loColumn.ControlSource
		EndFor
		
		Asort(laColumns, 2, -1, 0)
		Asort(laColumns, 3, -1, 1)
		
		For lnI = 1 to lnColumnCount
			loColumn = laColumns[lnI, 1]
			loColumn.ColumnOrder = lnI
		EndFor   
	ENDPROC

	PROCEDURE findcolumn
		Lparameters tcControlSource
		
		Local loColumn, lcControlSourceField
		
		For each loColumn in This.Columns
			lcControlSourceField = GetWordNum(loColumn.ControlSource, 2, '.')
			If Alltrim(Upper(lcControlSourceField)) == Alltrim(Upper(tcControlSource))
				Return loColumn
			Endif
		Endfor
		 
		Return .NULL.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_progressbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="box" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="bar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="bar.Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: nvalue_assign
		*m: reset		&& Resets the Timer control so that it starts counting from 0.
		*m: start
		*m: stop
		*m: update
		*p: csetcursor
		*p: nmaxvalue
		*p: nvalue
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderColor = 0,0,0
		csetcursor = 
		Height = 102
		Name = "gf_progressbar"
		nmaxvalue = 0
		nvalue = 0
		Width = 485
		_memberdata = <VFPData>
			<memberdata name="reset" display="Reset"/>
			<memberdata name="update" display="Update"/>
			<memberdata name="nvalue" display="nValue"/>
			<memberdata name="nmaxvalue" display="nMaxValue"/>
			<memberdata name="nvalue_assign" display="nValue_Assign"/>
			<memberdata name="start" display="Start"/>
			<memberdata name="csetcursor" display="cSetCursor"/>
			<memberdata name="stop" display="Stop"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'bar' AS container WITH ;
		BackColor = 0,64,128, ;
		Height = 23, ;
		Left = 22, ;
		Name = "bar", ;
		Top = 45, ;
		Width = 228
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'bar.Image1' AS image WITH ;
		Height = 50, ;
		Left = 0, ;
		Name = "Image1", ;
		Picture = ..\images\progressbar.bmp, ;
		RotateFlip = 0, ;
		Stretch = 2, ;
		Top = -22, ;
		Width = 1000
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'box' AS container WITH ;
		BackColor = 128,128,128, ;
		BorderColor = 192,192,192, ;
		Height = 30, ;
		Left = 17, ;
		Name = "box", ;
		Top = 41, ;
		Width = 449
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Image1' AS image WITH ;
		Height = 100, ;
		Left = 1, ;
		Name = "Image1", ;
		Picture = ..\images\progressbarbackground.bmp, ;
		Stretch = 2, ;
		Top = 1, ;
		Width = 483
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Searching...", ;
		FontSize = 10, ;
		ForeColor = 255,255,255, ;
		Height = 23, ;
		Left = 17, ;
		Name = "Label1", ;
		Top = 8, ;
		Width = 163
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Press ESCAPE to cancel.", ;
		FontSize = 9, ;
		ForeColor = 255,255,255, ;
		Height = 22, ;
		Left = 18, ;
		Name = "Label2", ;
		Top = 79, ;
		Width = 284
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE nvalue_assign
		lparameters tnValue
		
		This.nValue = tnValue
		
		This.Update()
		
	ENDPROC

	PROCEDURE reset		&& Resets the Timer control so that it starts counting from 0.
		This.bar.Width = 0
		This.Refresh()
	ENDPROC

	PROCEDURE start
		Lparameters tnMaxValue
		
		Local lnMaxValue
		
		lnMaxValue = Evl(tnMaxValue, 1)
		
		*This.cSetCursor = Set('Cursor')
		
		*Set Cursor Off
		
		This.nMaxValue = lnMaxValue 
		This.nValue = 0
		This.Visible = .t.
		This.Update()
		
		 
	ENDPROC

	PROCEDURE stop
		Local lcSetCursor
		
		*lcSetCursor = This.cSetCursor
		
		This.Visible = .f.
		
		*Set Cursor &lcSetCursor
	ENDPROC

	PROCEDURE update
		Local lnMaxValue
		
		lnMaxValue = Iif(This.nMaxValue < 0, 1, This.nMaxValue)
		
		This.Bar.Width = Int((This.nValue / lnMaxValue) * This.Box.Width * .97)
		
		If This.Bar.Width > This.Box.Width - 10
			This.Bar.Width = This.Box.Width - 10
		Endif
		
		
		
	ENDPROC

	PROCEDURE bar.Init
		This.Width = 0
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_resultsform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="comboSearchExpressionHistory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="editSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="comboSearchScopeHistory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerLeft.oTreeView" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerLeft.cntVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerLeft.cntVersion.Gf_versionlabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerLeft.cntVersion.cmdVFPX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl.comboViewPosition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl.lblCodeView" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl.ButtonContainer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl.ButtonContainer.lblFilePath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl.cmdCompressCodeview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container2.containerWebControl.cmdMaximizeCodeView" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdGoToObject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.lblResults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column17.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column17.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column3.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column4.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column4.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column18.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column18.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.colProcess.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.colProcess.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.colProcess.Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.colProcess.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.colProcess.imageCheck" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column7.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column7.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column8.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column8.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column6.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column6.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column9.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column9.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column10.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column10.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column11.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column11.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column12.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column12.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column16.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column16.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column13.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column13.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column14.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column14.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column15.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column15.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column5.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column5.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column19.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column19.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column20.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column20.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column21.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column21.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column22.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column22.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column23.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column23.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column25.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.GridFiles.Column25.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page1.editReplaceExpression" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdReplace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page1.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdCheckAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdClearAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page2.editReplaceLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page2.lblReplaceLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page2.cmdSaveLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdReplace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdCheckAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdClearAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.Pageframe.Page3.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.cmdReplaceErrors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.optiongroupReplaceMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.containerReplaceText.cmdReplaceHistory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdOpenExplorer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdReport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdSearchErrors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.chkReplaceMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdClassBrowser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Container1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Container1.chkApplyFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Container1.cmdFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Container2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Container2.chkCodeOnly" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Container1.Container2.Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.Splitter1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="containerRight.splitter3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="splitter2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ProgressBar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="comboSearchExpressionHistoryDropDownArrow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="timerShowAdvancedForm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgScopeIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.chkSubdirectories" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.chkLimitToProjectFolder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.cmdSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.cmdAdvanced" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.cmdOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Container1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Container1.chkApplyFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.comboViewPosition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.lblCodeView" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Container2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Container2.chkApplyFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Container3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.Container3.chkApplyFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.lblSearchTime" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.cmdHelp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ButtonContainer.cmdRegexpHelp" UniqueID="" Timestamp="" />

	#INCLUDE "gofish.h"
	*<DefinedPropArrayMethod>
		*m: addclassestotreeview
		*m: adjustformforreplacepanel
		*m: applyfilter
		*m: buildsearchhistorycursor
		*m: checkall
		*m: clearall
		*m: cleargfsefilter
		*m: clearsearchresultscursor
		*m: cleartreeview
		*m: clicktreeviewnode
		*m: combinefilters
		*m: confirmreplace
		*m: doreplace
		*m: dosearch
		*m: editfile
		*m: editmenufromcurrentrow
		*m: editobjectfromcurrentrow
		*m: expandallnodes
		*m: exporttoexcel
		*m: fillsearchresultscursor
		*m: filtergfse
		*m: focusonreplacepageframe
		*m: formatgrid
		*m: formatgridforreplacemode
		*m: formatprocesscolumn
		*m: getcurrentscope		&& Will return the Active Project, Browsed Project, Current Dir, or Browsed Dir depending on current setting of nSearchScope (Values: 1 through 4)
		*m: getcustomcss
		*m: getlastsavedresultsfolder
		*m: gridcolumnrightclick
		*m: gridheaderrightclick
		*m: lmaximizecodeview_assign
		*m: loadfiltersettings
		*m: loadformsettings
		*m: loadreplaceline
		*m: loadsavedresults
		*m: lockwindow
		*m: lreplacemode_assign
		*m: mhelpnotes
		*m: navigatetomasterrecord
		*m: ncodewindowposition_assign
		*m: nreplacemode_assign
		*m: populatetreeview
		*m: replace
		*m: replaceline
		*m: resizecodepage
		*m: restoredefaultdir
		*m: restorelastsearch
		*m: restoreprevioussearch
		*m: restoresavedsearch
		*m: restoresearchengineoptions
		*m: restoresearchfromhistory
		*m: restoretreeviewonstartup
		*m: runjanitor
		*m: runjanitorforreplacehistory
		*m: runjanitorforsearchhistory
		*m: saveformsettings
		*m: savesearchinfo
		*m: savesearchresults
		*m: search
		*m: setcaption
		*m: seterror
		*m: setpath
		*m: setproject
		*m: setscope
		*m: setsearchexpression
		*m: set_gridcolour		&& Set the colours for the grid, moved to load options
		*m: showadvancedform
		*m: showcodeforcurrentrow
		*m: showerrors
		*m: showfilterform
		*m: showform
		*m: showgofishhelppage
		*m: showgridcolumn
		*m: showhelpform
		*m: showhtml
		*m: showhtmlcodeview
		*m: showoptionsform
		*m: showreplaceerrors
		*m: showreplacehistory
		*m: showreplacepanel
		*m: showsearcherrors
		*m: sortcolumn
		*m: sortcolumnsecondary
		*m: updateformaftereplace
		*m: updateformaftersearch
		*m: updatesearchenginecursor
		*m: updatesearchscopevariables
		*m: updatetreeview
		*m: validateinputs
		*m: validatereplaceexpression
		*m: viewreport
		*p: cactiveproject
		*p: cbrowseproject
		*p: ccr_storelocal		&& Location of storage.
		*p: ccr_storelocal_option		&& Internal storage for local path, just to display and set. Just to store change for second call of options
		*p: ccurrentdir
		*p: ccustomcss
		*p: cdonotrenderextensions		&& A list of common file types that cannot be rendered in the code viewer on the GoFish form.
		*p: cfilter
		*p: cfilteroptionsclass
		*p: cfilteroptionsxmlfile
		*p: chtmlcodeviewfilename
		*p: cinitialdefaultdir
		*p: conkeylabeldot
		*p: corderby
		*p: creplaceline
		*p: creplaceudffilename
		*p: cresultsmessage
		*p: csavedsearchresultsfolder		&& This property value is used by the RemoveFolder() function in the GoFishProc.prg file. If changed here, you'll need to update code in that fucntion also.
		*p: csearchoptionsxmlfile
		*p: csearchresultsalias
		*p: csearchresultsmessage
		*p: csortfield
		*p: csortfields
		*p: csortfieldsecondary
		*p: csortfieldtertiary
		*p: csortorder
		*p: csortordersecondary
		*p: csortordertertiary
		*p: ctreeviewfilter
		*p: cuisettingsfile
		*p: dlastjanitorrundate
		*p: lapplyfilter
		*p: lautoyield
		*p: lclearapplyfilter
		*p: lcodeonly
		*p: lcommentsonly
		*p: lcr_allow		&& Turn on CR options
		*p: lcr_allowed		&& Internal, is it possible to allow CR options (must have resource file)
		*p: lcr_local		&& Use local storage place.
		*p: lcr_local_default		&& Local storage will be created on standard place by default.
		*p: lcr_store_restart		&& Internal storage if Goish must be restart for several settings
		*p: ldesktop		&& The setting for Desktop
		*p: lgooglechromeframe		&& Indicates if the HTML view should be generated using the Google Chrome frame plug-ing for Internet Explorer. Slower due to file activity, but allows selecting of text from matched row in html view.
		*p: linit
		*p: lmaximizecodeview
		*p: lmovenewcodetotopleft
		*p: lonlyfirstmatchinstatement
		*p: lreplaceformvisible
		*p: lreplacemode
		*p: lrestoreprevioussearchresultsonstartup
		*p: lrunjanitordaily
		*p: lsavesearchresults
		*p: lsavesettings		&& This property can be used to prevent the form from saving its settings when closed. It will start out .T. each time GoFish is launched.
		*p: lsearchformvisible
		*p: lsearching
		*p: lwarnwholeword
		*p: nbrowserzoom
		*p: ncodewindowposition		&& *** nEnum 1=Below; 2= on Right; 3 = on Left
		*p: ncontainerframecolour		&& Frame colour for several containers, in case red is something you do not see
		*p: ncss_tr_even_colour		&& CSS für tr:even
		*p: ncss_tr_odd_colour		&& CSS für tr:odd
		*p: ncurrentid
		*p: ndropdowndisplaycount		&& Controls the numbner of history items shown in the Search Expression and Scope history dropdown boxes.
		*p: ndropdownmaxmru
		*p: nfiledefaultdynamicforecolour		&& Grid, dynamic fore colour file type Default
		*p: nfileprgdynamicforecolour		&& Grid, dynamic fore colour file type PRG
		*p: nfilescxdynamicforecolour		&& Grid, dynamic fore colour file type SCX
		*p: nfilevcxdynamicforecolour		&& Grid, dynamic fore colour file type VCX
		*p: nfirstload		&& LoadFormSettings is not run once.
		*p: ngridfontsize
		*p: njanitorreplacehistorydays
		*p: njanitorsearchhistorydays
		*p: nmaxsizetorenderhtml		&& If the code from the match is too large, the HTML rendering can be slow. This will skip the html rendering for code blocks larger than this size and just display it as plaint text.
		*p: noriginalsearchscope		&& The original value of nSearchScope on the SearchOptions after reading the xml files. Used to restore value right before saving the settings upon exit (if SearchScope combo is used).
		*p: nprevioussessiontreeviewindex
		*p: nreplaceddynamicbackcolour		&& Grid, dynamic back colour replaced
		*p: nreplacemode
		*p: nreplacerisk
		*p: nrisk2dynamicbackcolour		&& Grid, dynamic back colour replace risk value 2
		*p: nrisk3dynamicbackcolour		&& Grid, dynamic back colour replace risk value 3
		*p: nriskexceededdynamicbackcolour		&& Grid, dynamic back colour replace risk exceeds setting
		*p: nsearchboxfontsize
		*p: nsplitterposratio
		*p: ntabstospaces
		*p: ntreesearchcolour		&& Tree colour while searching?
		*p: ntreeupdatecolour		&& Tree colour while updateing?
		*p: ntreeviewfontsize
		*p: obrowser
		*p: ofilter
		*p: ogrid
		*p: osearchengine
		*p: osearchoptions
		*p: otree
		*p: owebcontrol
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		AllowOutput = .F.
		BorderStyle = 3
		cactiveproject = 
		Caption = "GoFish 4.4"
		cbrowseproject = 
		ccr_storelocal = (ADDBS(HOME(7)))
		ccurrentdir = 
		ccustomcss = .NULL.
		cdonotrenderextensions = (' DOC DOCX XLS XLXS PDF CHM ')
		cfilter = 
		cfilteroptionsclass = GF_SearchResultsFilter
		cfilteroptionsxmlfile = GF_Filter_Settings.xml
		chtmlcodeviewfilename = 
		cinitialdefaultdir = 
		conkeylabeldot = 
		corderby = 
		creplaceline = 
		creplaceudffilename = 
		cresultsmessage = 
		csavedsearchresultsfolder = GF_Saved_Search_Results
		csearchoptionsxmlfile = GF_Search_Settings.xml
		csearchresultsalias = csrSummarySearchResults
		csearchresultsmessage = 
		csortfield = 
		csortfields = 
		csortfieldsecondary = 
		csortfieldtertiary = 
		csortorder = 
		csortordersecondary = 
		csortordertertiary = 
		ctreeviewfilter = 
		cuisettingsfile = GF_Results_Form_Settings.xml
		DataSession = 2
		dlastjanitorrundate = ({//})
		Dockable = 0
		DoCreate = .T.
		FontName = "Tahoma"
		Height = 595
		KeyPreview = .T.
		lapplyfilter = .F.
		lautoyield = .F.
		lclearapplyfilter = .F.
		lcodeonly = .F.
		lcommentsonly = .F.
		lcr_local_default = .T.
		ldesktop = .F.
		Left = 0
		lgooglechromeframe = .F.
		linit = .F.
		lmaximizecodeview = .F.
		lmovenewcodetotopleft = .T.
		lonlyfirstmatchinstatement = .F.
		lreplaceformvisible = .F.
		lreplacemode = .F.
		lrestoreprevioussearchresultsonstartup = .F.
		lrunjanitordaily = .F.
		lsavesearchresults = .T.
		lsavesettings = .T.
		lsearchformvisible = .F.
		lsearching = .F.
		lwarnwholeword = .F.
		MaxWidth = -1
		MinHeight = 425
		MinWidth = 800
		Name = "gf_resultsform"
		nbrowserzoom =          0.9
		ncodewindowposition = 1
		ncontainerframecolour = (RGB(255,  0,  0))
		ncss_tr_even_colour = (RGB(0xa8,0xfa,0xf4))
		ncss_tr_odd_colour = (RGB(0xD1,0xF1,0xEF))
		ncurrentid = 0
		ndropdowndisplaycount = 30
		ndropdownmaxmru = 7
		nfiledefaultdynamicforecolour = (RGB(  0,  0,  0))
		nfileprgdynamicforecolour = (RGB(255,  0,  0))
		nfilescxdynamicforecolour = (RGB(  0,  0,128))
		nfilevcxdynamicforecolour = (RGB(  0,128,  0))
		nfirstload = 0
		ngridfontsize = 8
		njanitorreplacehistorydays = 10000
		njanitorsearchhistorydays = 10000
		nmaxsizetorenderhtml = 5000000
		noriginalsearchscope = 0
		nprevioussessiontreeviewindex = 0
		nreplaceddynamicbackcolour = (RGB(149,249,147))
		nreplacemode = 0
		nreplacerisk = 1
		nrisk2dynamicbackcolour = (Rgb(255,255,128))
		nrisk3dynamicbackcolour = (Rgb(255,192,  0))
		nriskexceededdynamicbackcolour = (Rgb(210,210,210))
		nsearchboxfontsize = 9
		nsplitterposratio = 0
		ntabstospaces = 0
		ntreesearchcolour = (RGB(  0,128,  0))
		ntreeupdatecolour = (RGB(128,  0,  0))
		ntreeviewfontsize = 8
		obrowser = .NULL.
		ofilter = 
		ogrid = .NULL.
		osearchengine = .NULL.
		osearchoptions = .NULL.
		otree = .NULL.
		owebcontrol = .NULL.
		Picture = ..\..\..\..\programs\9.0\commonapps\
		ShowTips = .T.
		TabStop = .T.
		Top = 0
		Visible = .T.
		Width = 1000
		WindowState = 2
		WindowType = 0
		_memberdata = <VFPData>
			<memberdata name="width" display="Width"/>
			<memberdata name="height" display="Height"/>
			<memberdata name="seterror" display="SetError"/>
			<memberdata name="osearchengine" display="oSearchEngine"/>
			<memberdata name="formatgrid" display="FormatGrid"/>
			<memberdata name="csearchresultsalias" display="cSearchResultsAlias"/>
			<memberdata name="caption" display="Caption"/>
			<memberdata name="sortcolumn" display="SortColumn"/>
			<memberdata name="restoresearchengineoptions" display="RestoreSearchEngineOptions"/>
			<memberdata name="csearchoptionsxmlfile" display="cSearchOptionsXMLFile"/>
			<memberdata name="cuisettingsfile" display="cUISettingsFile"/>
			<memberdata name="loadformsettings" display="LoadFormSettings"/>
			<memberdata name="saveformsettings" display="SaveFormSettings"/>
			<memberdata name="ogrid" display="oGrid"/>
			<memberdata name="restoredefaultdir" display="RestoreDefaultDir"/>
			<memberdata name="cinitialdefaultdir" display="cInitialDefaultDir"/>
			<memberdata name="dosearch" display="DoSearch"/>
			<memberdata name="fillsearchresultscursor" display="FillSearchResultsCursor"/>
			<memberdata name="updateformaftersearch" display="UpdateFormAfterSearch"/>
			<memberdata name="clearsearchresultscursor" display="ClearSearchResultsCursor"/>
			<memberdata name="validateinputs" display="ValidateInputs"/>
			<memberdata name="chtmlcodeviewfilename" display="cHtmlCodeViewFilename"/>
			<memberdata name="showhtmlcodeview" display="ShowHtmlCodeView"/>
			<memberdata name="cbrowseproject" display="cBrowseProject"/>
			<memberdata name="ccurrentdir" display="cCurrentDir"/>
			<memberdata name="setpath" display="SetPath"/>
			<memberdata name="setproject" display="SetProject"/>
			<memberdata name="cactiveproject" display="cActiveProject"/>
			<memberdata name="top" display="Top"/>
			<memberdata name="ncurrentid" display="nCurrentId"/>
			<memberdata name="obrowser" display="oBrowser"/>
			<memberdata name="nbrowserzoom" display="nBrowserZoom"/>
			<memberdata name="editfile" display="EditFile"/>
			<memberdata name="updatesearchscopevariables" display="UpdateSearchScopeVariables"/>
			<memberdata name="showcodeforcurrentrow" display="ShowCodeForCurrentRow"/>
			<memberdata name="lsearchformvisible" display="lSearchFormVisible"/>
			<memberdata name="populatetreeview" display="PopulateTreeview"/>
			<memberdata name="expandallnodes" display="ExpandAllNodes"/>
			<memberdata name="otree" display="oTree"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="csortorder" display="cSortOrder"/>
			<memberdata name="csortfields" display="cSortFields"/>
			<memberdata name="ngridfontsize" display="nGridFontSize"/>
			<memberdata name="addclassestotreeview" display="AddClassesToTreeView"/>
			<memberdata name="navigatetomasterrecord" display="NavigateToMasterRecord"/>
			<memberdata name="getcurrentscope" display="GetCurrentScope"/>
			<memberdata name="showoptionsform" display="ShowOptionsForm"/>
			<memberdata name="showfilterform" display="ShowFilterForm"/>
			<memberdata name="lsearching" display="lSearching"/>
			<memberdata name="showform" display="ShowForm"/>
			<memberdata name="showhelpform" display="ShowHelpForm"/>
			<memberdata name="showhtml" display="ShowHtml"/>
			<memberdata name="setcaption" display="SetCaption"/>
			<memberdata name="search" display="Search"/>
			<memberdata name="linit" display="lInit"/>
			<memberdata name="viewreport" display="ViewReport"/>
			<memberdata name="owebcontrol" display="oWebControl"/>
			<memberdata name="csearchresultsmessage" display="cSearchResultsMessage"/>
			<memberdata name="cresultsmessage" display="cResultsMessage"/>
			<memberdata name="updatetreeview" display="UpdateTreeView"/>
			<memberdata name="lapplyfilter" display="lApplyFilter"/>
			<memberdata name="applyfilter" display="ApplyFilter"/>
			<memberdata name="lreplaceformvisible" display="lReplaceFormVisible"/>
			<memberdata name="showreplacepanel" display="ShowReplacePanel"/>
			<memberdata name="lreplacemode" display="lReplaceMode"/>
			<memberdata name="lreplacemode_assign" display="lReplaceMode_Assign"/>
			<memberdata name="updatesearchenginecursor" display="UpdateSearchEngineCursor"/>
			<memberdata name="nreplacerisk" display="nReplaceRisk"/>
			<memberdata name="validatereplaceexpression" display="ValidateReplaceExpression"/>
			<memberdata name="replaceline" display="ReplaceLine"/>
			<memberdata name="confirmreplace" display="ConfirmReplace"/>
			<memberdata name="creplaceline" display="cReplaceLine"/>
			<memberdata name="updateformaftereplace" display="UpdateFormAfteReplace"/>
			<memberdata name="loadreplaceline" display="LoadReplaceLine"/>
			<memberdata name="formatgridforreplacemode" display="FormatGridForReplaceMode"/>
			<memberdata name="adjustformforreplacepanel" display="AdjustFormForReplacePanel"/>
			<memberdata name="clearall" display="ClearAll"/>
			<memberdata name="filtergfse" display="FilterGFSE"/>
			<memberdata name="cleargfsefilter" display="ClearGFSEFilter"/>
			<memberdata name="checkall" display="CheckAll"/>
			<memberdata name="cdonotrenderextensions" display="cDoNotRenderExtensions"/>
			<memberdata name="noriginalsearchscope" display="nOriginalSearchScope"/>
			<memberdata name="nreplacemode" display="nReplaceMode"/>
			<memberdata name="creplaceudffilename" display="cReplaceUDFFilename"/>
			<memberdata name="showgofishhelppage" display="ShowGoFishHelpPage"/>
			<memberdata name="showreplacehistory" display="ShowReplaceHistory"/>
			<memberdata name="doreplace" display="DoReplace"/>
			<memberdata name="replace" display="Replace"/>
			<memberdata name="nreplacemode_assign" display="nReplaceMode_Assign"/>
			<memberdata name="formatprocesscolumn" display="FormatProcessColumn"/>
			<memberdata name="nsplitterposratio" display="nSplitterPosRatio"/>
			<memberdata name="osearchoptions" display="oSearchOptions"/>
			<memberdata name="showadvancedform" display="ShowAdvancedForm"/>
			<memberdata name="lautoyield" display="lAutoYield"/>
			<memberdata name="setscope" display="SetScope"/>
			<memberdata name="setsearchexpression" display="SetSearchExpression"/>
			<memberdata name="lsavesettings" display="lSaveSettings"/>
			<memberdata name="ndropdowndisplaycount" display="nDropDownDisplayCount"/>
			<memberdata name="lgooglechromeframe" display="lGoogleChromeFrame"/>
			<memberdata name="nmaxsizetorenderhtml" display="nMaxSizeToRenderHtml"/>
			<memberdata name="ndropdownmaxmru" display="nDropDownMaxMRU"/>
			<memberdata name="lclearapplyfilter" display="lClearApplyFilter"/>
			<memberdata name="lwarnwholeword" display="lWarnWholeWord"/>
			<memberdata name="showgridcolumn" display="ShowGridColumn"/>
			<memberdata name="conkeylabeldot" display="cOnKeyLabelDot"/>
			<memberdata name="sortcolumnsecondary" display="SortColumnSecondary"/>
			<memberdata name="csortordersecondary" display="cSortOrderSecondary"/>
			<memberdata name="csortfieldsecondary" display="cSortFieldSecondary"/>
			<memberdata name="csortfieldtertiary" display="cSortFieldTertiary"/>
			<memberdata name="csortordertertiary" display="cSortOrderTertiary"/>
			<memberdata name="csortfield" display="cSortField"/>
			<memberdata name="exporttoexcel" display="ExportToExcel"/>
			<memberdata name="corderby" display="cOrderBy"/>
			<memberdata name="loadsavedresults" display="LoadSavedResults"/>
			<memberdata name="savesearchresults" display="SaveSearchResults"/>
			<memberdata name="nprevioussessiontreeviewindex" display="nPreviousSessionTreeviewIndex"/>
			<memberdata name="restoretreeviewonstartup" display="RestoreTreeViewOnStartup"/>
			<memberdata name="csavedsearchresultsfolder" display="cSavedSearchResultsFolder"/>
			<memberdata name="savesearchinfo" display="SaveSearchInfo"/>
			<memberdata name="restoreprevioussearch" display="RestorePreviousSearch"/>
			<memberdata name="restoresavedsearch" display="RestoreSavedSearch"/>
			<memberdata name="buildsearchhistorycursor" display="BuildSearchHistoryCursor"/>
			<memberdata name="lrestoreprevioussearchresultsonstartup" display="lRestorePreviousSearchResultsOnStartup"/>
			<memberdata name="getlastsavedresultsfolder" display="GetLastSavedResultsFolder"/>
			<memberdata name="ldesktop" display="lDesktop"/>
			<memberdata name="ccr_storelocal" type="method" display="cCR_StoreLocal" favorites="False"/>
			<memberdata name="nfirstload" type="property" display="nFirstLoad" favorites="False"/>
			<memberdata name="ccr_storelocal" type="property" display="cCR_StoreLocal" favorites="False"/>
			<memberdata name="lcr_allow" type="property" display="lCR_Allow"/>
			<memberdata name="ccustomcss" display="cCustomCss"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'ButtonContainer' AS container WITH ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 58, ;
		Left = 470, ;
		Name = "ButtonContainer", ;
		Picture = ..\images\, ;
		Top = -2, ;
		Width = 528
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ButtonContainer.chkLimitToProjectFolder' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Limit to home...", ;
		ControlSource = "thisform.oSearchOptions.lLimitToProjectFolder", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 8, ;
		Name = "chkLimitToProjectFolder", ;
		Picture = ..\images\, ;
		TabIndex = 12, ;
		ToolTipText = "Limit search to project home directory and sub-folders", ;
		Top = 37, ;
		Width = 89
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'ButtonContainer.chkSubdirectories' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Subdirectories", ;
		ControlSource = "Thisform.oSearchOptions.lIncludeSubDirectories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 8, ;
		Name = "chkSubdirectories", ;
		Picture = ..\images\, ;
		TabIndex = 11, ;
		ToolTipText = "Include subdirectories in search", ;
		Top = 37, ;
		Width = 88
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'ButtonContainer.cmdAdvanced' AS commandbutton WITH ;
		Anchor = 8, ;
		Caption = "\<Advanced", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 278, ;
		Name = "cmdAdvanced", ;
		Picture = ('images\find.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 5, ;
		ToolTipText = "See context menu", ;
		Top = 7, ;
		Width = 76
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ButtonContainer.cmdHelp' AS commandbutton WITH ;
		Anchor = 9, ;
		Caption = "", ;
		Height = 22, ;
		Left = 439, ;
		Name = "cmdHelp", ;
		Picture = ('images\refhelp.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 16, ;
		Top = 7, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ButtonContainer.cmdOptions' AS commandbutton WITH ;
		Anchor = 8, ;
		Caption = "\<Options", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 364, ;
		Name = "cmdOptions", ;
		Picture = ('images\properties.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 9, ;
		ToolTipText = "", ;
		Top = 7, ;
		Width = 62
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ButtonContainer.cmdRegexpHelp' AS commandbutton WITH ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 250, ;
		Name = "cmdRegexpHelp", ;
		Picture = ('images\GrammarIconRegex.gif'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 5, ;
		ToolTipText = "Help for forming regular expressions", ;
		Top = 7, ;
		Width = 22
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ButtonContainer.cmdSearch' AS commandbutton WITH ;
		Anchor = 8, ;
		Caption = " \<Go Fish", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 8, ;
		Name = "cmdSearch", ;
		Picture = ('images\GoFish16.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 4, ;
		Top = 7, ;
		Width = 68
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ButtonContainer.comboViewPosition' AS combobox WITH ;
		ControlSource = "Thisform.oSearchOptions.nSearchMode", ;
		FontSize = 8, ;
		Height = 24, ;
		Left = 118, ;
		Name = "comboViewPosition", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\, ;
		Style = 2, ;
		TabIndex = 24, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = 6, ;
		Width = 128, ;
		ZOrderSet = 8
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'ButtonContainer.Command1' AS commandbutton WITH ;
		Anchor = 8, ;
		Caption = "\<History", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 362, ;
		Name = "Command1", ;
		Picture = ('images\openfold.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 9, ;
		ToolTipText = "See context menu", ;
		Top = 34, ;
		Width = 65
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ButtonContainer.Container1' AS container WITH ;
		BackStyle = 0, ;
		BorderColor = 255,0,0, ;
		BorderWidth = 2, ;
		Height = 25, ;
		Left = 99, ;
		Name = "Container1", ;
		Picture = ..\images\, ;
		Top = 33, ;
		Width = 83
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ButtonContainer.Container1.chkApplyFilter' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "\<Whole word", ;
		ControlSource = "thisform.oSearchEngine.oSearchOptions.lMatchWholeWord", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 3, ;
		Name = "chkApplyFilter", ;
		Picture = ..\images\, ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 77
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'ButtonContainer.Container2' AS container WITH ;
		BackStyle = 0, ;
		BorderColor = 255,0,0, ;
		BorderWidth = 2, ;
		Height = 25, ;
		Left = 190, ;
		Name = "Container2", ;
		Picture = ..\images\, ;
		Top = 33, ;
		Width = 81
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ButtonContainer.Container2.chkApplyFilter' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "Match \<Case", ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.lMatchCase", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 3, ;
		Name = "chkApplyFilter", ;
		Picture = ..\images\, ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 75
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'ButtonContainer.Container3' AS container WITH ;
		BackStyle = 0, ;
		BorderColor = 255,0,0, ;
		BorderWidth = 2, ;
		Height = 25, ;
		Left = 279, ;
		Name = "Container3", ;
		Picture = ..\images\, ;
		Top = 33, ;
		Width = 75
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ButtonContainer.Container3.chkApplyFilter' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "Co\<mments", ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.lSearchInComments", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 3, ;
		Name = "chkApplyFilter", ;
		Picture = ..\images\, ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 68
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'ButtonContainer.lblCodeView' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Mode:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 16, ;
		Left = 84, ;
		Name = "lblCodeView", ;
		TabIndex = 7, ;
		Top = 11, ;
		Width = 31, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ButtonContainer.lblSearchTime' AS label WITH ;
		Alignment = 1, ;
		Anchor = 8, ;
		BackStyle = 0, ;
		Caption = "9999 lines in 9999 files in 999.9 seconds", ;
		FontSize = 8, ;
		ForeColor = 128,128,128, ;
		Height = 46, ;
		Left = 436, ;
		Name = "lblSearchTime", ;
		TabIndex = 21, ;
		Top = 12, ;
		Width = 83, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'comboSearchExpressionHistory' AS gf_combosearchexpressionhistory WITH ;
		Anchor = 0, ;
		Height = 26, ;
		Left = 47, ;
		Name = "comboSearchExpressionHistory", ;
		nexpressionstostore = 50, ;
		Picture = ..\..\..\..\programs\9.0\commonapps\, ;
		TabIndex = 19, ;
		TabStop = .F., ;
		Top = 3, ;
		Width = 420
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="combobox" />

	ADD OBJECT 'comboSearchExpressionHistoryDropDownArrow' AS combobox WITH ;
		Anchor = 0, ;
		BorderColor = 255,255,255, ;
		BorderStyle = 0, ;
		Height = 26, ;
		Left = 446, ;
		Name = "comboSearchExpressionHistoryDropDownArrow", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\, ;
		TabIndex = 24, ;
		TabStop = .F., ;
		Top = 14, ;
		Width = 17
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'comboSearchScopeHistory' AS gf_combosearchscope WITH ;
		Anchor = 0, ;
		BoundTo = .T., ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.cRecentScope", ;
		Height = 25, ;
		Left = 70, ;
		Name = "comboSearchScopeHistory", ;
		nexpressionstostore = 40, ;
		Picture = ..\..\..\..\programs\9.0\commonapps\, ;
		SelectOnEntry = .T., ;
		TabIndex = 10, ;
		Top = 31, ;
		Width = 397
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="combobox" />

	ADD OBJECT 'containerLeft' AS container WITH ;
		Anchor = 5, ;
		BackColor = 255,255,255, ;
		Height = 537, ;
		Left = 2, ;
		Name = "containerLeft", ;
		Picture = ..\images\, ;
		TabIndex = 17, ;
		Top = 59, ;
		Width = 187
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerLeft.cntVersion' AS container WITH ;
		Anchor = 14, ;
		BorderWidth = 0, ;
		Height = 25, ;
		Left = -2, ;
		Name = "cntVersion", ;
		Picture = ..\images\, ;
		Top = 513, ;
		Width = 186
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerLeft.cntVersion.cmdVFPX' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "", ;
		Height = 22, ;
		Left = 165, ;
		Name = "cmdVFPX", ;
		Picture = ..\images\vfpxpoweredby_alternative.gif, ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 16, ;
		ToolTipText = "Go to VFPX home page", ;
		Top = 2, ;
		Width = 93
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerLeft.cntVersion.Gf_versionlabel1' AS gf_versionlabel WITH ;
		Alignment = 0, ;
		Anchor = 4, ;
		FontItalic = .T., ;
		FontName = "Arial", ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Height = 13, ;
		Left = 8, ;
		Name = "Gf_versionlabel1", ;
		TabIndex = 13, ;
		Top = 6, ;
		Width = 178
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="label" />

	ADD OBJECT 'containerLeft.oTreeView' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 513, ;
		Left = 0, ;
		Name = "oTreeView", ;
		Top = 0, ;
		Width = 186
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmhtXnVtoBAwAAAEACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACABAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAABwAAAAgkEHHiYXREbFqAMDwKDYoIUM0EggAAAA5EwAABTUAALE8wWoBAAYAIgAAABkAAAARAgAACgAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFALCm5wIGAAAAAAAAAAUAAIBw5xkAAQAAAFwAH97svQEABQC45xkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANEAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAAXAYAAABTdHlsZQAJAAAASQoAAAAGAAAADAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAA4AAABGdWxsUm93U2VsZWN0AAUAAABMAQAAAAoAAABTaW5nbGVTZWwABQAAAEw

	ADD OBJECT 'containerRight' AS container WITH ;
		Anchor = 15, ;
		Height = 537, ;
		Left = 199, ;
		Name = "containerRight", ;
		Picture = ..\images\, ;
		TabIndex = 20, ;
		Top = 57, ;
		Width = 800
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container1' AS container WITH ;
		Anchor = 10, ;
		Height = 357, ;
		Left = 0, ;
		Name = "Container1", ;
		Picture = ..\images\, ;
		TabIndex = 5, ;
		Top = 0, ;
		Width = 800
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container1.chkReplaceMode' AS checkbox WITH ;
		Alignment = 0, ;
		Caption = "\<Replace Mode", ;
		ControlSource = "Thisform.lReplaceMode", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 161, ;
		Name = "chkReplaceMode", ;
		Picture = ..\images\, ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 87
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'containerRight.Container1.cmdClassBrowser' AS commandbutton WITH ;
		Caption = "", ;
		Height = 20, ;
		Left = 90, ;
		Name = "cmdClassBrowser", ;
		Picture = ..\images\class.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Open Class Browser", ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 10
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.cmdEdit' AS commandbutton WITH ;
		Caption = "", ;
		Height = 19, ;
		Left = 34, ;
		Name = "cmdEdit", ;
		Picture = ..\images\method.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Edit (same as double-clicking the row in the grid)", ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 11
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.cmdGoToObject' AS commandbutton WITH ;
		Caption = "", ;
		Height = 20, ;
		Left = 62, ;
		Name = "cmdGoToObject", ;
		Picture = ..\images\obfind.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Modify this form or class and then select this object, if possible.", ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.cmdMenu' AS commandbutton WITH ;
		Caption = "", ;
		Height = 20, ;
		Left = 90, ;
		Name = "cmdMenu", ;
		Picture = ..\images\menu.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Display an outline of this menu, highlighting the prompt that matches the current line in the grid.", ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.cmdOpenExplorer' AS commandbutton WITH ;
		Caption = "", ;
		Height = 20, ;
		Left = 118, ;
		Name = "cmdOpenExplorer", ;
		Picture = ..\images\browsefolder.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Open Explorer window to this path.", ;
		Top = 5, ;
		Width = 22, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.cmdReport' AS commandbutton WITH ;
		Caption = "E\<xport", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 632, ;
		Name = "cmdReport", ;
		Picture = ('images\doc.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 8, ;
		ToolTipText = "Export to DBF, XLSX, a cursor, or your browser", ;
		Top = 4, ;
		Width = 58
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.cmdSearchErrors' AS commandbutton WITH ;
		Caption = "!", ;
		FontBold = .T., ;
		FontSize = 12, ;
		Height = 22, ;
		Left = 2, ;
		Name = "cmdSearchErrors", ;
		Picture = ..\images\yellow_exclamation_16.bmp, ;
		PicturePosition = 14, ;
		SpecialEffect = 2, ;
		ToolTipText = "Show search errors", ;
		Top = 4, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.Command1' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 253, ;
		Name = "Command1", ;
		Picture = ('images\refhelp.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 16, ;
		ToolTipText = "How Replace works", ;
		Top = 5, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.Container1' AS container WITH ;
		BackStyle = 0, ;
		BorderColor = 255,0,0, ;
		BorderWidth = 2, ;
		Height = 27, ;
		Left = 298, ;
		Name = "Container1", ;
		Picture = ..\images\, ;
		Top = 1, ;
		Width = 129
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container1.Container1.chkApplyFilter' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		Caption = "Apply", ;
		ControlSource = "Thisform.lApplyFilter", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 74, ;
		Name = "chkApplyFilter", ;
		Picture = ..\images\, ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 48
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'containerRight.Container1.Container1.cmdFilter' AS commandbutton WITH ;
		Caption = "\<Filter", ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 7, ;
		Name = "cmdFilter", ;
		Picture = ('images\filter.bmp'), ;
		PicturePosition = 1, ;
		SpecialEffect = 2, ;
		TabIndex = 6, ;
		Top = 4, ;
		Width = 53
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.Container2' AS container WITH ;
		BackStyle = 0, ;
		BorderColor = 255,0,0, ;
		BorderWidth = 2, ;
		Height = 27, ;
		Left = 437, ;
		Name = "Container2", ;
		Top = 1, ;
		Width = 186
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container1.Container2.Check1' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Comments Only", ;
		ControlSource = "Thisform.lcommentsonly", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 87, ;
		Name = "Check1", ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 93
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'containerRight.Container1.Container2.chkCodeOnly' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Code Only", ;
		ControlSource = "Thisform.lcodeonly", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 7, ;
		Name = "chkCodeOnly", ;
		TabIndex = 7, ;
		Top = 5, ;
		Width = 68
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText' AS container WITH ;
		Anchor = 10, ;
		BackColor = 199,226,254, ;
		BorderWidth = 1, ;
		Height = 84, ;
		Left = 0, ;
		Name = "containerReplaceText", ;
		Picture = ..\images\, ;
		Top = 28, ;
		Width = 800
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.cmdReplaceErrors' AS commandbutton WITH ;
		Caption = "!", ;
		FontBold = .T., ;
		FontSize = 12, ;
		Height = 28, ;
		Left = 491, ;
		Name = "cmdReplaceErrors", ;
		Picture = ..\images\errors.bmp, ;
		PicturePosition = 14, ;
		SpecialEffect = 2, ;
		ToolTipText = "Show search errors", ;
		Top = 1, ;
		Width = 88
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.cmdReplaceHistory' AS commandbutton WITH ;
		Caption = "View Replace History", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 363, ;
		Name = "cmdReplaceHistory", ;
		Picture = ..\images\, ;
		Top = 3, ;
		Visible = .T., ;
		Width = 116
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.optiongroupReplaceMode' AS optiongroup WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		ButtonCount = 3, ;
		ControlSource = "Thisform.nReplaceMode", ;
		Height = 27, ;
		Left = 24, ;
		Name = "optiongroupReplaceMode", ;
		Themes = .F., ;
		Top = 1, ;
		Value = 0, ;
		Width = 273, ;
		Option1.AutoSize = .F., ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "Replace \<Text", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "optionReplaceText", ;
		Option1.Picture = ..\images\, ;
		Option1.Style = 0, ;
		Option1.Themes = .F., ;
		Option1.Top = 5, ;
		Option1.Value = 0, ;
		Option1.Width = 83, ;
		Option2.AutoSize = .F., ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "Edit L\<ine", ;
		Option2.FontSize = 8, ;
		Option2.Height = 17, ;
		Option2.Left = 92, ;
		Option2.Name = "optionReplaceLine", ;
		Option2.Picture = ..\images\, ;
		Option2.Style = 0, ;
		Option2.Themes = .F., ;
		Option2.Top = 5, ;
		Option2.Width = 67, ;
		Option3.AutoSize = .F., ;
		Option3.BackStyle = 0, ;
		Option3.Caption = "Ad\<vanced Replace", ;
		Option3.FontSize = 8, ;
		Option3.Height = 17, ;
		Option3.Left = 158, ;
		Option3.Name = "optionAdvancedReplace", ;
		Option3.Picture = ..\images\, ;
		Option3.Style = 0, ;
		Option3.Themes = .F., ;
		Option3.Top = 5, ;
		Option3.Width = 110
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe' AS pageframe WITH ;
		Anchor = 10, ;
		ErasePage = .T., ;
		Height = 55, ;
		Left = 0, ;
		Name = "Pageframe", ;
		PageCount = 3, ;
		Tabs = .F., ;
		TabStyle = 1, ;
		Themes = .F., ;
		Top = 25, ;
		Width = 800, ;
		Page1.BackStyle = 0, ;
		Page1.Caption = "Replace Text", ;
		Page1.Name = "Page1", ;
		Page1.Picture = ..\images\, ;
		Page2.BackStyle = 0, ;
		Page2.Caption = "Edit Line", ;
		Page2.Name = "Page2", ;
		Page2.Picture = ..\images\, ;
		Page3.BackStyle = 0, ;
		Page3.Caption = "Advanced Search", ;
		Page3.Name = "Page3", ;
		Page3.Picture = ..\images\
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdCheckAll' AS commandbutton WITH ;
		Caption = "Check All", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 4, ;
		Name = "cmdCheckAll", ;
		Picture = ..\images\, ;
		Top = 28, ;
		Visible = .T., ;
		Width = 55
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdClearAll' AS commandbutton WITH ;
		Caption = "Clear All", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 68, ;
		Name = "cmdClearAll", ;
		Picture = ..\images\, ;
		Top = 28, ;
		Visible = .T., ;
		Width = 51
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdReplace' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "Replace checked", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 205, ;
		Name = "cmdReplace", ;
		Picture = ('images\GoFish16.bmp'), ;
		PicturePosition = 1, ;
		TabIndex = 3, ;
		Top = 28, ;
		Width = 113
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page1.editReplaceExpression' AS editbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.cReplaceExpression", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 205, ;
		Name = "editReplaceExpression", ;
		TabIndex = 2, ;
		Top = 3, ;
		Width = 590, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page1.Label1' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Replacement Text", ;
		FontBold = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 16, ;
		Left = 111, ;
		Name = "Label1", ;
		TabIndex = 7, ;
		Top = 7, ;
		Width = 88, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page2.cmdSaveLine' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "Replace line", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 205, ;
		Name = "cmdSaveLine", ;
		Picture = ('images\GoFish16.bmp'), ;
		PicturePosition = 1, ;
		Top = 28, ;
		Width = 113
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page2.editReplaceLine' AS editbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.cReplaceLine", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 205, ;
		Name = "editReplaceLine", ;
		TabIndex = 2, ;
		Top = 3, ;
		Width = 590, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page2.lblReplaceLine' AS label WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Edit Current Line", ;
		FontBold = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 16, ;
		Left = 116, ;
		Name = "lblReplaceLine", ;
		TabIndex = 7, ;
		Top = 8, ;
		Width = 81, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdBrowse' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "Select UDF", ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 80, ;
		Name = "cmdBrowse", ;
		Picture = ..\images\, ;
		Top = 4, ;
		Width = 65
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdCheckAll' AS commandbutton WITH ;
		Caption = "Check All", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 4, ;
		Name = "cmdCheckAll", ;
		Picture = ..\images\, ;
		Top = 28, ;
		Visible = .T., ;
		Width = 55
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdClearAll' AS commandbutton WITH ;
		Caption = "Clear All", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 68, ;
		Name = "cmdClearAll", ;
		Picture = ..\images\, ;
		Top = 28, ;
		Visible = .T., ;
		Width = 51
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdEdit' AS commandbutton WITH ;
		Caption = "Edit UDF", ;
		FontSize = 8, ;
		Height = 19, ;
		Left = 147, ;
		Name = "cmdEdit", ;
		Picture = ..\images\, ;
		Top = 4, ;
		Width = 54
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdReplace' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "Replace checked", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 205, ;
		Name = "cmdReplace", ;
		Picture = ('images\GoFish16.bmp'), ;
		PicturePosition = 1, ;
		TabIndex = 3, ;
		Top = 28, ;
		Width = 113
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container1.containerReplaceText.Pageframe.Page3.Text1' AS textbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.cReplaceUDFFilename", ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 205, ;
		Name = "Text1", ;
		Top = 2, ;
		Width = 590
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles' AS gf_grid WITH ;
		Anchor = 15, ;
		ColumnCount = 25, ;
		DeleteMark = .F., ;
		DragMode = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		GridLineColor = 192,192,192, ;
		Height = 276, ;
		HighlightForeColor = 0,0,0, ;
		HighlightStyle = 2, ;
		Left = 1, ;
		Name = "GridFiles", ;
		Panel = 1, ;
		RecordMark = .F., ;
		RowHeight = 17, ;
		TabIndex = 36, ;
		Tag = "", ;
		Top = 112, ;
		Width = 798, ;
		Column1.ColumnOrder = 3, ;
		Column1.ControlSource = "", ;
		Column1.FontName = "Arial", ;
		Column1.FontSize = 8, ;
		Column1.Movable = .F., ;
		Column1.Name = "Column17", ;
		Column1.ReadOnly = .F., ;
		Column1.Visible = .T., ;
		Column1.Width = 49, ;
		Column2.ColumnOrder = 4, ;
		Column2.FontName = "Arial", ;
		Column2.FontSize = 8, ;
		Column2.Movable = .F., ;
		Column2.Name = "Column3", ;
		Column2.ReadOnly = .F., ;
		Column2.Visible = .T., ;
		Column2.Width = 46, ;
		Column3.ColumnOrder = 5, ;
		Column3.FontName = "Arial", ;
		Column3.FontSize = 8, ;
		Column3.Movable = .F., ;
		Column3.Name = "Column4", ;
		Column3.ReadOnly = .F., ;
		Column3.Visible = .T., ;
		Column3.Width = 44, ;
		Column4.ColumnOrder = 2, ;
		Column4.FontName = "Arial", ;
		Column4.FontSize = 8, ;
		Column4.Movable = .F., ;
		Column4.Name = "Column18", ;
		Column4.ReadOnly = .F., ;
		Column4.Visible = .T., ;
		Column4.Width = 52, ;
		Column5.Alignment = 2, ;
		Column5.ColumnOrder = 1, ;
		Column5.CurrentControl = "Check1", ;
		Column5.FontName = "Arial", ;
		Column5.FontSize = 8, ;
		Column5.Name = "colProcess", ;
		Column5.ReadOnly = .F., ;
		Column5.Sparse = .F., ;
		Column5.Visible = .T., ;
		Column5.Width = 49, ;
		Column6.ColumnOrder = 6, ;
		Column6.FontName = "Arial", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Column7", ;
		Column6.ReadOnly = .F., ;
		Column6.Visible = .T., ;
		Column6.Width = 55, ;
		Column7.ColumnOrder = 7, ;
		Column7.FontName = "Arial", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Column8", ;
		Column7.ReadOnly = .F., ;
		Column7.Visible = .T., ;
		Column7.Width = 57, ;
		Column8.FontName = "Arial", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Column6", ;
		Column8.ReadOnly = .F., ;
		Column8.Visible = .T., ;
		Column8.Width = 58, ;
		Column9.FontName = "Arial", ;
		Column9.FontSize = 8, ;
		Column9.Name = "Column9", ;
		Column9.ReadOnly = .F., ;
		Column9.Visible = .T., ;
		Column9.Width = 49, ;
		Column10.FontName = "Arial", ;
		Column10.FontSize = 8, ;
		Column10.Name = "Column10", ;
		Column10.ReadOnly = .F., ;
		Column10.Visible = .T., ;
		Column10.Width = 50, ;
		Column11.ColumnOrder = 13, ;
		Column11.FontName = "Arial", ;
		Column11.FontSize = 8, ;
		Column11.Name = "Column11", ;
		Column11.ReadOnly = .F., ;
		Column11.Visible = .T., ;
		Column11.Width = 51, ;
		Column12.ColumnOrder = 12, ;
		Column12.FontName = "Arial", ;
		Column12.FontSize = 8, ;
		Column12.Name = "Column12", ;
		Column12.ReadOnly = .F., ;
		Column12.Visible = .T., ;
		Column12.Width = 50, ;
		Column13.ColumnOrder = 11, ;
		Column13.FontName = "Arial", ;
		Column13.FontSize = 8, ;
		Column13.Name = "Column16", ;
		Column13.ReadOnly = .F., ;
		Column13.Visible = .T., ;
		Column13.Width = 45, ;
		Column14.FontName = "Arial", ;
		Column14.FontSize = 8, ;
		Column14.Name = "Column2", ;
		Column14.Width = 54, ;
		Column15.FontName = "Arial", ;
		Column15.FontSize = 8, ;
		Column15.Name = "Column13", ;
		Column15.Width = 51, ;
		Column16.FontName = "Arial", ;
		Column16.FontSize = 8, ;
		Column16.Name = "Column14", ;
		Column16.Width = 41, ;
		Column17.FontName = "Arial", ;
		Column17.FontSize = 8, ;
		Column17.Name = "Column15", ;
		Column17.Width = 45, ;
		Column18.FontName = "Arial", ;
		Column18.FontSize = 8, ;
		Column18.Name = "Column1", ;
		Column18.Width = 49, ;
		Column19.FontName = "Arial", ;
		Column19.FontSize = 8, ;
		Column19.Name = "Column5", ;
		Column20.ColumnOrder = 20, ;
		Column20.CurrentControl = "Text1", ;
		Column20.FontName = "Arial", ;
		Column20.FontSize = 8, ;
		Column20.Name = "Column19", ;
		Column20.Sparse = .F., ;
		Column21.FontName = "Arial", ;
		Column21.FontSize = 8, ;
		Column21.Name = "Column20", ;
		Column22.FontName = "Arial", ;
		Column22.FontSize = 8, ;
		Column22.Name = "Column21", ;
		Column23.FontName = "Arial", ;
		Column23.FontSize = 8, ;
		Column23.Name = "Column22", ;
		Column24.FontName = "Arial", ;
		Column24.FontSize = 8, ;
		Column24.Name = "Column23", ;
		Column25.FontName = "Arial", ;
		Column25.FontSize = 8, ;
		Column25.Name = "Column25"
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="grid" />

	ADD OBJECT 'containerRight.Container1.GridFiles.colProcess.Check1' AS checkbox WITH ;
		Alignment = 2, ;
		Caption = "", ;
		Centered = .T., ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 25, ;
		Name = "Check1", ;
		Picture = ..\images\, ;
		ReadOnly = .F., ;
		Top = 101, ;
		Visible = .T., ;
		Width = 60
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.colProcess.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Process", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.colProcess.imageCheck' AS image WITH ;
		Height = 16, ;
		Left = 23, ;
		Name = "imageCheck", ;
		Picture = ..\images\check.bmp, ;
		Top = 89, ;
		Width = 50
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'containerRight.Container1.GridFiles.colProcess.Label1' AS label WITH ;
		Caption = "", ;
		Height = 17, ;
		Left = 22, ;
		Name = "Label1", ;
		Top = 68, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'containerRight.Container1.GridFiles.colProcess.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column10.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column10.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column11.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column11.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column12.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column12.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column13.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column13.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column14.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column14.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column15.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column15.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column16.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column16.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column17.Header1' AS header WITH ;
		Alignment = 2, ;
		BackColor = 128,128,128, ;
		Caption = "Header1", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 255,255,255, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column17.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		SelectedBackColor = 255,255,0, ;
		SelectedForeColor = 0,0,0, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column18.Header1' AS header WITH ;
		Alignment = 2, ;
		BackColor = 128,128,128, ;
		Caption = "Header1", ;
		FontSize = 8, ;
		ForeColor = 255,255,255, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column18.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		SelectedBackColor = 255,255,0, ;
		SelectedForeColor = 0,0,0, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column19.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column19.Text1' AS textbox WITH ;
		Alignment = 3, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column2.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column20.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column20.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column21.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column21.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column22.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column22.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column23.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column23.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column25.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column25.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column3.Header1' AS header WITH ;
		Alignment = 2, ;
		BackColor = 128,128,128, ;
		Caption = "Header1", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 255,255,255, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column3.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Arial", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		SelectedBackColor = 255,255,0, ;
		SelectedForeColor = 0,0,0, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column4.Header1' AS header WITH ;
		Alignment = 2, ;
		BackColor = 128,128,128, ;
		Caption = "Header1", ;
		FontSize = 8, ;
		ForeColor = 255,255,255, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column4.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		SelectedBackColor = 255,255,0, ;
		SelectedForeColor = 0,0,0, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column5.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column5.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column6.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column6.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column7.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column7.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column8.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column8.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column9.Header1' AS header WITH ;
		Caption = "Header1", ;
		FontSize = 8, ;
		Name = "Header1", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'containerRight.Container1.GridFiles.Column9.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .F., ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'containerRight.Container1.lblResults' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "0 Instances found", ;
		FontSize = 8, ;
		ForeColor = 128,128,128, ;
		Height = 16, ;
		Left = 697, ;
		Name = "lblResults", ;
		TabIndex = 24, ;
		Top = 8, ;
		Width = 89
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'containerRight.Container2' AS container WITH ;
		Anchor = 15, ;
		Height = 169, ;
		Left = 1, ;
		Name = "Container2", ;
		Picture = ..\images\, ;
		TabIndex = 6, ;
		Top = 367, ;
		Width = 798
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container2.containerWebControl' AS gf_webcontrol WITH ;
		Anchor = 15, ;
		BorderWidth = 0, ;
		Height = 168, ;
		Name = "containerWebControl", ;
		Picture = ..\images\, ;
		Top = 1, ;
		Width = 799, ;
		obrowser.Height = 144, ;
		obrowser.Left = 1, ;
		obrowser.Name = "obrowser", ;
		obrowser.Top = 23, ;
		obrowser.Width = 794, ;
		obrowser.ZOrderSet = 2, ;
		cmdZoomIn.Anchor = 0, ;
		cmdZoomIn.Caption = "", ;
		cmdZoomIn.Left = 196, ;
		cmdZoomIn.Name = "cmdZoomIn", ;
		cmdZoomIn.Picture = ..\images\gf_large_letter.bmp, ;
		cmdZoomIn.SpecialEffect = 2, ;
		cmdZoomIn.ToolTipText = "Zoom in on HTML Code View", ;
		cmdZoomIn.Top = 1, ;
		cmdZoomIn.ZOrderSet = 3, ;
		cmdZoomOut.Anchor = 0, ;
		cmdZoomOut.Caption = "", ;
		cmdZoomOut.Left = 224, ;
		cmdZoomOut.Name = "cmdZoomOut", ;
		cmdZoomOut.Picture = ..\images\gf_small_letter.bmp, ;
		cmdZoomOut.SpecialEffect = 2, ;
		cmdZoomOut.ToolTipText = "Zoom out from HTML Code View", ;
		cmdZoomOut.Top = -1, ;
		cmdZoomOut.ZOrderSet = 4
		*< END OBJECT: ClassLib="gofishwebtools.vcx" BaseClass="container" />

	ADD OBJECT 'containerRight.Container2.containerWebControl.ButtonContainer' AS container WITH ;
		Anchor = 10, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 23, ;
		Left = 316, ;
		Name = "ButtonContainer", ;
		Picture = ..\images\, ;
		Top = 0, ;
		Width = 478
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'containerRight.Container2.containerWebControl.ButtonContainer.lblFilePath' AS label WITH ;
		Anchor = 11, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Filename and path here...", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 5, ;
		Name = "lblFilePath", ;
		TabIndex = 24, ;
		Top = 4, ;
		Width = 123, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'containerRight.Container2.containerWebControl.cmdCompressCodeview' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "", ;
		Height = 20, ;
		Left = 280, ;
		Name = "cmdCompressCodeview", ;
		Picture = ..\images\gf_dnarrow.bmp, ;
		SpecialEffect = 2, ;
		Top = 1, ;
		Width = 24, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container2.containerWebControl.cmdMaximizeCodeView' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "", ;
		Height = 20, ;
		Left = 252, ;
		Name = "cmdMaximizeCodeView", ;
		Picture = ..\images\zoom-in-2-16.bmp, ;
		SpecialEffect = 2, ;
		Top = 1, ;
		Width = 24, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'containerRight.Container2.containerWebControl.comboViewPosition' AS combobox WITH ;
		Anchor = 0, ;
		ControlSource = "Thisform.nCodeWindowPosition", ;
		FontSize = 8, ;
		Left = 108, ;
		Name = "comboViewPosition", ;
		Picture = ..\..\..\..\programs\9.0\commonapps\, ;
		Style = 2, ;
		TabIndex = 24, ;
		TabStop = .F., ;
		Top = -1, ;
		Width = 80, ;
		ZOrderSet = 8
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'containerRight.Container2.containerWebControl.lblCodeView' AS label WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Code View Position:", ;
		FontBold = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 16, ;
		Left = 8, ;
		Name = "lblCodeView", ;
		TabIndex = 7, ;
		Top = 4, ;
		Width = 99, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'containerRight.Splitter1' AS sfsplitterv WITH ;
		Anchor = 10, ;
		BackColor = 210,210,210, ;
		cobject1name = Container1, ;
		cobject2name = Container2, ;
		Height = 10, ;
		Left = 0, ;
		Name = "Splitter1", ;
		nobject2minsize = 25, ;
		Picture = ..\images\, ;
		TabIndex = 14, ;
		Top = 357, ;
		Width = 800, ;
		GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.Name = "GRIPPER"
		*< END OBJECT: ClassLib="sfsplitter.vcx" BaseClass="control" />

	ADD OBJECT 'containerRight.splitter3' AS sfsplitterh WITH ;
		Anchor = 5, ;
		BackColor = 210,210,210, ;
		cobject1name = Container1, ;
		cobject2name = Container2, ;
		Height = 537, ;
		Left = 587, ;
		Name = "splitter3", ;
		Picture = ..\images\, ;
		TabIndex = 22, ;
		Top = 41, ;
		Visible = .F., ;
		Width = 10, ;
		GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.Name = "GRIPPER"
		*< END OBJECT: ClassLib="sfsplitter.vcx" BaseClass="control" />

	ADD OBJECT 'editSearch' AS editbox WITH ;
		Anchor = 0, ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.cSearchExpression", ;
		Height = 26, ;
		Left = 47, ;
		Name = "editSearch", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 3, ;
		Width = 400
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'imgScopeIcon' AS image WITH ;
		Height = 16, ;
		Left = 49, ;
		Name = "imgScopeIcon", ;
		Picture = ..\images\, ;
		Top = 36, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblScope' AS label WITH ;
		BackColor = 0,128,0, ;
		BackStyle = 0, ;
		Caption = "Scope:", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 13, ;
		Left = 6, ;
		Name = "lblScope", ;
		TabIndex = 18, ;
		Top = 35, ;
		Width = 35
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSearch' AS label WITH ;
		BackColor = 0,128,0, ;
		BackStyle = 0, ;
		Caption = "\<Search:", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 13, ;
		Left = 5, ;
		Name = "lblSearch", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 37
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ProgressBar' AS gf_progressbar WITH ;
		Left = 235, ;
		Name = "ProgressBar", ;
		Picture = ..\images\, ;
		TabIndex = 23, ;
		Top = 307, ;
		Image1.Name = "Image1", ;
		Image1.Picture = ..\images\progressbarbackground.bmp, ;
		Box.Name = "Box", ;
		Box.Picture = ..\images\, ;
		bar.Image1.Name = "Image1", ;
		bar.Image1.Picture = ..\images\progressbar.bmp, ;
		bar.Name = "bar", ;
		bar.Picture = ..\images\, ;
		Label1.Name = "Label1", ;
		Label2.Name = "Label2"
		*< END OBJECT: ClassLib="gofishui.vcx" BaseClass="container" />

	ADD OBJECT 'splitter2' AS sfsplitterh WITH ;
		Anchor = 5, ;
		BackColor = 210,210,210, ;
		cobject1name = containerLeft, ;
		cobject2name = containerRight, ;
		Height = 537, ;
		Left = 189, ;
		Name = "splitter2", ;
		Picture = ..\images\, ;
		TabIndex = 22, ;
		Top = 58, ;
		Width = 10, ;
		GRIPPER.GRIPPERDOT1.Name = "GRIPPERDOT1", ;
		GRIPPER.GRIPPERDOT1.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT1.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT1.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT2.Name = "GRIPPERDOT2", ;
		GRIPPER.GRIPPERDOT2.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT2.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT2.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT3.Name = "GRIPPERDOT3", ;
		GRIPPER.GRIPPERDOT3.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT3.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT3.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT4.Name = "GRIPPERDOT4", ;
		GRIPPER.GRIPPERDOT4.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT4.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT4.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.GRIPPERDOT5.Name = "GRIPPERDOT5", ;
		GRIPPER.GRIPPERDOT5.SHAPEDARK.Name = "SHAPEDARK", ;
		GRIPPER.GRIPPERDOT5.SHAPELIGHT.Name = "SHAPELIGHT", ;
		GRIPPER.GRIPPERDOT5.SHAPEMIDDLE.Name = "SHAPEMIDDLE", ;
		GRIPPER.Name = "GRIPPER"
		*< END OBJECT: ClassLib="sfsplitter.vcx" BaseClass="control" />

	ADD OBJECT 'timerShowAdvancedForm' AS timer WITH ;
		Height = 25, ;
		Left = 90, ;
		Name = "timerShowAdvancedForm", ;
		Top = 562, ;
		Width = 25
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Activate
		Local lcApp, lcProc, lcScope, lcProcedures
		
		*!* ******************** Removed 05/12/2016 *****************
		*!* *-- This code was added 2012-08-30 to allow GF to work properly with 'IntellisenseX by Dot' from Thor
		*!* This.cOnKeyLabelDot = On('Key', '.')
		*!* On Key Label .
		
		Thisform.lAutoYield = _VFP.AutoYield
		_VFP.AutoYield = .T.
		
		lcApp = ''
		
		Try
			lcApp = _Screen._GoFishClassic.cAppPath + _Screen._GoFishClassic.cAppName
		Catch
			MessageBox('Error: Cannot find _Screen._GoFishClassic object.', 0, 'GoFish error:')
		Endtry
		
		*-- Need to restore these Procedure files in case the user clears them out outside of this form.
		If !Empty(lcApp)
			lcProcedures = Upper(Set('Procedure'))
			lcProc = 'GoFishSearchEngine'
			If !(Upper(lcProc) $ lcProcedures)
				Try
					Set Procedure To &lcProc Additive
				Catch
					MessageBox('Cannot restore procedure file ' + lcProc , 0, 'GoFish error:')
				EndTry
			Endif
			
			lcProc = 'GF_PEME_BaseTools'
			If !(Upper(lcProc) $ lcProcedures)
				Try
					Set Procedure To &lcProc Additive
				Catch
					MessageBox('Cannot restore procedure file ' + lcProc, 0, 'GoFish error:')
				EndTry
			Endif
		Endif
		
		ThisForm.UpdateSearchScopeVariables()
		
		lcScope = Thisform.GetCurrentScope()
		
		With Thisform.comboSearchScopeHistory
			.LoadRows()
			.SaveSearchScope(lcScope)
			.Value = Lower(lcScope)
		Endwith
		
		Set Talk Off && Just in case user has turn this on somehow or accidentally
		Set Echo Off
		Set Exact On
		Set Deleted On
		
		Set Safety Off
		
		Thisform.comboSearchExpressionHistory.Requery()
		
		
		*--- Update UDF info on Advanced Replace stuff ------------------
		If !Empty(Thisform.cReplaceUDFFilename) and File(Thisform.cReplaceUDFFilename)
			Thisform.oSearchEngine.cReplaceUDFCode = FileToStr(Thisform.cReplaceUDFFilename)
		Else
			Thisform.cReplaceUDFFilename = ''
			Thisform.oSearchEngine.cReplaceUDFCode = ''
		Endif
		
		If Thisform.nReplaceMode = 3 && Update the Replace lines, in case the UDF has been modified.
			Thisform.DoReplace(.t.)
		Endif
		
		
		Thisform.Refresh()
		
		 
		  
	ENDPROC

	PROCEDURE addclassestotreeview
		Lparameters toVcxNode, tcClassLib
		
		Local lcAlias, lcClass, lcClassLibFilter, lcFileName, lcFilter, lcWhere, lnSelect, loClassLibsNode
		Local loException
		
		lnSelect = Select()
		lcAlias	 = Thisform.cSearchResultsAlias
		
		lcClassLibFilter = 'filepath = [' + Alltrim(m.tcClassLib) + ']'
		
		lcFilter = Alltrim(Filter(m.lcAlias))
		lcWhere	 = 'Where ' + m.lcFilter + Iif(Not Empty(m.lcFilter), ' and ', '') + m.lcClassLibFilter
		Select FileName, Class, Id From (m.lcAlias) &lcWhere Order By Class, ID Into Cursor 'Classes'
		
		Scan For Not Empty(Class)
			lcFileName = Alltrim(FileName)
			lcClass	   = Alltrim(Class)
			Try
				loClassLibsNode = Thisform.oTree.Nodes.Add(m.toVcxNode.Key, 4, 'Class_' + Alltrim(Str(Id)), m.lcClass, ,)
			Catch To m.loException
			Endtry
			Locate For Alltrim(FileName) + Alltrim(Class) # m.lcFileName + m.lcClass Rest
		
			If Not Eof()
				Skip - 1
			Endif
		
		Endscan
		
		Select (m.lnSelect)
		
		
		
	ENDPROC

	PROCEDURE adjustformforreplacepanel
		Lparameters tlShow
		
		Local loGrid, loGridPanel, loReplacePanel
		
		loGridPanel = Thisform.containerRight.container1
		loGrid = Thisform.containerRight.container1.gridFiles
		loReplacePanel = loGridPanel.containerReplaceText
		
		If Empty(Thisform.oSearchEngine.oSearchOptions.cReplaceExpression)
			Thisform.oSearchEngine.oSearchOptions.cReplaceExpression = Thisform.oSearchEngine.oSearchOptions.cSearchExpression
		Endif
		
		With loGrid
			.Anchor = 0
			
			If Thisform.lReplaceMode = .t.
				.top = loReplacePanel.Top + loReplacePanel.Height
			Else
				.top = loReplacePanel.Top
			Endif
			
			.Height = loGrid.Parent.Height - .Top - 1
			
			.Anchor = 15
		Endwith   
		
		Thisform.Refresh()  
	ENDPROC

	PROCEDURE applyfilter
		Local lcFilter, lcSelectCode
		
		If This.lApplyFilter
			lcFilter = Evl(Thisform.cFilter, '')
		Else
			lcFilter = ''
		Endif
		
		*!*	lcSelectCode = [(InList(Upper(MatchType), 'CODE', '<CONSTANT>', '<COMMAND>', '<PROCEDURE>', '<SKIPFOR>') or (Upper(MatchType) = '<EXPR>' and InList(Upper(class), 'TEXT', 'FIELD')) )]
		*!*	Do Case
		*!*		Case Thisform.lCodeOnly = .F.
		
		*!*		Case Empty(m.lcFilter)
		*!*			lcFilter = m.lcSelectCode 
		*!*		Otherwise
		*!*			lcFilter = m.lcSelectCode + [ and ] + m.lcFilter
		*!*	Endcase
		
		Do Case
			Case Thisform.lCodeOnly
				lcMatchTypes = ['CODE', '<CONSTANT>', '<COMMAND>', '<PROCEDURE>', '<SKIPFOR>', '<METHOD>', '<FUNCTION>']
				lcSelectCode = [(InList(Upper(MatchType), ] + m.lcMatchTypes + [) or (Upper(MatchType) = '<EXPR>' and Upper(class) = 'FIELD'))]
				lcFilter	 = m.lcSelectCode + Iif(Empty(m.lcFilter), '', [ and ] + m.lcFilter)
		
			Case Thisform.lCommentsOnly
				lcSelectCode = [(Upper(MatchType) = '<COMMENT>')]
				lcFilter	 = m.lcSelectCode + Iif(Empty(m.lcFilter), '', [ and ] + m.lcFilter)
		
		Endcase
		
		Set Filter To &lcFilter In (Thisform.cSearchResultsAlias)
		
		Goto Top In (Thisform.cSearchResultsAlias)
		
		Return m.lcFilter
		
	ENDPROC

	PROCEDURE buildsearchhistorycursor
		Local laDirs[1], laInfo[1], lcDir, lcInfoFile, lcName, lcRoot, lnAlen
		
		lnSelect = Select()
		
		lcName = Thisform.cSavedSearchResultsFolder
		*SF 20221018 -> local storage
		*lcRoot = Home(7) + lcName
		lcRoot = This.cCR_StoreLocal + lcName
		*/SF 20221018 -> local storage
		
		ADir(laDirs, Addbs(lcRoot) + "*",'D',1)
		
		If Type('laDirs') $ "UL"
			Return 0
		EndIf
		
		lnAlen = Alen(laDirs) / 5
		
		*-- Create cursor to hold the results
		Select Space(24) as DateTime, ;
		 		Space(40) as Search_Expression, ;
				Space(10) as Results, ;
				Space(150) as Scope, ;
				Space(255) as SearchHistoryFolder ;
				From (Thisform.oSearchEngine.cSearchResultsAlias) ;
				Where 0 = 1 ;
				Into Cursor gf_SearchHistory ReadWrite
		
		Index on DateTime DESCENDING Tag nnn
		
		For x = 1 to lnAlen
			lcDir = laDirs[x,1]
			lcInfoFile = Addbs(lcRoot) + Addbs(lcDir) + lcName + ".txt"
			If File(lcInfoFile)
				ALines(laInfo, FileToStr(lcInfoFile))
				
				Append Blank
				Replace DateTime with laInfo[1]
				Replace Search_Expression with laInfo[2]
				Replace Scope with laInfo[3]
				Replace Results with laInfo[4]
				Replace SearchHistoryFolder with Addbs(lcRoot) + Addbs(lcDir)
			Endif
		
		EndFor
		
		Select(lnSelect)
		
		Return Reccount('gf_SearchHistory') 
		
		
	ENDPROC

	PROCEDURE checkall
		Thisform.FilterGFSE()
		
		*-- Update local cursor
		Replace process with .t. All in (Thisform.cSearchResultsAlias) ;
		 For replacerisk <= Thisform.nReplaceRisk and ;
				 replaced = .f. 
		
		*-- Update GFSE cursor
		Replace process with .t. All in (Thisform.oSearchEngine.cSearchResultsAlias) ;
		 For replacerisk <= Thisform.nReplaceRisk and ;
				 replaced = .f. 
		 
		Thisform.DoReplace(.t.)  &&.t. means "Preview" Replace
		
		
	ENDPROC

	PROCEDURE clearall
		Thisform.FilterGFSE()
		
		Replace process with .f. all in (Thisform.cSearchResultsAlias)
		Replace replaceline with '' for replaced = .f. in (Thisform.cSearchResultsAlias)
		Replace trimmedreplaceline with '' for replaced = .f. in (Thisform.cSearchResultsAlias)
		
		Replace process with .f. all in (Thisform.oSearchEngine.cSearchResultsAlias)
		Replace replaceline with '' for replaced = .f. in (Thisform.oSearchEngine.cSearchResultsAlias)
		Replace trimmedreplaceline with '' for replaced = .f. in (Thisform.oSearchEngine.cSearchResultsAlias)
		
		Thisform.ClearGFSEFilter()
		Goto top in (Thisform.cSearchResultsAlias)
		Thisform.oGrid.SetFocus()
		
		
	ENDPROC

	PROCEDURE cleargfsefilter
		Set Filter To in (This.oSearchEngine.cSearchResultsAlias)
	ENDPROC

	PROCEDURE clearsearchresultscursor
		Local lcSafety, lnSelect
		
		lnSelect = Select()
		
		Select (This.cSearchResultsAlias)
		
		If Used(This.cSearchResultsAlias)
			lcSafety = Set('Safety')
			Set Safety Off
			Zap in (This.cSearchResultsAlias)
			Set Safety &lcSafety
		Else
			MessageBox('Error clearing search results cursor for new search.', 0, 'Error:')
			Select (lnSelect)
			Return .f.
		EndIf
		
		Select (lnSelect)
		   
	ENDPROC

	PROCEDURE cleartreeview
		*Thisform.oTree.visible = .f.
		Thisform.LockWindow(.t.)
		Thisform.oTree.Nodes.Clear()
		Thisform.LockWindow(.f.)
		*Thisform.oTree.visible = .t.
		
	ENDPROC

	PROCEDURE clicktreeviewnode
		Lparameters loNode
		
		Local lcAlias, lcFileType, lcFilter, lcNewFilter, lcNormalFilter, lnID, lnSelect, loTree
		loTree = This.oTree
		
		lnSelect = Select()
		lcAlias	 = Thisform.cSearchResultsAlias
		lcFilter = ''
		
		*-- Build Filter clause for selected loNode----------------------------
		Do Case
			Case m.loNode.Index = 1 && Master top loNode
				lcFilter = ''
		
			Case m.loNode.Parent.Index = 1 && One of the Main Root Nodes
				lcFileType = Upper(Getwordnum(m.loNode.Key, 2, '_'))
				Do Case
					Case m.lcFileType $ ' SCX VCX PRG FRX DBF PJX'
						lcFilter = 'Upper(Filetype) = [' + m.lcFileType + ']'
					Case Upper(m.lcFileType) = 'CLASSES'
						lcFilter = 'not Empty(class) and (Upper(Filetype) $ [ VCX PRG ])'
					Otherwise
						lcFilter = '!(Upper(Filetype) $ [ SCX VCX PRG FRX DBF PJX ])'
				Endcase
		
			Otherwise
				lnID = Val(Getwordnum(m.loNode.Key, 2, '_'))
		
				If Thisform.NavigateToMasterRecord(m.lnID)
					lcFilter = 'filepath = [' + Alltrim(FilePath) + ']'
				Endif
		Endcase
		
		If 'CLASS_' $ Upper(m.loNode.Key)
			lcFilter = Iif(Empty(m.lcFilter), '', m.lcFilter + ' and ') + 'class = [' + Alltrim(Class) + ']'
		Endif
		
		Thisform.cTreeViewFilter = lcFilter
		
		*--- Merge Main form filter and TreeView filter
		lcNormalFilter = This.ApplyFilter()
		Do Case
			Case Empty(m.lcFilter)
				lcNewFilter = m.lcNormalFilter
			Case Empty(m.lcNormalFilter)
				lcNewFilter = m.lcFilter
			Otherwise
				lcNewFilter = m.lcNormalFilter + ' and ' + m.lcFilter
		Endcase
		
		Set Filter To &lcNewFilter In (Thisform.cSearchResultsAlias)
		
		Goto Top In (Thisform.cSearchResultsAlias)
		
		loTree				= This.oTree
		loTree.SelectedItem	= m.loNode
		
		Select(m.lcAlias)
		Set Filter To &lcNewFilter
		Goto Top
		
		Thisform.oGrid.SetFocus
		m.loTree.SetFocus()
		*Thisform.Refresh()
		
		Select(m.lcAlias)
		
		
	ENDPROC

	PROCEDURE combinefilters
		Lparameters lcFilter1, lcFilter2
		
		Return m.lcFilter1 + Iif(Empty(m.lcFilter1) Or Empty(m.lcFilter2), '', ' and ') + m.lcFilter2
	ENDPROC

	PROCEDURE confirmreplace
		Local lcBackupOption, llBackup, lnResponse
		
		If Thisform.oSearchEngine.oSearchOptions.lDoNotShowReplaceWarning
			Return .T.
		Endif
		
		llBackup = Thisform.oSearchEngine.oSearchOptions.lBackup
		
		lcBackupOption = 'Backup option: ' + Iif(llBackup, '[Enabled]', '[*** DISABLED ***]')
		
		lnResponse = Messagebox('=============================================' + CR + ;
			  '             W  A  R  N  I  N  G	'											+ CR + ;
			  '============================================='	+ CR + CR + ;
			  'Are you SURE you are ready to Replace?' + CR + CR + ;
			  lcBackupOption + CR + CR + ;
			  'These changes cannot be reversed!!', 3 + 32, 'GoFish Replace')
		
		If lnResponse <> 6
			Return .F.
		Endif
		
		
		
	ENDPROC

	PROCEDURE Deactivate
		Local lcDot
		
		_VFP.AutoYield = Thisform.lAutoYield
		
		*!* ******************** Removed 05/12/2016 *****************
		*!* *-- This code was added 2012-08-30 to allow GF to work properly with 'IntellisenseX by Dot' from ThorLocal lcDot
		*!* lcDot = This.cOnKeyLabelDot
		*!* On Key Label . &lcDot
		
	ENDPROC

	PROCEDURE Destroy
		Local lcFolder, lcSearchEngineOptionsFile
		
		DoDefault()
		
		If thisform.dLastJanitorRunDate # Date()
			Thisform.RunJanitor()
			thisform.dLastJanitorRunDate = Date()
		EndIf 
		
		*!* ******** JRN Removed 2023-10-13 ********
		*!* *-- Restore nSearchScope to original value if the Scope combo was used to make temporary selection ---------
		*!* If This.oSearchEngine.oSearchOptions.nSearchScope = 5
		*!* 	This.oSearchEngine.oSearchOptions.nSearchScope = Evl(thisform.nOriginalSearchScope, 3)
		*!* EndIf
		
		If thisform.lReplaceMode
			thisform.lReplaceMode = .F. && this removes the extra columns possibly visible from replace mode
		EndIf 
		
		If Thisform.lSaveSettings
			*-- Save UI form settings XML file
			*	Wait 'Save GF form settings' Window at 20, 30 Nowait
			This.SaveFormSettings()
			*-- Save Search Engine settings
			*	Wait 'Save GF search engine settings' Window at 20, 30 Nowait
		*SF 20221018 -> local storage
		*	lcSearchEngineOptionsFile = Home(7) + This.cSearchOptionsXMLFile
			lcSearchEngineOptionsFile = This.cCR_StoreLocal + This.cSearchOptionsXMLFile
		*/SF 20221018 -> local storage
			This.oSearchEngine.SaveOptions(lcSearchEngineOptionsFile)
		Endif
		
		This.oSearchOptions = .null.
		This.oSearchEngine = .Null.
		This.oGrid = .Null.
		This.oBrowser = .null.
		This.oTree = .null.
		This.oWebControl = .null.
		this.oFilter = .null.
		
		Release _Screen._GoFishClassic
		_Screen._GoFishClassic = .null.
		
		Wait Clear
	ENDPROC

	PROCEDURE doreplace
		Lparameters tlPreviewReplace, tnCount && .t. means do a "Preview" Replace
		
		Local lnCurrentId
		
		If !tlPreviewReplace && If not doing a Preview, then we are doing a replace and will do some extra validation
			If !ThisForm.ValidateReplaceExpression() or !ThisForm.ConfirmReplace()
				Return .f.
			EndIf
			Thisform.oSearchEngine.oProgressBar = ThisForm.ProgressBar 
			ThisForm.ProgressBar.Start(tnCount, 'Replacing in selected lines...')
		Else 
			Thisform.oSearchEngine.oProgressBar = null
		Endif
		
		lnCurrentId = Evaluate(Thisform.cSearchResultsAlias + '.id')
		
		*Thisform.UpdateSearchEngineCursor()&& Copy over the Process settings from local cursor to GFSE cursor
		Thisform.oSearchEngine.oSearchOptions.lAllowBlankReplace = .t.
		Thisform.oSearchEngine.oSearchOptions.lPreviewReplace = tlPreviewReplace
		
		Thisform.FilterGFSE()
		
		Thisform.oSearchEngine.ReplaceMarkedRows(Thisform.oSearchEngine.cSearchResultsAlias)
		
		If !tlPreviewReplace && If not doing a Preview, then we are doing a replace and will do some extra validation
			ThisForm.ProgressBar.Stop()
		Endif
		
		If Thisform.oSearchEngine.oReplaceErrors.Count > 0 and !tlPreviewReplace
			Thisform.containerRight.Container1.containerReplaceText.cmdReplaceErrors.Refresh() && To make sure the icon is visible before we show dialog box
			MessageBox('Error(s) during replace operation. Click on red Error icon for more details.', 'Error:')
		Endif
		
		ThisForm.ClearGFSEFilter()
		
		Thisform.UpdateFormAfteReplace(lnCurrentId) 
		
		
		
		
	ENDPROC

	PROCEDURE dosearch
		Lparameters tlDoNotSearch
		
		Local lcMessage, lcScope, lcSearchExpression, lcSetEscape
		Local loSearchEngine as 'GoFishSearchEngine'
		Local loSearchOptions as 'GoFishSearchOptions'
		
		loSearchEngine = Thisform.oSearchEngine
		loSearchOptions = Thisform.oSearchEngine.oSearchOptions
		
		Thisform.lApplyFilter = .f.
		
		This.lMaximizeCodeView = .F.
		
		This.lInit = .t.
		Thisform.oSearchEngine.oSearchOptions.cReplaceExpression = ''
		
		If !tlDoNotSearch and !This.ValidateInputs()
			Thisform.lSearching = .f.
			Thisform.comboSearchScopeHistory.SetFocus()
			Thisform.Refresh()
			Return .f.
		EndIf
		
		If loSearchOptions.lMatchWholeWord and Thisform.lWarnWholeWord =.t.
			lnResponse = MessageBox('Use Whole Word search?', 3, 'Whole Word option...')
			If lnResponse = 2
				Return .f.
			EndIf
			If lnResponse = 7 && NO
				loSearchOptions.lMatchWholeWord = .f.
			Endif
		Endif
		
		lcSetEscape = Set('Escape')	
		Set Escape Off
		
		*!* ******************** Removed 11/10/2015 *****************
		*!* Set Typeahead To 1
		*!* Clear Typeahead
		*!* KEYBOARD '{spacebar}'
		
		Thisform.lSearching = .T.
		Thisform.nCurrentId = 0
		Thisform.cTreeViewFilter = ''
		
		If Thisform.lReplaceMode = .t.
			Thisform.lReplaceMode = .f.
		Endif
		
		Thisform.ClearTreeview()
		
		*-- This is required because I had problems getting the checkboxes to be usable after the cursor is zapped
		*-- and then re-populated. This value will be restored after the search.
		Thisform.oGrid.Setfocus()
		Thisform.oGrid.colProcess.DynamicCurrentControl = ''
		
		Thisform.ClearSearchResultsCursor() && Go ahead and blank out the cursor so the grid will be empty during the search
		
		If !tlDoNotSearch
		
			Thisform.Refresh()
		
			*-- Save Search Expression ---------------------------------------------------
			lcSearchExpression = Thisform.oSearchEngine.oSearchOptions.cSearchExpression
			Thisform.comboSearchExpressionHistory.SaveSearchExpression(lcSearchExpression) 
		
			*-- Save Search Scope ---------------------------------------------------
			lcScope = Alltrim(Lower(Thisform.comboSearchScopeHistory.text))
		
			lcMessage = 'Searching...'
		*SF 20221016 added colour options
		*	Thisform.PopulateTreeview(lcMessage , 32768)
			Thisform.PopulateTreeview(lcMessage , Thisform.nTreeSearchColour)
		*/ SF 20221016 added colour options
			Thisform.ShowHtml('<h3>&nbsp;&nbsp;&nbsp;' + lcMessage + '</h3>')
		
			loSearchEngine.oProgressBar = ThisForm.ProgressBar 
			loSearchEngine.PrepareForSearch() && Blank out settings from last search so I can refresh the UI with blank value
		
			If '.PJX' $ Upper(lcScope)
				lnReturn = loSearchEngine.SearchInProject(lcScope)
			Else
				*loSearchOptions.lIncludeSubDirectories = Thisform.chkSubdirectories.Value
				lnReturn = loSearchEngine.SearchInPath(lcScope) 
			EndIf
		
			If lnReturn <= 0 and Thisform.oSearchEngine.oSearchErrors.count > 0
				MessageBox(Thisform.oSearchEngine.oSearchErrors[Thisform.oSearchEngine.oSearchErrors.count], 16, 'GoFish - Search error:')
			Endif
		
			Set Escape &lcSetEscape
		
			Thisform.oSearchEngine.oSearchOptions.cReplaceExpression = lcSearchExpression 
		
			Thisform.comboSearchScopeHistory.SaveSearchScope(lcScope)
		Else
			loSearchEngine.nMatchLines = Reccount(loSearchEngine.cSearchResultsAlias)
		EndIf
		
		Thisform.UpdateFormAfterSearch()
		
		If !tlDoNotSearch and Thisform.lSaveSearchResults
			Thisform.SaveSearchResults()
		Endif
		
		
	ENDPROC

	PROCEDURE editfile
		Thisform.oSearchEngine.EditFromCurrentRow(thisform.cSearchResultsAlias,,Thisform.lMoveNewCodeToTopLeft)
	ENDPROC

	PROCEDURE editmenufromcurrentrow
		Thisform.oSearchEngine.EditMenuFromCurrentRow(thisform.cSearchResultsAlias)
	ENDPROC

	PROCEDURE editobjectfromcurrentrow
		Thisform.oSearchEngine.EditObjectFromCurrentRow(thisform.cSearchResultsAlias)
	ENDPROC

	PROCEDURE expandallnodes
		Local i
		
		For i = 1 To This.oTree.Nodes.Count
			This.ExpandNode(This.oTree.Nodes.Item(i))
		EndFor
		
		Thisform.oTree.SelectedItem.EnsureVisible()
		
		
	ENDPROC

	PROCEDURE exporttoexcel
		Lparameters llToFile
		
		Local loExport As 'CreateExportCursor'
		Local laFields[1], lcCursorName, lcExportCursor, lcFieldList, lcFile, lcFilter, lcName, lcOrderBy
		Local lcResultsCursor, lcTempTable, lnResponse, lnSelect, lnX, loColumn
		
		If m.llToFile
			lcFile = Getfile('xlsx, dbf', 'File Name:', 'Export to', 0, 'Export to DBF or XLSX')
			If Empty(m.lcFile)
				Return
			Endif
		
			If Not Inlist(Justext(m.lcFile), 'DBF', 'XLSX')
				Messagebox('Invalid file type')
				Return
			Endif
		
			If File(m.lcFile)
				lnResponse = Messagebox('File [' + m.lcFile + '] exists. Overwrite?', 3, 'Overwrite file?')
				If m.lnResponse # 6
					Return
				Endif
			Endif
		Else
			lcFile = 'GFResults.TMP' && awkward, but results from incomplete refactoring (used to indicate cursor by using TMP extension)
		Endif
		
		lcFile = Upper(m.lcFile)
		
		lnSelect		= Select()
		lcResultsCursor	= This.cSearchResultsAlias
		
		Dimension m.laFields[1, 2]
		lcFieldList	= ''
		lnX			= 1
		
		*-- First choose visible columns
		For Each m.loColumn In Thisform.oGrid.Columns
			If m.loColumn.Visible = .T.
				If m.lnX > 1
					Dimension m.laFields[m.lnX, 2]
				Endif
				laFields[m.lnX, 1] = Transform(m.loColumn.ColumnOrder, '999')
				laFields[m.lnX, 2] = m.loColumn.ControlSource
				lnX				   = m.lnX + 1
			Endif
		Endfor
		
		= Asort(m.laFields)
		
		For Each m.loColumn In Thisform.oGrid.Columns
			If m.loColumn.Visible = .F.
				If m.lnX > 1
					Dimension m.laFields[m.lnX, 2]
				Endif
				laFields[m.lnX, 1] = Transform(m.loColumn.ColumnOrder, '999')
				laFields[m.lnX, 2] = m.loColumn.ControlSource
				lnX				   = m.lnX + 1
			Endif
		Endfor
		
		For lnX = 1 To Alen(m.laFields) / 2
			If Not Empty(m.lcFieldList)
				lcFieldList = m.lcFieldList + ','
			Endif
			lcFieldList = m.lcFieldList + m.laFields[m.lnX, 2]
		Endfor
		
		lcFilter = Filter(m.lcResultsCursor)
		
		If Not Empty(m.lcFilter)
			lcFilter = 'Where ' + m.lcFilter
		Endif
		
		If Not Empty(Thisform.cOrderBy)
			lcOrderBy = 'Order By ' + Thisform.cOrderBy
		Else
			lcOrderBy = ''
		Endif
		
		lcExportCursor = 'ResultForExcelExport'
		
		Goto Top
		
		Do Case
			Case Justext(m.lcFile) =  'DBF'
				Select  &lcFieldList								;
					From &lcResultsCursor &lcFilter &lcOrderBy		;
					Into Table (m.lcFile)
				Use
				Messagebox('Exported to "' + m.lcFile + '"')
		
			Case Justext(m.lcFile) =  'XLSX'
				Select  &lcFieldList								;
					From &lcResultsCursor &lcFilter &lcOrderBy		;
					Into Cursor &lcExportCursor && Readwrite
		
				loExport = Createobject('CreateExports', Set('Datasession'))
				lcName	 = m.loExport.ExportToExcel(m.lcExportCursor, m.lcFile)
		
			Case Justext(m.lcFile) =  'TMP'
				lcTempTable = Addbs(Sys(2023)) + 'Cursor' + Sys(2015) + '.DBF'
				Select  &lcFieldList								;
					From &lcResultsCursor &lcFilter &lcOrderBy		;
					Into Table (m.lcTempTable)
				Use
		
				loExport	 = Createobject('CreateExports', 1)
				lcCursorName = Juststem(m.lcFile)
				lcName		 = m.loExport.ExportToCursor(m.lcTempTable, m.lcCursorName)
				Messagebox('Exported to cursor "' + m.lcName + '"')
		
		Endcase
		
		Select (m.lnSelect)
		
	ENDPROC

	PROCEDURE fillsearchresultscursor
		Local lcCollate, lcField, lcOrderBy, lcSearchEngineResultsAlias, lcSearchResultsAlias
		Local lcSecondarySortField, lcSecondarySortOrder, lcSortField, lcSortOrder, lcTertiarySortField
		Local lcTertiarySortOrder, lnSelect, loColumn
		
		lcSearchEngineResultsAlias = Thisform.oSearchEngine.cSearchResultsAlias
		lcSearchResultsAlias = Thisform.cSearchResultsAlias
		
		lnSelect = Select()
		lcOrderBy = ''
		
		*** JRN 11/06/2015 : using !Empty(Field( to provide for case of changed field names in GF 5
		*-- Construct Order By clause for Select statement from stored form property
		If !Empty(Thisform.cSortField) and !Empty(Field(Thisform.cSortField, lcSearchEngineResultsAlias))
			lcSortField = Thisform.cSortField
			lcSortOrder = Thisform.cSortOrder
			If (Empty(lcSortOrder) or ('ASC' $ Upper(lcSortOrder)))
				lcSortOrder = 'ASC'
			Endif
			lcOrderBy = lcSortField + ' ' + lcSortOrder 
		Endif
		
		If !Empty(Thisform.cSortFieldSecondary) and !Empty(Field(Thisform.cSortFieldSecondary, lcSearchEngineResultsAlias))
			lcSecondarySortField = Thisform.cSortFieldSecondary
			lcSecondarySortOrder = Thisform.cSortOrderSecondary
			If (Empty(lcSecondarySortOrder) or ('ASC' $ Upper(lcSecondarySortOrder)))
				lcSecondarySortOrder = 'ASC'
			EndIf
			lcOrderBy = lcOrderBy + ', ' + lcSecondarySortField + ' ' + lcSecondarySortOrder
		Endif
		
		If !Empty(Thisform.cSortFieldTertiary) and !Empty(Field(Thisform.cSortFieldTertiary, lcSearchEngineResultsAlias))
			lcTertiarySortField = Thisform.cSortFieldTertiary
			lcTertiarySortOrder = Thisform.cSortOrderTertiary
			If (Empty(lcTertiarySortOrder) or ('ASC' $ Upper(lcTertiarySortOrder)))
				lcTertiarySortOrder = 'ASC'
			EndIf
			lcOrderBy = lcOrderBy + ', ' + lcTertiarySortField + ' ' + lcTertiarySortOrder
		Endif
		
		If Empty(lcOrderBy)
			lcOrderBy = 'filename, class, name, methodname'
			thisform.cSortField = GetWordNum(lcOrderBy, 1, ',')
		Else
			lcOrderBy = Alltrim(lcOrderBy, 1, ',')
		EndIf
		
		Thisform.cOrderBy = lcOrderBy
		
		*-- Make header bold for primary sort column
		If Thisform.lInit
			For each loColumn in Thisform.oGrid.Columns
				loColumn.header1.FontBold = .f.
				lcField = GetWordNum(loColumn.ControlSource, 2, '.')
				If Upper(lcField) = Upper(GetWordNum(lcOrderBy, 1, ', '))
					loColumn.header1.FontBold = .t.
				Endif
			Endfor
		EndIf
		
		*-- This gives us case insensitive sorting...
		lcCollate = Set('Collate')
		Try 
			Set Collate To 'General'
		Catch to loException
			
		EndTry
		
		lcOrderBy = lcOrderBy + ', filename, class, name, methodname, MatchStart'
		*-- Create the local cursor if it does not already exist -----------------------
		If !Used(lcSearchResultsAlias)
			Select * From (Select * From (lcSearchEngineResultsAlias) Order By &lcOrderBy) source;
			 Into Cursor (lcSearchResultsAlias) ReadWrite 
		
		Else && Otherwise, Zap it and rebuild from GFSE cursor...
			
			Thisform.ClearSearchResultsCursor() && Zap it
			*-- Build a temp local cursor in correct initial order
			
			*TODO: The orderby clause here could fail since some field names were changed
			*      in relase 4.3.015. Need to handle this...
			Select * From (Select * From (lcSearchEngineResultsAlias) Order By &lcOrderBy) source ;
			 Into Cursor gf_temp_csr ReadWrite
		
			*-- Update local cursor in order that user has applied
			*!* ******************** Removed 11/09/2015 *****************
			*!* Insert Into (lcSearchResultsAlias) Select * From gf_temp_csr
			Select (lcSearchResultsAlias) 
			Append from (Dbf('gf_temp_csr')) 
		Endif
		
		Set Collate To (lcCollate)
		
		Select (lcSearchResultsAlias) 
		Goto Top
		
		Select (lnSelect)
		
		
		         
	ENDPROC

	PROCEDURE filtergfse
		Local lcFilter
		
		lcFilter = Filter(this.cSearchResultsAlias)         
		Set Filter To &lcFilter in (This.oSearchEngine.cSearchResultsAlias)
		 
	ENDPROC

	PROCEDURE focusonreplacepageframe
		Local loReplacePageframe
		loReplacePageframe = This.Containerright.Container1.containerReplaceText.PageFrame
		
		Do Case
			Case Thisform.nReplaceMode = 1
				m.loReplacePageframe.Page1.editReplaceExpression.SetFocus()
			Case Thisform.nReplaceMode = 2
				m.loReplacePageframe.Page2.editReplaceLine.SetFocus()
			Case Thisform.nReplaceMode = 3
				m.loReplacePageframe.Page3.cmdBrowse.SetFocus()
		Endcase
		
	ENDPROC

	PROCEDURE formatgrid
		*-- This method provides basic grid formatting when form is first launched, 
		*-- then, in the Form.Init(), the user settings will be loaded, which will
		*-- restore column width and column order based on user's last sesssion.
		
		Local lcControlSourceField, lcDynamicBackColor, lcSearchResultsAlias, loColumn, loGrid
		
		loGrid = Thisform.oGrid
		lcSearchResultsAlias = Thisform.cSearchResultsAlias
		
		ThisForm.oGrid.ArrangeColumns()
		
		*-- Set Header captions from Field name -----------------
		For Each loColumn In loGrid.columns
			lcControlSourceField = Proper(Getwordnum(loColumn.ControlSource, 2, '.'))
			loColumn.Width = 100
			loColumn.Header1.Caption = lcControlSourceField
			loColumn.Header1.Alignment = 0
			loColumn.Header1.Tag = lcControlSourceField  && Save ControlSource on tag so Options form can access it.
		Endfor
		
		*-- Now, override a few Header captions so they'll read better ------------------
		*-- Note: Any "Visible = .f." settings assigned here oly affect GF the first time it is ever used.
		*         After first use, the XML settings files take over this visibility of columns.
		
		loColumn = loGrid.FindColumn('Process')
		loColumn.Header1.caption = 'Replace'
		loGrid.colProcess.Visible = .f.
		loColumn.width = 50
		This.FormatProcessColumn()
		
		loColumn = loGrid.FindColumn('Filepath')
		loColumn.Header1.caption = 'File Name with Path'
		loColumn.Width = 200
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('Filename')
		loColumn.Header1.caption = 'File Name'
		loColumn.Width = 200
		
		loColumn = loGrid.FindColumn('Filetype')
		loColumn.Header1.caption = 'Ext'
		
		loColumn = loGrid.FindColumn('TrimmedmatchLine')
		loColumn.Header1.caption = 'Match Line'
		loColumn.Width = 200
		
		loColumn = loGrid.FindColumn('TrimmedReplaceLine')
		loColumn.Header1.caption = 'Replace Line'
		*SF 20221016 added colour options
		*lcDynamicBackColor = "ICase(replaced, RGB(149,249,147), replacerisk > Thisform.nReplaceRisk, Rgb(210,210,210), Rgb(255,255,255))"
		lcDynamicBackColor = "ICase(" +;
		"replaced, " + PADR(Thisform.nReplacedDynamicBackColour,8) + ", " +;
		"replacerisk > Thisform.nReplaceRisk, " + PADR(Thisform.nRiskExceededDynamicBackColour,8) + ", " +;
		"Rgb(255,255,255))"
		loColumn.DynamicBackColor = lcDynamicBackColor 
		*/ SF 20221016 added colour options
		loColumn.Width = 200
		
		loColumn = loGrid.FindColumn('Matchtype')
		loColumn.Header1.caption = 'Match Type'
		
		loColumn = loGrid.FindColumn('Baseclass')
		loColumn.Header1.caption = 'Base Class'
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('Parentclass')
		loColumn.Header1.caption = 'Parent Class'
		
		loColumn = loGrid.FindColumn('ContainingClass')
		loColumn.Header1.caption = 'Containing Class'
		
		loColumn = loGrid.FindColumn('Classloc')
		loColumn.Header1.caption = 'Parent Class VCX'
		
		loColumn = loGrid.FindColumn('name')
		loColumn.Header1.caption = 'Name'
		
		loColumn = loGrid.FindColumn('Methodname')
		loColumn.Header1.caption = 'Method/Property Name'
		
		loColumn = loGrid.FindColumn('Class')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('Type')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('Recno')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('ProcStart')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('MatchStart')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('MatchLen')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('lIsText')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('Code')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('id')
		loColumn.Visible = .f.
		
		loColumn = loGrid.FindColumn('MatchLine')
		loColumn.Header1.caption = 'Match Line with white space'
		loColumn.Visible = .f.
		
		
		    
	ENDPROC

	PROCEDURE formatgridforreplacemode
		Local llReplaceMode, lnOrder, lnWidth, loColumn
		
		llReplaceMode = Thisform.lReplaceMode
		
		loSourceColumn = This.ogrid.FindColumn('TrimmedMatchline')
		
		loColumn		 = This.ogrid.FindColumn('TrimmedReplaceline')
		loColumn.Visible = m.llReplaceMode
		loColumn.Width	 = m.loSourceColumn.Width
		Do While m.loColumn.ColumnOrder # m.loSourceColumn.ColumnOrder + 1
			If m.loColumn.ColumnOrder < m.loSourceColumn.ColumnOrder
				loColumn.ColumnOrder = m.loColumn.ColumnOrder + 1
			Else
				loColumn.ColumnOrder = m.loColumn.ColumnOrder - 1
			Endif
		Enddo
		
		loColumn		 = This.ogrid.FindColumn('Process')
		loColumn.Visible = m.llReplaceMode&& and (Thisform.nReplaceMode # 2)
		loColumn.Width	 = 50
		
		Do While m.loColumn.ColumnOrder + 1 # m.loSourceColumn.ColumnOrder
			If m.loColumn.ColumnOrder < m.loSourceColumn.ColumnOrder
				loColumn.ColumnOrder = m.loColumn.ColumnOrder + 1
			Else
				loColumn.ColumnOrder = m.loColumn.ColumnOrder - 1
			Endif
		Enddo
		
		Thisform.oGrid.Refresh() && This is important to get the Grid to hide the above columns be next method call.
		
		* ================================================================================
		* ================================================================================
		
		
		*!* ******************** Removed 10/28/2015 *****************
		*!* *-- In Replace Mode, we will show the Replace checkboc column to the left of the Match column,
		*!* *-- and the Replace Line column to the right of it. Hide these 2 columns if we are not in Replace Mode
		
		*!* *-- Finf the Match Line Column ---
		*!* loColumn = This.oGrid.FindColumn('TrimmedMatchline')
		*!* lnOrder = loColumn.ColumnOrder
		*!* lnWidth = loColumn.Width
		
		
		*!* *-- Work on the the Replace Line column...
		*!* loColumn = This.oGrid.FindColumn('TrimmedReplaceline')
		*!* This.ShowGridColumn(llReplaceMode, loColumn, lnOrder + 1, lnWidth)
		
		*!* *-- Work on the Replace Checkbox column...
		*!* loColumn = This.oGrid.FindColumn('Process')
		*!* This.ShowGridColumn(llReplaceMode, loColumn, lnOrder, 50)
		
		*!* Thisform.oGrid.Refresh() && This is important to get the Grid to hide the above columns be next method call.
		
		*!* Thisform.oGrid.ArrangeColumns()
		
		
		     
	ENDPROC

	PROCEDURE formatprocesscolumn
		Local lcReplaceColumnDynamicBackgroundColor, lcReplaceColumnDynamicCurrentControl, loColumn
		
		*-- This method is called from the GRid.Init() *AND* must be called after every search becuase I had trouble where the Replace checkboxes
		*-- would quit working after a search, in certain situtations. Re-applying the DynamicCurrentControl setting here fixed the problem.
		
		loColumn = This.oGrid.FindColumn('Process')
		
		
		Thisform.nReplaceRisk = 99
		
		lcReplaceColumnDynamicCurrentControl = "ICase(replaced = .t., 'imageCheck', (replacerisk <= Thisform.nReplaceRisk) and (Thisform.nReplaceMode # 2), 'check1', 'label1')"
		*SF 20221016 added colour options
		*lcReplaceColumnDynamicBackgroundColor = "ICase(replacerisk = 2, RGB(255,255,128), replacerisk = 3 and Thisform.nReplaceRisk = 3, Rgb(255,192,0), Rgb(255,255,255))"
		lcReplaceColumnDynamicBackgroundColor = "ICase(" +;
		"replacerisk = 2, " + PADR(Thisform.nRisk2DynamicBackColour,8) + ", " +;
		"replacerisk = 3 and Thisform.nReplaceRisk = 3, " + PADR(Thisform.nRisk3DynamicBackColour,8) + ", " +;
		"Rgb(255,255,255))"
		*/ SF 20221016 added colour options
		
		If this.lInit
			Thisform.oGrid.Setfocus() && It's important for the grid to have focus as these next settings below are applied
		Endif
		
		loColumn.DynamicCurrentControl = lcReplaceColumnDynamicCurrentControl
		loColumn.DynamicBackColor = lcReplaceColumnDynamicBackgroundColor 
		 
		   
	ENDPROC

	PROCEDURE getcurrentscope		&& Will return the Active Project, Browsed Project, Current Dir, or Browsed Dir depending on current setting of nSearchScope (Values: 1 through 4)
		Local lcScope, lnScope
		
		*0=Not set, 1=Active Project, 2=Browse Project, 3=Current Dir, 4=Browse Directory, 5=A Selection from the Scope combo
		
		lnScope = Thisform.oSearchEngine.oSearchOptions.nSearchScope
		
		Do Case
		
			Case lnScope = 1 && Active Project
				lcScope = Thisform.cActiveProject
		
			Case lnScope = 2 && Browsed Project
				lcScope = This.oSearchEngine.oSearchOptions.cProject	
		
			Case lnScope = 3 && Current Directory
				lcScope = Thisform.cCurrentDir 	
			
			Case lnScope = 4  && Browsed Directory
				lcScope = This.oSearchEngine.oSearchOptions.cPath
		
			Case lnScope = 0 or lnScope = 5
				lcScope = Alltrim(Thisform.comboSearchScopeHistory.Text)
				
				If Empty(lcScope)
					lcScope = Thisform.cCurrentDir
				Endif
				
		EndCase
		
		lcScope = Alltrim(lcScope)
		lcScope = Rtrim(lcScope, '\')
		
		Return lcScope
	ENDPROC

	PROCEDURE getcustomcss
		Local laFoxOptions[1], laValue[1], lcCssFile, lcCssText, lcRGB, lcReplacement, lcSetting, lnErrNum
		Local lnPos, loReg
		
		Dimension m.laFoxOptions[1, 2]
		
		If Not Isnull(Thisform.cCustomCss)
			Return Thisform.cCustomCss
		Endif
		
		Thisform.cCustomCss	= ''
		
		lcCssFile = _Screen._GoFishClassic.cAppPath + 'CSS\GoFish_User.css'
		If Not File(m.lcCssFile)
			Return ''
		Endif
		
		loReg	 = Newobject('FoxReg', 'lib\gofish_registry.prg')
		lnErrNum = m.loReg.EnumFoxOptions(@m.laFoxOptions)
		Create Cursor Fox_Settings (Setting C(40), Value C(250))
		Append From Array m.laFoxOptions
		
		lcCssText = Filetostr(m.lcCssFile)
		Do While .T.
			lcSetting = Strextract(m.lcCssText, '<<', '>>', 1, 0)
			If Empty(m.lcSetting)
				Use In Fox_Settings
				Thisform.cCustomCss = m.lcCssText
				Return m.lcCssText
			Else
				Select  Trim(Value)									;
					From Fox_Settings								;
					Where Upper(Setting) = Upper(m.lcSetting)		;
					Into Array laValue
				If _Tally = 0
					Use In Fox_Settings
					Return ''
				Endif
				lcRGB = Strextract(m.laValue, 'RGB(', ')', 1, 1)
				lnPos = At(',', m.lcRGB, 3)
		
				lcReplacement = Textmerge('color: rgb(<<Left(m.lcRGB, m.lnPos - 1)>>);')
				lcReplacement = m.lcReplacement + CRLF + Textmerge('background-color: rgb(<<Substr(m.lcRGB, m.lnPos + 1)>>)')
		
				lcCssText = Strtran(m.lcCssText, '<<' + m.lcSetting + '>>', m.lcReplacement)
		
			Endif && Empty(lcSettings)
		Enddo && While .T.
		
		
	ENDPROC

	PROCEDURE getlastsavedresultsfolder
		Local laDirs[1], lcDir, lcFolder, lcName, lcRoot, lnAlen
		
		lcName = Thisform.cSavedSearchResultsFolder
		*SF 20221017, Special local settings. 
		*lcRoot = Home(7) + lcName
		lcRoot = This.cCR_StoreLocal + lcName
		*/SF 20221017, Special local settings. 
		
		ADir(laDirs, Addbs(lcRoot) + "*",'D',1)
		
		If Type('laDirs') $ "UL"
			Return ''
		EndIf
		
		lnAlen = Alen(laDirs) / 5
		
		*-- Get the last one in the list...
		lcDir = laDirs[lnAlen, 1]
		
		lcFolder = Addbs(lcRoot) + Addbs(lcDir)
		
		Return lcFolder
		
		
	ENDPROC

	PROCEDURE gridcolumnrightclick
		Local lcChoice, lcChoice1, lcChoice2, lcClass, lcFileName, lnBar, lnI, loNode, loTag, loTree
		
		lcFileName = Trim(FilePath)
		If Empty(m.lcFileName)
			Return
		Endif
		
		lcClass = Trim(Class)
		
		lcChoice = ''
		lnBar	 = 0
		CreateContextMenu('FilterByFile')
		
		lcChoice1 = 'Filter by this File'
		lnBar	  = m.lnBar + 1
		Define Bar (m.lnBar) Of FilterByFile Prompt (m.lcChoice1)
		On Selection Bar (m.lnBar) Of FilterByFile m.lcChoice = [&lcChoice1]
		
		lcChoice2 = 'Filter by this Class'
		If Not Empty(m.lcClass)
			lnBar	  = m.lnBar + 1
			Define Bar (m.lnBar) Of FilterByFile Prompt (m.lcChoice2)
			On Selection Bar (m.lnBar) Of FilterByFile m.lcChoice = [&lcChoice2]
		Endif
		
		
		Activate Popup FilterByFile
		Release Popups FilterByFile
		
		Do Case
			Case m.lcChoice = m.lcChoice1
				loTree = This.oTree
				For lnI = 1 To m.loTree.Nodes.Count
					loNode = m.loTree.Nodes[m.lni]
					loTag  = m.loNode.Tag
					If 'C' = Vartype(m.loTag) And Substr(m.loNode.Key, 1 + At('_', m.loNode.Key, 2)) == m.lcFileName
						This.ClickTreeviewNode(m.loNode)
					Endif
				Endfor
		
			Case m.lcChoice = m.lcChoice2
				loTree = This.oTree
		
				For lnI = 1 To m.loTree.Nodes.Count
					loNode = m.loTree.Nodes[m.lni]
					loTag  = m.loNode.Tag
					If 'O' = Vartype(m.loTag)							;
							And Pemstatus(m.loTag, 'filepath', 5)		;
							And Pemstatus(m.loTag, 'class', 5)			;
							And m.loTag.FilePath == m.lcFileName		;
							And m.loTag.Class == m.lcClass
						This.ClickTreeviewNode(m.loNode)
					Endif
				Endfor
		Endcase
		
		
		
	ENDPROC

	PROCEDURE gridheaderrightclick
		Local lcChoice, lnBar
		lcChoice = ''
		lnBar	 = 0
		CreateContextMenu('GridHeaderMenu')
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of GridHeaderMenu Prompt 'Sort by this column'
		On Selection Bar (m.lnBar) Of GridHeaderMenu m.lcChoice = 'Sort by this column'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of GridHeaderMenu Prompt 'Secondary sort by this column'
		On Selection Bar (m.lnBar) Of GridHeaderMenu m.lcChoice = 'Secondary sort by this column'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of GridHeaderMenu Prompt 'Reset sort order to default'
		On Selection Bar (m.lnBar) Of GridHeaderMenu m.lcChoice = 'Reset sort order to default'
		
		
		Activate Popup GridHeaderMenu
		Release Popups GridHeaderMenu
		
		Do Case
			Case m.lcChoice = 'Reset sort order to default'
				This.cSortField			 = 'filename'
				This.cSortFieldSecondary = 'class'
				This.cSortFieldTertiary	 = 'name'
				This.cSortOrder			 = ''
				This.cSortOrderSecondary = ''
				This.cSortOrderTertiary	 = ''
									
				This.Fillsearchresultscursor()
		
			Case m.lcChoice = 'Sort by this column'
				This.SortColumn()
		
			Case m.lcChoice = 'Secondary sort by this column'
				This.Sortcolumnsecondary()
		
		Endcase
		
		This.Refresh()
		
		
		
	ENDPROC

	PROCEDURE Init
		Lparameters tcProject
		
		Local loGrid, loSearchEngine, loSearchOptions
		Local lcFolder, lcSearchEnginerOptionsFile, lcSearchExpression, loColumn
		
		Set Talk Off
		Set Echo Off
		Set Century On
		
		_Screen._GoFishClassic.oResultsForm = this
		
		This.LockScreen = .T.
		
		If This.Desktop Or This.Dockable=1 Then
		*Move forms with this setting into screen, might be odd on multiple monitors
		
		*get coords of vfp
			This.Top  = _Screen.Top
			This.Left = _Screen.Left
		*twice, first reads odd values
			This.Top  = _Screen.Top
			This.Left = _Screen.Left
		Endif &&This.Desktop Or This.Dockable=1
		
		This.Caption = 'GoFishClassic ' + _Screen._GoFishClassic.cVersion
		
		This.oBrowser = Thisform.containerRight.Container2.containerWebControl.oBrowser
		
		loSearchEngine = This.oSearchEngine
		loSearchOptions = loSearchEngine.oSearchOptions
		loGrid = Thisform.containerRight.Container1.gridFiles
		
		tcProject = Evl(tcProject, '')
		
		Thisform.UpdateSearchScopeVariables()
		
		*-- Create a local GF results cursor from GFSE cursor, then bind the grid to it
		loGrid.ColumnCount = Fcount(Thisform.cSearchResultsAlias)
		loGrid.RecordSource = (Thisform.cSearchResultsAlias)
		Thisform.Refresh()
		Thisform.FormatGrid()
		
		If This.lRestorePreviousSearchResultsOnStartup
			lcFolder = Thisform.GetSavedResultsFolder()
		Else
			lcFolder = ''
		EndIf
		
		*SF 20221018 -> local storage
		*lcSearchEnginerOptionsFile = Evl(lcFolder, Home(7)) + This.cSearchOptionsXMLFile
		lcSearchEnginerOptionsFile = Evl(lcFolder, This.cCR_StoreLocal) + This.cSearchOptionsXMLFile
		*/SF 20221018 -> local storage
		
		loSearchEngine.LoadOptions(lcSearchEnginerOptionsFile) && Load search settings from previous session
		Thisform.nOriginalSearchScope = loSearchOptions.nSearchScope 
		loSearchEngine.oSearchOptions.lIncludeAllFileTypes = .f. && Deprecated feature. Set to .f. to handle old XML files
		loSearchEngine.oProgressBar = This.ProgressBar
		
		*ThisForm.RestoreIndex() && Must be called AFTER saved search options are loaded in from XML file
		With loSearchOptions
			.lStoreCode = .T.
			.lCreateResultsCollection = .F.
		Endwith
		
		*-- Load some default setting from form properties, then load stored settings from XML file
		loGrid.FontSize = Thisform.nGridFontSize 
		This.oTree.Font.Size = Thisform.nGridFontSize 
		This.containerRight.Container2.containerWebControl.nZoom = This.nBrowserZoom
		This.LoadFormSettings() && Form size and position, as well as a few custom properties that are store on the form
		This.LoadFilterSettings()
		*Thisform.FillSearchResultsCursor() && This will cause bold to be applied on the sort column header.
		
		*-- Add previous stored project...
		If !Empty(loSearchOptions.cProject) and File(loSearchOptions.cProject)
			loSearchEngine.SetProject(loSearchOptions.cProject)
		EndIf
		
		*-- Add passed in Project...
		If !Empty(tcProject)
			If 'PJX' $ Upper(tcProject)
				loSearchOptions.nSearchScope = 2
				If File(tcProject)
					loSearchEngine.SetProject(FullPath(tcProject))
				Else
					MessageBox('Passed project [' + tcProject + '] cannot be found.', 0, 'GoFish')
				EndIf
			Else
				loSearchOptions.nSearchScope = 4
				loSearchEngine.oSearchOptions.cPath = tcProject
			Endif
		EndIf
		
		Thisform.ApplyFilter()
		
		ThisForm.PopulateTreeview()
		
		Thisform.oBrowser.Setfocus() && A trick to make the web control appear on the page,
									 && otherwise, it's doesn't appear properly at startup.
		Thisform.SetCaption(Thisform.containerRight.container1.lblResults, '')
		
		For Each loColumn in Thisform.oGrid.Columns
			BindEvent(loColumn.Header1, 'Click', Thisform, 'SortColumn')
			Bindevent(m.loColumn.Header1, 'RightClick', Thisform, 'GridHeaderRightClick')
			BindEvent(loColumn.Text1, 'RightClick', Thisform, 'GridColumnRightClick')
			BindEvent(loColumn.Text1, 'DblClick', Thisform, 'EditFile')
		Endfor
		
		Thisform.editSearch.SetFocus()
		Thisform.editSearch.InteractiveChange()
		
		*-- Ensure that the current scope is in the SearchScopeHistory table
		With Thisform.comboSearchScopeHistory
			.LoadProjects(This.oSearchEngine.oProjects)
			.SaveSearchScope(Lower(Thisform.GetCurrentScope()))
		Endwith
		
		Thisform.Refresh()
		
		This.LockScreen = .F.
		
		DoDefault()
		
		If loSearchOptions.lShowAdvancedFormOnStartup
			Thisform.timerShowAdvancedForm.Interval = 100
		Endif
		
		This.lInit = .t.
		
		If Thisform.lRestorePreviousSearchResultsOnStartup
			Thisform.RestorePreviousSearch()
		Endif
		
		
	ENDPROC

	PROCEDURE KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		
		Do Case
			Case Thisform.lSearching = .F. And m.nKeyCode = 27
				Thisform.Release()
			Case m.nKeyCode = 137 And Inlist(m.nShiftAltCtrl, 2, 3, 6, 7) && Ctrl + F11
				This.lMaximizeCodeView = Not This.lMaximizeCodeView
				This.Refresh()
		Endcase
		
		
	ENDPROC

	PROCEDURE lmaximizecodeview_assign
		Lparameters tlmaximizecodeview
		Local lnHeight, lnWidth, loActiveControl
		
		If This.lMaximizeCodeView = m.tlmaximizecodeview
			Return
		Endif
		
		This.lMaximizeCodeView = m.tlmaximizecodeview
		
		Try 
			loActiveControl = This.ActiveControl
		Catch to loException
			
		EndTry
		
		With This.Containerright
		
			If m.tlmaximizecodeview
				lnWidth	 = .Width
				lnHeight = .Height
		
				.Container1.Visible	= .F.
				.Splitter1.Visible	= .F.
				.Splitter3.Visible	= .F.
		
				With .Container2
					.Anchor	= 0
					.Top	= 0
					.Left	= 0
					.Width	= m.lnWidth
					.Height	= m.lnHeight
					.Anchor	= 15
				Endwith
		
			Else
				Thisform.nCodeWindowPosition = Thisform.nCodeWindowPosition
			Endif
		
		Endwith
		
		Try 
			This.oBrowser.SetFocus()
		Catch to loException
			
		EndTry
		
		This.editSearch.SetFocus()
	ENDPROC

	PROCEDURE Load
		Set Talk Off
		Set Echo Off
		
		Thisform.lAutoYield = _vfp.AutoYield
		_vfp.AutoYield = .T.
		
		* SF 20221017
		* we first got storage location of settings
		Local loMy As 'My' Of 'My.vcx'
		Local lcFile, loSettings
		
		lcFile = This.cCR_StoreLocal + This.cUISettingsFile
		
		loMy = Newobject('My', 'My.vcx')
		loSettings = loMy.Settings
		
		If File(lcFile)
			loSettings.Load(lcFile)
		
		* SF 20221017
		* Special local settings.
			If m.loSettings.Exists('lCR_Allow') And m.loSettings.lCR_Allow Then
		*Search local settings, procedure because Go1Fish.prg needs this as well.
				This.lCR_Allow = loSettings.lCR_Allow
		
				Get_LocalSettings(@loSettings,@lcFile)
		
				This.lCR_Allowed = loSettings.lCR_Allowed
				If loSettings.lCR_Allowed Then
					This.cCR_StoreLocal  = Addbs(Justpath(m.lcFile))
				Endif &&loSettings.lCR_Allowed
		
			Endif &&m.loSettings.Exists('lCR_Allow') And m.loSettings.lCR_Allow
		Endif
		
		This.cUISettingsFile = m.lcFile
		
		Thisform.cfilteroptionsxmlfile = Thisform.cCR_StoreLocal + Thisform.cfilteroptionsxmlfile
		
		*/ SF 20221017
		
		DoDefault()
		
		This.Top = -2000 && See comments in LoadFormSettings() for explanation of this...
		
		This.cInitialDefaultDir = Addbs(Sys(5) + Sys(2003))
		This.oSearchEngine = Createobject('GoFishSearchEngine',,Thisform.cCR_StoreLocal)
		This.oSearchOptions = This.oSearchEngine.oSearchOptions
		
		This.cActiveProject = Thisform.oSearchEngine.GetActiveProject()
		
		This.FillSearchResultsCursor()
		
		This.cHtmlCodeViewFilename = Addbs(Sys(2023)) + This.cSearchResultsAlias + '.html'
		
		If This.Top < 0 && Just in case the above -2000 didn't get reset properly in LoadFormSettings()
			This.Top = 0
		Endif
		
		This.lDesktop = This.Desktop
		
	ENDPROC

	PROCEDURE loadfiltersettings
		This.oFilter = Createobject(This.cFilterOptionsClass)
		This.oFilter.LoadFromFile(This.cFilterOptionsXMLFile)
	ENDPROC

	PROCEDURE loadformsettings
		Lparameters tlForceLoadFromHome7, tcFolder
		
		*-- tlForceLoadFromHome7 will force us to load from settings from Home(7) instead of the last search history folder.
		
		Local loMy As 'My' Of 'My.vcx', loMyDefault As 'My' Of 'My.vcx'
		Local lcDockWindow, lcFolder, lcSettingsFile, llDocked, llRestoreSizeAndPosition, lnDockPosition
		Local lnX, loControl, loSettings, loSettingsDefault
		Local;
			lnTop          As Integer,;
			lnLeft         As Integer,;
			lnWidth        As Integer,;
			lnHeight       As Integer,;
			lnScreenTop    As Integer,;
			lnScreenBottom As Integer,;
			lnScreenLeft   As Integer,;
			lnScreenRight  As Integer,;
			loMonitor      As Empty
		
		*SF 20221017
		*new settings
		*first, check if we have the settings in oSearchOptions, then we must move them
		If Pemstatus(This.oSearchOptions,"lMoveNewCodeToTopLeft",5) Then
			This.lMoveNewCodeToTopLeft          = This.oSearchOptions.lMoveNewCodeToTopLeft
		
			Removeproperty(This.oSearchOptions,"lMoveNewCodeToTopLeft")
		Endif &&PEMSTATUS(THIS.oSearchOptions,"lMoveNewCodeToTopLeft",5)
		If Pemstatus(This.oSearchOptions,"nContainerFrameColour",5) Then
			This.nContainerFrameColour          = This.oSearchOptions.nContainerFrameColour
			This.nFileSCXDynamicForeColour      = This.oSearchOptions.nFileSCXDynamicForeColour
			This.nFileVCXDynamicForeColour      = This.oSearchOptions.nFileVCXDynamicForeColour
			This.nFilePRGDynamicForeColour      = This.oSearchOptions.nFilePRGDynamicForeColour
			This.nFileDefaultDynamicForeColour  = This.oSearchOptions.nFileDefaultDynamicForeColour
			This.nReplacedDynamicBackColour     = This.oSearchOptions.nReplacedDynamicBackColour
			This.nRiskExceededDynamicBackColour = This.oSearchOptions.nRiskExceededDynamicBackColour
			This.nRisk2DynamicBackColour        = This.oSearchOptions.nRisk2DynamicBackColour
			This.nRisk3DynamicBackColour        = This.oSearchOptions.nRisk3DynamicBackColour
			This.nTreeSearchColour              = This.oSearchOptions.nTreeSearchColour
			This.nTreeUpdateColour              = This.oSearchOptions.nTreeUpdateColour
			This.nCSS_tr_even_Colour            = This.oSearchOptions.nCSS_tr_even_Colour
			This.nCSS_tr_odd_Colour             = This.oSearchOptions.nCSS_tr_odd_Colour
		
			Removeproperty(This.oSearchOptions,"nContainerFrameColour")
			Removeproperty(This.oSearchOptions,"nFileSCXDynamicForeColour")
			Removeproperty(This.oSearchOptions,"nFileVCXDynamicForeColour")
			Removeproperty(This.oSearchOptions,"nFilePRGDynamicForeColour")
			Removeproperty(This.oSearchOptions,"nFileDefaultDynamicForeColour")
			Removeproperty(This.oSearchOptions,"nReplacedDynamicBackColour")
			Removeproperty(This.oSearchOptions,"nRiskExceededDynamicBackColour")
			Removeproperty(This.oSearchOptions,"nRisk2DynamicBackColour")
			Removeproperty(This.oSearchOptions,"nRisk3DynamicBackColour")
			Removeproperty(This.oSearchOptions,"nTreeSearchColour")
			Removeproperty(This.oSearchOptions,"nTreeUpdateColour")
			Removeproperty(This.oSearchOptions,"nCSS_tr_even_Colour")
			Removeproperty(This.oSearchOptions,"nCSS_tr_odd_Colour")
		Endif &&PEMSTATUS(THIS.oSearchOptions,"nContainerFrameColour",5)
		*/ SF 20221017
		
		*-- Note: In the Load() event, Form.Top is set to -2000 to prevent the form from appearing in the
		*-- visible screen area and then being moved to the restored position. This caused an annoying
		*-- flashing behavior than can be avoided with this trick.
		*-- Therefore, we must be sure to bring the form back into the view area before we leave this method.
		
		* SF 20221017
		* Special local settings. Should only happen in gf_resultsform
		If This.nFirstLoad=0 Then
			This.nFirstLoad = 1
		
		*common settings file
		*we have the right file from LOAD anyway, but we must restore lCR_Allow from global setting
		*do we load it twice
			This.cUISettingsFile = Addbs(Home(7)) + Justfname(This.cUISettingsFile)
			lcSettingsFile       = This.cUISettingsFile
		
			If Not File(m.lcSettingsFile)
				This.Top = 0 && See note above
				Return
			Endif
		
			loMy	   = Newobject('My', 'My.vcx')
			loSettings = m.loMy.Settings
		
			m.loSettings.Load(m.lcSettingsFile)
		
			This.lCR_Local         = PropNvl(m.loSettings, "lCR_Local"        ,This.lCR_Local        ,.T.)
			This.lCR_Local_Default = PropNvl(m.loSettings, "lCR_Local_Default",This.lCR_Local_Default,.T.)
		
			If m.loSettings.Exists('lCR_Allow') And m.loSettings.lCR_Allow Then
		*Search local settings, procedure because Go1Fish.prg needs this as well.
				This.lCR_Allow = loSettings.lCR_Allow
		
				Get_LocalSettings(@loSettings,@lcSettingsFile)
		
				This.lCR_Allowed = loSettings.lCR_Allowed
				If loSettings.lCR_Allowed Then
					This.nFirstLoad = 2
					This.cUISettingsFile = m.lcSettingsFile
					This.cCR_StoreLocal  = Addbs(Justpath(m.lcSettingsFile))
				Endif &&loSettings.lCR_Allowed
		
			Endif &&m.loSettings.Exists('lCR_Allow') And m.loSettings.lCR_Allow
		
			llRestoreSizeAndPosition = .T.
		Else  &&This.nFirstLoad=0
			lcSettingsFile       = This.cUISettingsFile
		
			If Not File(m.lcSettingsFile)
				This.Top = 0 && See note above
				Return
			Endif
		
			loMy	   = Newobject('My', 'My.vcx')
			loSettings = m.loMy.Settings
		
			m.loSettings.Load(m.lcSettingsFile)
		
		Endif &&This.nFirstLoad=0
		
		*we keep a copy of the real settings, so we restore not all from previous search, if we use that
		loMyDefault       = m.loMy
		loSettingsDefault = m.loSettings
		
		This.lRestorePreviousSearchResultsOnStartup	= PropNvl(m.loSettingsDefault, 'lRestorePreviousSearchResultsOnStartup ', This.lRestorePreviousSearchResultsOnStartup, .T.)
		*/ SF 20221017
		
		If Not m.tlForceLoadFromHome7 And Thisform.lRestorePreviousSearchResultsOnStartup
			lcFolder = Thisform.GetLastSavedResultsFolder()
		
			lcSettingsFile = m.lcFolder + Justfname(This.cUISettingsFile)
			If File(m.lcSettingsFile)
				loMy	   = Newobject('My', 'My.vcx')
				loSettings = m.loMy.Settings
		
				m.loSettings.Load(m.lcSettingsFile)
			Endif
		Endif
		
		If m.llRestoreSizeAndPosition
		*-- Restore Docking settings (Code provided by Jim Nelson) -----------------
		*-- Important note: Dock settings MUST be restored before Lett and Top are restored in next step
			Try
					This.Dockable  = m.loSettingsDefault.nDockable
					llDocked	   = m.loSettings.lDocked
					lnDockPosition = m.loSettings.nDockPosition
					If This.Dockable = 1 And m.llDocked
						lcDockWindow = m.loSettings.cDockWindow
						Do Case
							Case Not Empty (m.lcDockWindow)
								Try
										Dock Name Thisform Position 4 Window &lcDockWindow
									Catch
		
								Endtry
							Case  Between (m.lnDockPosition, 0, 3)
								This.Dock (m.lnDockPosition)
						Endcase
					Endif
				Catch
			Endtry
		
		*-- Resize form size and position--------------------
			If m.loSettings.Exists('FormTop')
				With m.loSettings
					lnTop          = 0
					lnHeight       = This.Height
					lnLeft         = 0
					lnWidth        = This.Width
		
					lnScreenTop    = 0
					lnScreenBottom = _Screen.Height
					lnScreenLeft   = 0
					lnScreenRight  = _Screen.Width
		
					If This.Desktop Or This.Dockable=1 Then
						loMonitor = GetMonitorStatistics()
		
						lnTop          = _Screen.Top
						lnLeft         = _Screen.Left
		
						lnScreenTop    = m.loMonitor.gnVirtualTop
						lnScreenBottom = m.loMonitor.gnVirtualBottom
						lnScreenLeft   = m.loMonitor.gnVirtualLeft
						lnScreenRight  = m.loMonitor.gnVirtualRight
		
					Endif &&This.Desktop Or This.Dockable=1
		
					If Between(.FormTop , m.lnScreenTop, m.lnScreenBottom) Then
						lnTop    = .FormTop
						lnHeight = .FormHeight
					Endif &&Between(.FormTop , m.lnScreenTop, m.lnScreenBottom)
		
					If Between(.FormLeft, m.lnScreenLeft, m.lnScreenRight) Then
						lnLeft   = .FormLeft
						lnWidth  = .FormWidth
					Endif &&Between(.FormLeft, m.lnScreenLeft, m.lnScreenRight)
		
					Thisform.Move(m.lnLeft, m.lnTop, m.lnWidth, m.lnHeight)
					Thisform.Resize()
		
					Try
							This.Containerright.Splitter1.MoveSplitterToPosition(.Splitter1Position)
						Catch
					Endtry
					Try
							This.Containerright.Splitter3.MoveSplitterToPosition(.Splitter3Position)
						Catch
					Endtry
					Try
							This.splitter2.MoveSplitterToPosition(.Splitter2Position)
						Catch
					Endtry
					This.Top = .FormTop && Do this one last to finally bring the form into view.
				Endwith
			Else
				This.Top = 0
			Endif
		
			With Thisform
				.nBrowserZoom       = PropNvl(m.loSettingsDefault, 'nBrowserZoom', 1, .T.)
				.nSearchBoxFontSize	= PropNvl(m.loSettings, 'nSearchBoxFontSize', Thisform.editSearch.FontSize, .T.)
				.nGridFontSize		= PropNvl(m.loSettingsDefault, 'nGridFontSize', Thisform.oGrid.FontSize, .T.)
				.nTreeViewFontSize	= PropNvl(m.loSettingsDefault, 'nTreeViewFontSize', Thisform.oGrid.FontSize, .T.)
				.nReplaceMode		= PropNvl(m.loSettings, 'nReplaceMode', 1)
		
				.Containerright.Container2.containerWebControl.nZoom = .nBrowserZoom
			Endwith
		
		Endif
		
		*-- Load other Form properties from My Settings ------------------------------------
		With Thisform
		*.lIncludeSubDirectoriesCurrent = PropNvl(loSettings, 'lIncludeSubDirectoriesCurrent', .t.)
		*.lIncludeSubDirectoriesBrowsed = PropNvl(loSettings, 'lIncludeSubDirectoriesBrowsed', .t.)
			.lApplyFilter	   = PropNvl(m.loSettings, 'lApplyFilter', .F., .T.)		&&controlsource
			.lClearApplyFilter = PropNvl(m.loSettingsDefault, 'lClearApplyFilter', .T., .T.)
			.cFilter		   = PropNvl(m.loSettings, 'cFilter', '', .T.)
		
		*.cSortFields = PropNvl(loSettings, 'cSortFields', '') && This one has been deprecated. See cSortField.
			If Pemstatus(m.loSettings, 'cSortFields', 5)
				.cSortField = Getwordnum(m.loSettings.cSortFields, 1, ',')
			Else
				.cSortField = PropNvl(m.loSettings, 'cSortField')
			Endif
		
			.cSortOrder			 = PropNvl(m.loSettings, 'cSortOrder', '')
			.cSortFieldSecondary = PropNvl(m.loSettings, 'cSortFieldSecondary', '')
			.cSortOrderSecondary = PropNvl(m.loSettings, 'cSortOrderSecondary', '')
			.cSortFieldTertiary	 = PropNvl(m.loSettings, 'cSortFieldTertiary', '')
			.cSortOrderTertiary	 = PropNvl(m.loSettings, 'cSortOrderSecondary', '')
		
			.nReplaceRisk		 = Evl(PropNvl(m.loSettingsDefault, 'nReplaceRisk', 1), 1)
			.cReplaceUDFFilename = PropNvl(m.loSettings, 'cReplaceUdfFilename', '')
		
			.nDropDownDisplayCount = PropNvl(m.loSettingsDefault, 'nDropDownDisplayCount', 20, .T.)
			.nDropDownMaxMRU	   = PropNvl(m.loSettingsDefault, 'nDropDownMaxMRU', 7, .T.)
		
			.lWarnWholeWord     = PropNvl(m.loSettingsDefault, 'lWarnWholeWord', .F., .T.)
			.lSaveSearchResults = PropNvl(m.loSettingsDefault, 'lSaveSearchResults', .T., .T.)
			.lCodeOnly          = PropNvl(m.loSettings, 'lCodeOnly', .F., .T.)
			.lCommentsOnly      = PropNvl(m.loSettings, 'lCommentsOnly', .F., .T.)
		
			.nPreviousSessionTreeviewindex = PropNvl(m.loSettings, 'nSelectedTreeviewNode', 1, .T.)
			.lOnlyFirstMatchInStatement    = PropNvl(m.loSettings, 'lOnlyFirstMatchInStatement', .F., .T.)
		
			.nCodeWindowPosition = 	PropNvl(m.loSettings, 'CodeWindowPosition', 1, .T.)
		
			.nJanitorSearchHistoryDays	= PropNvl(m.loSettingsDefault, 'nJanitorSearchHistoryDays ', 10000, .T.)
			.nJanitorReplaceHistoryDays	= PropNvl(m.loSettingsDefault, 'nJanitorReplaceHistoryDays', 10000, .T.)
			.lRunJanitorDaily			= PropNvl(m.loSettingsDefault, 'lRunJanitorDaily', .F., .T.)
			.nTabsToSpaces				= PropNvl(m.loSettingsDefault, 'nTabsToSpaces', 0, .T.)
		
		* Dates are stored as datetime!
			.dLastJanitorRunDate		= Ttod(PropNvl(m.loSettingsDefault, 'dLastJanitorRunDate', Dtot(Date() - 1), .T.))
		
		*SF 20221017
		*new settings
		* loSettingsDefault is the same as loSettings, if no previous search is loaded
			.nContainerFrameColour          = PropNvl(m.loSettingsDefault, "nContainerFrameColour"         ,.nContainerFrameColour         ,.T.)
			.nFileSCXDynamicForeColour      = PropNvl(m.loSettingsDefault, "nFileSCXDynamicForeColour"     ,.nFileSCXDynamicForeColour     ,.T.)
			.nFileVCXDynamicForeColour      = PropNvl(m.loSettingsDefault, "nFileVCXDynamicForeColour"     ,.nFileVCXDynamicForeColour     ,.T.)
			.nFilePRGDynamicForeColour      = PropNvl(m.loSettingsDefault, "nFilePRGDynamicForeColour"     ,.nFilePRGDynamicForeColour     ,.T.)
			.nFileDefaultDynamicForeColour  = PropNvl(m.loSettingsDefault, "nFileDefaultDynamicForeColour" ,.nFileDefaultDynamicForeColour ,.T.)
			.nReplacedDynamicBackColour     = PropNvl(m.loSettingsDefault, "nReplacedDynamicBackColour"    ,.nReplacedDynamicBackColour    ,.T.)
			.nRiskExceededDynamicBackColour = PropNvl(m.loSettingsDefault, "nRiskExceededDynamicBackColour",.nRiskExceededDynamicBackColour,.T.)
			.nRisk2DynamicBackColour        = PropNvl(m.loSettingsDefault, "nRisk2DynamicBackColour"       ,.nRisk2DynamicBackColour       ,.T.)
			.nRisk3DynamicBackColour        = PropNvl(m.loSettingsDefault, "nRisk3DynamicBackColour"       ,.nRisk3DynamicBackColour       ,.T.)
			.nTreeSearchColour              = PropNvl(m.loSettingsDefault, "nTreeSearchColour"             ,.nTreeSearchColour             ,.T.)
			.nTreeUpdateColour              = PropNvl(m.loSettingsDefault, "nTreeUpdateColour"             ,.nTreeUpdateColour             ,.T.)
			.nCSS_tr_even_Colour            = PropNvl(m.loSettingsDefault, "nCSS_tr_even_Colour"           ,.nCSS_tr_even_Colour           ,.T.)
			.nCSS_tr_odd_Colour             = PropNvl(m.loSettingsDefault, "nCSS_tr_odd_Colour"            ,.nCSS_tr_odd_Colour            ,.T.)
			.lMoveNewCodeToTopLeft          = PropNvl(m.loSettingsDefault, "lMoveNewCodeToTopLeft"         ,.lMoveNewCodeToTopLeft         ,.T.)
		*/SF 20221017
		Endwith
		
		*-- These fields were removed in version 4.3.015 and 4.3.041, so if they are used in the SortOrder, we have to reset it
		If Inlist(Lower(Thisform.cSortFields), 'objectclass', 'objectbaseclass', 'objectname', 'containingclassbaseclass')
			Thisform.cSortFields = ''
			Thisform.cSortOrder	 = ''
		Endif
		
		This.oGrid.FontSize	 = Thisform.nGridFontSize
		This.oTree.Font.Size = Thisform.nTreeViewFontSize
		
		This.comboSearchExpressionHistory.DisplayCount = Thisform.nDropDownDisplayCount
		This.comboSearchExpressionHistory.nMaxMRU	   = This.nDropDownMaxMRU
		This.comboSearchExpressionHistory.LoadRows()
		
		This.comboSearchScopeHistory.DisplayCount = Thisform.nDropDownDisplayCount
		This.comboSearchScopeHistory.nMaxMRU	  = This.nDropDownMaxMRU
		This.comboSearchScopeHistory.LoadRows()
		
		*--- Restore Width, ColumnOrder, and Visible state to Grid columns ----------------
		lnX = 1
		
		For Each m.loControl In Thisform.oGrid.Columns
			loControl.Width		  = PropNvl(m.loSettings, m.loControl.Name + '_width', 100, .T.)
			loControl.ColumnOrder = PropNvl(m.loSettings, m.loControl.Name + '_order', m.lnX, .T.)
			loControl.Visible	  = PropNvl(m.loSettings, m.loControl.Name + '_visible', .T., .T.)
		*loControl.Header1.FontBold = PropNvl(loSettings, loControl.name + '_BoldHeader', .f., .t.)
			lnX = m.lnX + 1
		Endfor
		
		
		*SF 20221017
		*stored the settings to the wrong place, lets remove from oSearchOptions an put into this settings
		*
		
		*SF 20221015
		* --- colours used for showing informations ---
		* should be set in settings dialog
		This.ButtonContainer.Container1.BorderColor = Thisform.nContainerFrameColour
		This.ButtonContainer.Container2.BorderColor = Thisform.nContainerFrameColour
		This.ButtonContainer.Container3.BorderColor = Thisform.nContainerFrameColour
		
		This.Containerright.Container1.Container1.BorderColor = Thisform.nContainerFrameColour
		This.Containerright.Container1.Container2.BorderColor = Thisform.nContainerFrameColour
		
		This.Set_GridColour()
		*This.FormatGrid()
		
		#If .F. Then
		*Thisform.oSearchOptions.nOption
		
		*Hintergrundfarben Bordercolor
		**ButtonContainer.Container1	RGB(255,  0,  0)	->	 nContainerFrameColour
		**ButtonContainer.Container2	RGB(255,  0,  0)	->	 nContainerFrameColour
		**ButtonContainer.Container3	RGB(255,  0,  0)	->	 nContainerFrameColour
		
		**containerRight.Container1.Container1	RGB(255,  0,  0)	->	 nContainerFrameColour
		**-> schaltbar in containerRight.Container1.Container1.Refresh	RGB(255,  0,  0)/RGB(  0,  0,  0)
		**containerRight.Container1.Container2	RGB(255,  0,  0)	->	 nContainerFrameColour
		
		*containerRight.Container1.GridFiles.Init (DynamicForeColor)
		* -> set on change?
		**	lcSCXColor		RGB(  0,  0,128)	-> nFileSCXDynamicForeColour
		**	lcVCXColor		RGB(  0,128,  0)	-> nFileVCXDynamicForeColour
		**	lcPRGColor		RGB(255,  0,  0)	-> nFilePRGDynamicForeColour
		**	Default Color	RGB(  0,  0,  0)	-> nFileDefaultDynamicForeColour
		
		* containerRight.Container1.containerReplaceText BackColor	RGB(199,226,254) (ignored)
		
		**formatgrid -> loGrid.FindColumn('TrimmedReplaceLine')
		*lcDynamicBackColor = "ICase(replaced, RGB(149,249,147), replacerisk > Thisform.nReplaceRisk, Rgb(210,210,210), Rgb(255,255,255))"
		
		**replaced, RGB(149,249,147)								->	nReplacedDynamicBackColour
		**replacerisk > Thisform.nReplaceRisk, Rgb(210,210,210)	->	nRiskExceededDynamicBackColour
		
		**formatprocesscolumn
			lcReplaceColumnDynamicBackgroundColor = "ICase(replacerisk = 2, RGB(255,255,128), replacerisk = 3 and Thisform.nReplaceRisk = 3, Rgb(255,192,0), Rgb(255,255,255))"
		**replacerisk = 2, RGB(255,255,128),								->	nRisk2DynamicBackColour
		**replacerisk = 3 and Thisform.nReplaceRisk = 3, Rgb(255,192,0),	->	nRisk3DynamicBackColour
		*Rgb(255,255,255))"
		
		
		*PopulateTreeview
		**from DoSearch 32768 RGB(0,128,0)		->	nTreeSearchColour
		**from updatetreeview 128 RGB(128,0,0)	->	nTreeUpdateColour
		
		**viewreport (script)
		**	   $("tr:even").css("background-color", "#F4F4A8");		RGB(0xa8,0xfa,0xf4)	->	nCSS_tr_even_Colour
		**	   $("tr:odd").css("background-color", "#EFF1D1");})	RGB(0xD1,0xF1,0xEF)	->	nCSS_tr_odd_Colour
		
		**EditFromCurrentRow
		
		#Endif &&.F.
		* --- /colours used for showing informations ---
		
	ENDPROC

	PROCEDURE loadreplaceline
		Local lcCursor, lcMatchLine, llReplaced
		
		lcCursor = This.cSearchResultsAlias
		
		lcMatchLine = &lcCursor..matchline
		lnMatchLength = &lcCursor..matchlen
		llReplaced = &lcCursor..replaced
		
		If !llReplaced
			Thisform.cReplaceLine = Left(lcMatchLine, lnMatchLength)
		Else
			Thisform.cReplaceLine = ''
		Endif
		
		
		 
	ENDPROC

	PROCEDURE loadsavedresults
		Lparameters tcSavedFolder
		
		Local laInfo[1], lcDbc, lcDbcAndTable, lcDbf, lcFolder, lcInfoFile, lcName, lcRoot, lcScope
		Local lcSearchEngineResultsAlias, lcSearchEnginerOptionsFile, lcSearchExpression, loSearchEngine
		Local loSearchOptions
		
		loSearchEngine = Thisform.oSearchEngine
		lcSearchEngineResultsAlias = Thisform.oSearchEngine.cSearchResultsAlias
		
		lcName = Thisform.cSavedSearchResultsFolder
		
		If !Empty(tcSavedFolder)
			If Atc("\", tcSavedFolder) > 0
				lcFolder = tcSavedFolder
			Else
				lcName = Thisform.cSavedSearchResultsFolder
		*SF 20221018 -> local storage
		*		lcRoot = Home(7) + lcName
				lcRoot = This.cCR_StoreLocal + lcName
		*/SF 20221018 -> local storage
				lcFolder = Addbs(lcRoot) + tcSavedFolder
			Endif
		Else
			lcFolder = Thisform.GetLastSavedResultsFolder()
		Endif
		
		If Empty(lcFolder)
			Return .f.
		Endif
		
		lcDbc = lcFolder + lcName + ".dbc"
		lcDbf =  lcFolder + lcName + ".dbf"
		lcDbcAndTable = lcDbc + "!" + lcName
		lcInfoFile  = lcFolder + lcName + ".txt"
		
		If File(lcDbc) and File(lcDbf) and File(lcInfoFile)
			Try
				lcCurrentDatabase = Set("Database")
				Select * from (lcDbcAndTable) Order By filename, class, name, methodname Into Cursor (lcSearchEngineResultsAlias) ReadWrite
				ALines(laInfo, FileToStr(lcInfoFile))
				*lcSearchExpression = laInfo[2]
				lcScope = laInfo[3]
				*Thisform.editSearch.Value = lcSearchExpression
				Thisform.comboSearchScopeHistory.SaveSearchScope(lcScope)
				*Thisform.comboSearchScopeHistory.Value = lcScope
				Set Database To (lcDbc)
				Close Database
				Set Database To (lcCurrentDatabase)
			Catch
			EndTry
		Endif 
		
		*-- Load Search Engine Options for saved search results
		loSearchOptions = loSearchEngine.oSearchOptions
		lcSearchEnginerOptionsFile = Addbs(lcFolder) + "\" + This.cSearchOptionsXMLFile
		loSearchEngine.LoadOptions(lcSearchEnginerOptionsFile) && Load search settings from previous session
		Thisform.nOriginalSearchScope = loSearchOptions.nSearchScope 
		
		*-- Load Form Settings for saved search results
		*** JRN 10/15/2015 : REMOVED   This.LoadFormSettings(.t., lcFolder) && Form size and position, as well as a few custom properties that are store on the form
		
		loSearchEngine.nMatchLines = Reccount(lcSearchEngineResultsAlias)
		
	ENDPROC

	PROCEDURE lockwindow
		Lparameters tlLock, tnHWnd
		
		* From Doug Hennig's Win32API session at SW Fox 2012
		
		Local lnHWnd
		
		Declare Integer LockWindowUpdate In Win32API		;
			Integer nHandle
		
		Do Case
			Case Not tlLock
				lnHWnd = 0
			Case Pcount() = 1
				Declare Integer GetDesktopWindow In Win32API
				lnHWnd = GetDesktopWindow()
			Otherwise
				lnHWnd = tnHWnd
		Endcase
		
		LockWindowUpdate(lnHWnd)
		
		
	ENDPROC

	PROCEDURE LostFocus
		*Activate Screen
		
	ENDPROC

	PROCEDURE lreplacemode_assign
		Lparameters tlReplaceMode
		
		llEnteringReplaceMode = tlReplaceMode = .t. and thisform.lReplaceMode = .f.
		
		*-- Cannot enable here if this feature is not enabled in Options
		If Thisform.oSearchEngine.oSearchOptions.lEnableReplaceMode = .f.
			Thisform.lReplaceMode = .f.
		Else
			Thisform.lReplaceMode = tlReplaceMode
		Endif
		
		If Thisform.nReplaceMode = 0 
			Thisform.nReplaceMode = 1
		Endif
		
		Thisform.AdjustFormForReplacePanel(tlReplaceMode)
		Thisform.FormatGridForReplaceMode()
		
		Thisform.Refresh()
		
		If llEnteringReplaceMode and thisform.nReplaceMode = 3
			Do Form gofish_advaccedreplacehelp With Thisform
		EndIf
		
		
		
	ENDPROC

	PROCEDURE mhelpnotes
	ENDPROC

	PROCEDURE navigatetomasterrecord
		Lparameters tnId
		
		Local lcFullSearchResults, lcMessage
		
		lcFullSearchResults = Thisform.oSearchEngine.cSearchResultsAlias
		
		Select (lcFullSearchResults)
		Locate for id = tnId
		
		If !Found()
			lcMessage = 'Error locating selected record in master table. Id = [' + Alltrim(Str(tnId)) + ']'
			MessageBox(lcMessage, 0, 'GoFish Error')
			Return .f.
		EndIf
		  
	ENDPROC

	PROCEDURE ncodewindowposition_assign
		Lparameters tnCodeWindowPosition
		Local llToggleLockScreen, lnHeight, lnSplitterLeft, lnSplitterTop, lnWidth
		This.nCodeWindowPosition = m.tnCodeWindowPosition
		
		llToggleLockScreen = Thisform.LockScreen = .F.
		If m.llToggleLockScreen
			Thisform.LockScreen = .T.
		Endif
		
		With This.Containerright
			lnWidth	 = .Width
			lnHeight = .Height
		
			.Container1.Visible	= .T.
			.Splitter1.Visible	= .T.
			.Splitter3.Visible	= .T.
		
			Do Case
				Case m.tnCodeWindowPosition = 1
					With .Splitter1
						lnSplitterTop = .Top
						.Visible	  = .T.
					Endwith
					With .Container1
						.Anchor	= 0
						.Top	= 0
						.Left	= 0
						.Width	= m.lnWidth
						.Height	= m.lnSplitterTop
						.Anchor	= 10
					Endwith
		
					With .Container2
						.Anchor	= 0
						.Top	= m.lnSplitterTop + 10
						.Left	= 0
						.Width	= m.lnWidth
						.Height	= Max(10, m.lnHeight - .Top)
						.Anchor	= 15
					Endwith
					.Splitter3.Visible = .F.
		
				Case m.tnCodeWindowPosition = 2
					With .Splitter3
						lnSplitterLeft = .Left
						.cObject1Name  = 'Container1'
						.cObject2Name  = 'Container2'
						.Visible	   = .T.
					Endwith
					With .Container1
						.Anchor	= 0
						.Top	= 0
						.Left	= 0
						.Width	= m.lnSplitterLeft
						.Height	= m.lnHeight
						.Anchor	= 5
					Endwith
		
					With .Container2
						.Anchor	= 0
						.Top	= 0
						.Left	= m.lnSplitterLeft + 10
						.Width	= Max(10, m.lnWidth - .Left)
						.Height	= m.lnHeight
						.Anchor	= 15
					Endwith
					.Splitter1.Visible = .F.
		
				Case m.tnCodeWindowPosition = 3
					With .Splitter3
						lnSplitterLeft = .Left
						.cObject1Name  = 'Container2'
						.cObject2Name  = 'Container1'
						.Visible	   = .T.
					Endwith
					With .Container2
						.Anchor	= 0
						.Top	= 0
						.Left	= 0
						.Width	= m.lnSplitterLeft
						.Height	= m.lnHeight
						.Anchor	= 5
					Endwith
		
					With .Container1
						.Anchor	= 0
						.Top	= 0
						.Left	= m.lnSplitterLeft + 10
						.Width	= Max(10, m.lnWidth - .Left)
						.Height	= m.lnHeight
						.Anchor	= 15
					Endwith
					.Splitter1.Visible = .F.
		
		
				Otherwise
		
			Endcase
		
		Endwith
		
		Thisform.Refresh()
		
		If m.llToggleLockScreen
			Thisform.LockScreen = .F.
		Endif
		
		Thisform.oBrowser.SetFocus()
		
		
	ENDPROC

	PROCEDURE nreplacemode_assign
		Lparameters tnReplaceMode
		
		Local loReplaceColumn
		
		If thisform.lInit and tnReplaceMode = 3 and tnReplaceMode <> Thisform.nReplaceMode
			Do Form gofish_advaccedreplacehelp With Thisform
		Endif
		
		This.nReplaceMode = tnReplaceMode
		Thisform.oSearchEngine.nReplaceMode = tnReplaceMode
		
		Thisform.AdjustFormForReplacePanel()
		
		*-- Need to refresh the grid with new Replace Line values from the selected mode
		If This.lInit = .T. And !Thisform.lSearching
			Thisform.DoReplace(.T.) && .t. means do a "Preview" Replace
		Endif
		
		*-- Adjust header caption of Replace column
		loColumn = This.oGrid.FindColumn('Process')
		loColumn.Header1.Caption = Iif(Thisform.nReplaceMode = 2, 'Replaced', 'Replace')
		
	ENDPROC

	PROCEDURE populatetreeview
		Lparameters tcMessage, tnColor
		
		Local laOthers[1], lcAlias, lcClass, lcExt, lcFileName, lcFilePath, lcFilter, lcRoot, lcWhere
		Local lcWhere2, lnColor, lnSelect, loClassLibsNode, loClassNode, loDbfNode, loFormsNode, loNode
		Local loOtherNode, loPJXNode, loPrgNode, loReportsNode, loTreeView, loItemNode
		
		lnSelect = Select()
		
		*	Thisform.LockWindow(.t.)
		
		lcAlias				 = This.cSearchResultsAlias
		loTreeView			 = Thisform.containerLeft.oTreeView
		loTreeView.LabelEdit = 1
		
		lcRoot	= Evl(m.tcMessage, 'Results')
		lnColor	= Evl(m.tnColor, 0)
		
		loTreeView.Visible = .F.
		
		With m.loTreeView.Nodes
		
			.Clear()
		
			*-- Add topmost 'Results' node  ----------------------------
			loNode				 = .Add(, , 'Results', m.lcRoot, ,)
			loNode.Expanded		 = .T.
			loNode.Bold			 = (Reccount(m.lcAlias) > 0) Or Pcount() > 0
			loTreeView.LineStyle = Iif(Eof(m.lcAlias), 0, 1)
		
			loNode.ForeColor = m.lnColor
		
			lcFilter = Filter(m.lcAlias)
			lcWhere	 = Iif(Not Empty(m.lcFilter), 'Where ' + m.lcFilter, '')
		
			Select *  From (m.lcAlias) &lcWhere Order By FileName, FilePath Into Cursor 'Files'
		
			*-- Create main category nodes if present in the filtered results -
			* ================================================================================
			* new code for classes
			Locate For Not Empty(Class)
			If Found()
				loClassNode	= .Add('Results', 4, 'Root_Classes', 'Classes', ,)
				lnSelect	= Select()
				lcWhere2	= Iif(Not Empty(m.lcWhere), m.lcWhere + ' and', 'Where') + [ InList(filetype, 'PRG', 'VCX') and Not Empty(Class)] 
		
				Select  Lower(Class)       As  Class,			;
						FileName,								;
						Lower(FilePath)    As  FilePath,		;
						Min(Id)            As  Id				;
					From Files									;
						&lcWhere2								;
					Group By Class, FileName, FilePath			;
					Order By 1, 2, 3							; && 2021-03-21 Change submmited by JRN
					Into Cursor crsr_Classes Readwrite
		
				Scan
					lcClass	   = Class
					lcFileName = FileName
					Select * From crsr_Classes Where Class = m.lcClass And FileName # m.lcFileName Into Array laOthers
					If _Tally # 0
						loItemNode = .Add('Root_Classes', 4, 'Class_' + Alltrim(Str(Id)) + '_X', Trim(Class) + ' (' + Justfname(Trim(FileName)) + ')', ,)
					Else
						loItemNode = .Add('Root_Classes', 4, 'Class_' + Alltrim(Str(Id)) + '_X', Trim(Class), ,)
					EndIf
					
					loTag = CreateObject('Empty')
					AddProperty(loTag, 'Filename', Trim(FileName))
					AddProperty(loTag, 'FilePath', Trim(FilePath))
					AddProperty(loTag, 'Class', Trim(Class))
					loItemNode.tag = loTag
					
				Endscan
				loClassNode.Bold	 = .T.
				loClassNode.Expanded = .T.
				Select(m.lnSelect)
			Endif
			* ================================================================================
		
			Locate For Upper(FileType) = 'VCX'
			If Found()
				loClassLibsNode			 = .Add('Results', 4, 'Root_VCX', 'ClassLibs', ,)
				loClassLibsNode.Expanded = .T.
			Endif
		
			Locate For Upper(FileType) = 'SCX'
			If Found()
				loFormsNode			 = .Add('Results', 4, 'Root_SCX', 'Forms', ,)
				loFormsNode.Expanded = .T.
			Endif
		
			Locate For Upper(FileType) = 'PRG'
			If Found()
				loPrgNode		   = .Add('Results', 4, 'Root_PRG', 'Programs', ,)
				loPrgNode.Expanded = .T.
			Endif
		
			Locate For Upper(FileType) = 'FRX'
			If Found()
				loReportsNode		   = .Add('Results', 4, 'Root_FRX', 'Reports', ,)
				loReportsNode.Expanded = .T.
			Endif
		
			Locate For InList(Upper(FileType), 'MNX', 'MPR')
			If Found()
				loReportsNode		   = .Add('Results', 4, 'Root_MPX', 'Menus', ,)
				loReportsNode.Expanded = .T.
			Endif
		
			Locate For Upper(FileType) = 'DBF'
			If Found()
				loDbfNode		   = .Add('Results', 4, 'Root_DBF', 'Tables', ,)
				loDbfNode.Expanded = .T.
			Endif
		
			Locate For Upper(FileType) = 'PJX'
			If Found()
				loPJXNode		   = .Add('Results', 4, 'Root_PJX', 'Projects', ,)
				loPJXNode.Expanded = .T.
			Endif
		
			Locate For Not (Upper(FileType) $ ' SCX VCX PRG FRX DBF PJX MNX MPR ')
			If Found()
				loOtherNode			 = .Add('Results', 4, 'Root_OTHER', 'Other', ,)
				loOtherNode.Expanded = .T.
			Endif
		
			*-- Now populate each category node -------------------------------
			Scan
				lcFilePath = Alltrim(Upper(FilePath))
				lcExt	   = Upper(Justext(FilePath))
		
				Do Case
					Case '_' + m.lcExt + '_' $ '_SCX_VCX_PRG_FRX_DBF_PJX_'
						lcRoot = 'Root_' + m.lcExt
					Case '_' + m.lcExt + '_' $ '_MNX_MPR_'
						lcRoot = 'Root_MPX'
					Otherwise 
						lcRoot = 'Root_OTHER'
				Endcase
		
				loNode			   = .Add(m.lcRoot, 4, 'File_' + Alltrim(Str(Id)) + '_' + Alltrim(FilePath), Lower(Justfname(m.lcFilePath)), ,)
				loNode.Parent.Bold = .T.
				loNode.Expanded	   = .T.
		
				If m.lcExt = 'VCX'
					loNode.Expanded = .F.
					Thisform.AddClassesToTreeView(m.loNode, FilePath)
				Endif
		
				Locate For Alltrim(Upper(FilePath)) # m.lcFilePath Rest && Jump To next FileName
		
				If Not Eof()
					Skip - 1
				Endif
		
			Endscan
		
		Endwith
		
		loTreeView.Visible = .T.
		*	Thisform.LockWindow(.f.)
		
		m.loTreeView.Refresh()
		
		Select (m.lnSelect)
	ENDPROC

	PROCEDURE Refresh
		Thisform.nBrowserZoom = Thisform.containerRight.container2.containerWebControl.nZoom
		
		DoDefault()
	ENDPROC

	PROCEDURE replace
		*--- Make sure at least one record is selected before calling Replace() method
		Local laSelectedCount[1]
		
		Select Count(id) from (thisform.cSearchResultsAlias);
		 Where process = .t. and replaced = .f.;
		 Into Array laSelectedCount
		 
		If laSelectedCount = 0 
			MessageBox('No eligible records are selected for replace.', 0, 'Notice:')
			Return .f.
		EndIf
		
		Thisform.DoReplace(.F., laSelectedCount)
		
		If Thisform.oSearchEngine.oSearchOptions.lShowErrorMessages
			ThisForm.ShowReplaceErrors()
		EndIf 
		
	ENDPROC

	PROCEDURE replaceline
		Local lcGFSECursor, lcReplaceLine, llResult, llReturn, lnId
		
		If Evaluate(Thisform.cSearchResultsAlias + '.replaced') or !ThisForm.ConfirmReplace()
			Return .f.
		Endif
		
		lnId = Evaluate(Thisform.cSearchResultsAlias + '.id')
		lcGFSECursor = Thisform.oSearchEngine.cSearchResultsAlias
		lcReplaceLine = Thisform.cReplaceLine
		
		Thisform.oSearchEngine.oSearchOptions.lPreviewReplace = .f.
		
		llResult = Thisform.oSearchEngine.ReplaceLine(lcGFSECursor, lnId, lcReplaceLine)
		
		If llResult = .t.
			Thisform.UpdateFormAfteReplace(lnId)
			llReturn = .t. 
		Else	
			Thisform.containerRight.Container1.containerReplaceText.cmdReplaceErrors.Refresh() && To make sure the icon is visible before we show dialog box
			MessageBox('Error performing Replace. View Error list for more details.', 0, 'Error:')
			llReturn = .f.
		Endif
		
		If Thisform.oSearchEngine.oSearchOptions.lShowErrorMessages
			ThisForm.ShowReplaceErrors()
		EndIf 
		
		Return llReturn
		
		
		
		
		
		
		
		
		
		               
	ENDPROC

	PROCEDURE Resize
		Local lnIncrement, lnThisWidth
		DoDefault()
		
		lnThisWidth	= Min(Max(This.Width, 800), 1400)
		lnIncrement	= m.lnThisWidth - 1000
		
		This.ButtonContainer.Left							= m.lnIncrement + 422 + 48
		This.editSearch.Width								= m.lnIncrement + 355 + 48
		This.comboSearchExpressionHistory.Width				= m.lnIncrement + 372 + 48
		This.comboSearchScopeHistory.Width					= m.lnIncrement + 349 + 48
		This.comboSearchExpressionHistoryDropDownArrow.Left	= m.lnIncrement + 400 + 48
		
		
	ENDPROC

	PROCEDURE resizecodepage
		Local lnBrowserAnchor, lnButtonContainerAnchor, loContainer
		
		loContainer = This.Containerright.Container2.containerWebControl
		With m.loContainer
			lnButtonContainerAnchor	= .ButtonContainer.Anchor
			lnBrowserAnchor			= .oBrowser.Anchor
		
			.ButtonContainer.Anchor	= 0
			.oBrowser.Anchor		= 0
		
			If m.loContainer.Width > 800
				.ButtonContainer.Top   = 0
				If Thisform.nCodeWindowPosition = 1
					.ButtonContainer.Left = 28 + .cmdCompressCodeview.Left
				Else
					.ButtonContainer.Left = 28 + .cmdMaximizeCodeview.Left
				Endif
				.ButtonContainer.Width = .Width - .ButtonContainer.Left
				.oBrowser.Top		   = 23
			Else
				.ButtonContainer.Top   = 23
				.ButtonContainer.Left  = 0
				.ButtonContainer.Width = .Width
				.oBrowser.Top		   = 46
			Endif
			.oBrowser.Height = Max(.Height - .oBrowser.Top - 1, 60)
			.oBrowser.Width	 = Max(.Width - 6, 60)
		
			.ButtonContainer.Anchor	= m.lnButtonContainerAnchor
			.oBrowser.Anchor		= m.lnBrowserAnchor
		
			.ButtonContainer.Refresh()
		
		Endwith
		
	ENDPROC

	PROCEDURE restoredefaultdir
		Cd (This.cInitialDefaultDir)
		
	ENDPROC

	PROCEDURE restorelastsearch
		Local lcFolder, lnResults
		
		lcFolder = Thisform.GetLastSavedResultsFolder()
		
		If !Empty(lcFolder)
			Thisform.RestorePreviousSearch(lcFolder)
		Endif
		
		
		 
	ENDPROC

	PROCEDURE restoreprevioussearch
		Lparameters tcSavedFolder
		
		Local lLReturn, llToggleLockScreen
		
		Thisform.oSearchEngine.oProgressBar = Thisform.ProgressBar
		Thisform.ProgressBar.Start(100, 'Loading search results...')
		Thisform.ProgressBar.nValue = 25
		Thisform.Refresh()
		
		Thisform.ClearSearchResultsCursor() && Go ahead and blank out the cursor so the grid will be empty during the search
		Thisform.ClearTreeView()
		
		llToggleLockScreen = Thisform.LockScreen = .F.
		If m.llToggleLockScreen
			Thisform.LockScreen = .T.
		Endif
		
		lLReturn = This.LoadSavedResults(m.tcSavedFolder)
		
		If Not m.lLReturn
			If m.llToggleLockScreen
				Thisform.LockScreen = .F.
			Endif
			Return
		Endif
		
		Thisform.Search(.T.)
		
		If m.llToggleLockScreen
			Thisform.LockScreen = .F.
		Endif
		
		Thisform.ProgressBar.Stop()
		Thisform.Containerright.Container2.Visible = .T.
		
	ENDPROC

	PROCEDURE restoresavedsearch
		Local lcFolder, lcRoot
		
		*SF 20221018 -> local storage
		*lcRoot = Home(7) + Thisform.cSavedSearchResultsFolder
		lcRoot = This.cCR_StoreLocal + Thisform.cSavedSearchResultsFolder
		*/SF 20221018 -> local storage
		
		lcFolder = GetDir(lcRoot, 'Select previous search to restore:', 'Select previous search to restore:', 64)
		
		If !Empty(lcFolder)
			Thisform.RestorePreviousSearch(lcFolder)
		Endif
		
			
			 
	ENDPROC

	PROCEDURE restoresearchengineoptions
	ENDPROC

	PROCEDURE restoresearchfromhistory
		Local lcFolder, lnResults
		
		lcFolder = ""
		lnResults = Thisform.BuildSearchHistoryCursor()
		
		If lnResults = 0
			MessageBox("No search history results to restore. Ensure option is enabled.", 0, "GoFish")
			Return 
		Else
			Do Form GoFish_SearchHistory With Thisform to lcFolder
		Endif
		
		If !Empty(lcFolder)
			Thisform.RestorePreviousSearch(lcFolder)
		Endif
		
		
		 
	ENDPROC

	PROCEDURE restoretreeviewonstartup
		Local loNode, loTreeView
		
		loTreeView = Thisform.containerLeft.oTreeView
		
		If Thisform.nPreviousSessionTreeviewIndex > loTreeView.Nodes.Count 
			Return
		Endif
		
		loNode = loTreeView.Nodes.Item[Thisform.nPreviousSessionTreeviewIndex]
		loNode.EnsureVisible()
		loTreeView.SelectedItem = loNode
		loTreeView.NodeClick(loNode)
		
	ENDPROC

	PROCEDURE runjanitor
		Wait 'GF Janitor' Window at 20, 30 Nowait
		
		This.RunJanitorForReplaceHistory()
		
		This.RunJanitorForSearchHistory()
		
		
	ENDPROC

	PROCEDURE runjanitorforreplacehistory
		*SF 20221018 -> local storage
		*#Define ccBACKUPFOLDER Addbs(Home(7) + 'GoFishBackups')
		LOCAL ccBACKUPFOLDER
		ccBACKUPFOLDER = Addbs(This.cCR_StoreLocal + 'GoFishBackups')
		*/SF 20221018 -> local storage
		
		Local laDirs[1], lcDetail, lcFile, lcHistory, ldCutOff, llFailed, lnFolderCount, lnI
		*SF 20221018 -> local storage
		*lcHistory = Addbs(Home(7)) + 'GF_Replace_History.dbf'
		*lcDetail  = Addbs(Home(7)) + 'GF_Replace_DetailV5.dbf'
		lcHistory = This.cCR_StoreLocal + 'GF_Replace_History.dbf'
		lcDetail  = This.cCR_StoreLocal + 'GF_Replace_DetailV5.dbf'
		*/SF 20221018 -> local storage
		
		Try
			Use (m.lcHistory) Exclusive Alias History In 0
			Use (m.lcDetail) Exclusive Alias Detail In 0
			llFailed = .F.
		Catch
			llFailed = .T.
		Endtry
		
		If m.llFailed
			Return
		Endif
		
		ldCutOff = Date() - Thisform.nJanitorReplaceHistoryDays
		
		* --------------------------------------------------------------------------------
		Select History
		Delete For Date_Time < m.ldCutOff
		If _Tally > 0
			Pack
		Endif
		
		* --------------------------------------------------------------------------------
		Select Detail
		If Not Empty(Field('batch_id'))
			Delete From Detail Where Not HistoryFK In (Select Id From History)
			If _Tally > 0
				Pack
			Endif
		Endif
		
		* --------------------------------------------------------------------------------
		lnFolderCount = Adir(laDirs, ccBACKUPFOLDER  + '*', 'D', 1)
		
		If Type('laDirs') $ 'UL'
			Return ''
		Endif
		
		Select History
		
		For lnI = 1 To m.lnFolderCount
			lcFile = m.laDirs[m.lnI, 1]
			If Left(m.lcFile, 1) # '.'
				Locate For Id = Val(m.lcFile)
				If Not Found()
					RemoveFolder(ccBACKUPFOLDER + m.lcFile)
				Endif
			Endif
		Endfor
		
		
		
	ENDPROC

	PROCEDURE runjanitorforsearchhistory
		Local laDirs[1], lcFile, lcName, lcRoot, ldCutOff, lnFolderCount, lnI
		
		lcName = Thisform.cSavedSearchResultsFolder
		*SF 20221018 -> local storage
		*lcRoot = Home(7) + m.lcName
		lcRoot = This.cCR_StoreLocal + m.lcName
		*/SF 20221018 -> local storage
		
		lnFolderCount = Adir(laDirs, Addbs(m.lcRoot) + '*', 'D', 1)
		
		If Type('laDirs') $ 'UL'
			Return ''
		Endif
		
		ldCutOff = Date() - Thisform.nJanitorSearchHistoryDays
		
		For lnI = 1 To m.lnFolderCount
			lcFile = m.laDirs[m.lnI, 1]
			If Left(m.lcFile, 1) # '.' And m.laDirs[m.lnI, 3] < m.ldCutOff
				RemoveFolder(Addbs(m.lcRoot) + m.lcFile)
			Endif
		Endfor
	ENDPROC

	PROCEDURE saveformsettings
		Lparameters tcFolder, tlJustChange
		
		Local loMy As 'My' Of 'My.vcx'
		Local lcSettingsFile
		
		If Empty(tcFolder) Then
			lcSettingsFile = This.cUISettingsFile
		
		Else  &&EMPTY(tcFolder)
			lcSettingsFile = Addbs(Evl(tcFolder, This.cCR_StoreLocal)) + Justfname(This.cUISettingsFile)
		
		Endif &&EMPTY(tcFolder)
		
		loMy = Newobject('My', 'My.vcx')
		
		loSettings = loMy.Settings
		With loSettings
		
			If m.tlJustChange And File(m.lcSettingsFile) Then
		*just store this flag to the global settings
				.Load(m.lcSettingsFile)
				.Add("lCR_Allow"         ,This.lCR_Allow)
				.Add("lCR_Local"         ,This.lCR_Local)
				.Add("lCR_Local_Default" ,This.lCR_Local_Default)
		
			Else  &&m.tlJustChange AND FILE(m.lcSettingsFile)
		
		*-- Form Size and Position -----------------------------
				.Add('FormTop',    This.Top)
				.Add('FormLeft',   This.Left)
				.Add('FormHeight', This.Height)
				.Add('FormWidth',  This.Width)
				.Add('Splitter1Position', This.containerRight.splitter1.Top)
				.Add('Splitter2Position', This.splitter2.Left)
				.Add('Splitter3Position', This.containerRight.splitter3.Left)
				.Add('CodeWindowPosition', This.nCodeWindowPosition)
		
		*SF 20221017
		*new settings
				.Add("nContainerFrameColour"         ,This.nContainerFrameColour         )
				.Add("nFileSCXDynamicForeColour"     ,This.nFileSCXDynamicForeColour     )
				.Add("nFileVCXDynamicForeColour"     ,This.nFileVCXDynamicForeColour     )
				.Add("nFilePRGDynamicForeColour"     ,This.nFilePRGDynamicForeColour     )
				.Add("nFileDefaultDynamicForeColour" ,This.nFileDefaultDynamicForeColour )
				.Add("nReplacedDynamicBackColour"    ,This.nReplacedDynamicBackColour    )
				.Add("nRiskExceededDynamicBackColour",This.nRiskExceededDynamicBackColour)
				.Add("nRisk2DynamicBackColour"       ,This.nRisk2DynamicBackColour       )
				.Add("nRisk3DynamicBackColour"       ,This.nRisk3DynamicBackColour       )
				.Add("nTreeSearchColour"             ,This.nTreeSearchColour             )
				.Add("nTreeUpdateColour"             ,This.nTreeUpdateColour             )
				.Add("nCSS_tr_even_Colour"           ,This.nCSS_tr_even_Colour           )
				.Add("nCSS_tr_odd_Colour"            ,This.nCSS_tr_odd_Colour            )
				.Add("lMoveNewCodeToTopLeft"         ,This.lMoveNewCodeToTopLeft         )
		*globals
				.Add("lCR_Allow"                     ,This.lCR_Allow                     )
				.Add("lCR_Local"                     ,This.lCR_Local                     )
				.Add("lCR_Local_Default"             ,This.lCR_Local_Default             )
		*/SF 20221017
		
		*-- Persist the docking information.
				.Add('nDockable', This.Dockable)
				If This.Dockable # 0
					.Add('lDocked', This.Docked)
		
					If This.Docked
						Adockstate (laDock)
						lnRow = Ascan (laDock, This.Caption, -1, -1, 1, 15)
						lcDockWindow = ''
						If lnRow > 0
							.Add('nDockPosition', laDock[lnRow, 3])
							If laDock[lnRow, 4] # _Screen.Caption And Not Empty (laDock[lnRow, 4])
								lcDockWindow = laDock[lnRow, 4]
							Else
								lnRowDocked = Ascan (laDock, This.Caption, -1, -1, 4, 15)
								If lnRowDocked > 0
									lcDockWindow = laDock[lnRowDocked, 1]
								Endif
							Endif
						Endif lnRow > 0
		
						.Add('cDockWindow', lcDockWindow)
					Endif
				Endif
		
		*--- Save other custom form properties that to restore next session ----------------
		*.Add('lIncludeSubDirectoriesCurrent', Thisform.lIncludeSubDirectoriesCurrent)
		*.Add('lIncludeSubDirectoriesBrowsed', Thisform.lIncludeSubDirectoriesBrowsed)
				.Add('nBowserZoom', Thisform.containerRight.container2.containerWebControl.nZoom)
				.Add('nSearchBoxFontSize', Thisform.nSearchBoxFontSize)
				.Add('nGridFontSize', Thisform.nGridFontSize)
				.Add('nTreeViewFontSize', Thisform.nTreeViewFontSize)
				.Add('lApplyFilter', Thisform.lApplyFilter)
				.Add('lClearApplyFilter', Thisform.lClearApplyFilter)
				.Add('cFilter', Thisform.cFilter)
				.Add('nReplaceRisk', Evl(Thisform.nReplaceRisk, 1))
				.Add('cReplaceUdfFilename', Thisform.cReplaceUDFFilename)
				.Add('nReplaceMode', Evl(Thisform.nReplaceMode, 1))
		
		*.Add('cSortFields', Thisform.cSortFields)&& This one has been deprecated. See cSortField.
				.Add('cSortField', Thisform.cSortField)
				.Add('cSortOrder', Thisform.cSortOrder)
				.Add('cSortFieldSecondary', Thisform.cSortFieldSecondary)
				.Add('cSortOrderSecondary', Thisform.cSortOrderSecondary)
				.Add('cSortFieldTertiary', Thisform.cSortFieldTertiary)
				.Add('cSortOrderTertiary', Thisform.cSortOrderTertiary)
		
				.Add('nDropDownDisplayCount', Thisform.nDropDownDisplayCount)
				.Add('nDropDownMaxMRU', Thisform.nDropDownMaxMRU)
				.Add('lWarnWholeWord', Thisform.lWarnWholeWord)
				.Add('lSaveSearchResults', Thisform.lSaveSearchResults)
				.Add('lCodeOnly', Thisform.lCodeOnly)
				.Add('lCommentsOnly', Thisform.lCommentsOnly)
		
				.Add('nJanitorSearchHistoryDays', Thisform.nJanitorSearchHistoryDays)
				.Add('nJanitorReplaceHistoryDays', Thisform.nJanitorReplaceHistoryDays)
				.Add('lRunJanitorDaily', Thisform.lRunJanitorDaily)
				.Add('dLastJanitorRunDate', Thisform.dLastJanitorRunDate)
				.Add('nTabsToSpaces', Thisform.nTabsToSpaces)
				.Add('lOnlyFirstMatchInStatement', Thisform.lOnlyFirstMatchInStatement)
				.Add('nBrowserZoom', Thisform.nBrowserZoom)
		
		*-- Grid Settings -----------------------------
				For Each loControl In Thisform.oGrid.Columns
					.Add(loControl.Name + '_width',    loControl.Width)
					.Add(loControl.Name + '_order',    loControl.ColumnOrder)
					.Add(loControl.Name + '_visible',  loControl.Visible)
		*.Add(loControl.Name + '_BoldHeader', loControl.Header1.FontBold)
				Endfor
		
				loTreeView = Thisform.containerLeft.oTreeView
				If Vartype(loTreeView.SelectedItem) = 'O'
					lnNodeIndex = loTreeView.SelectedItem.Index
				Else
					lnNodeIndex = 1
				Endif
		
				.Add('nSelectedTreeviewNode', lnNodeIndex)
				.Add('lRestorePreviousSearchResultsOnStartup', Thisform.lRestorePreviousSearchResultsOnStartup)
		
				.Add('lDesktop', Thisform.lDesktop)
		
		
		
			Endif &&m.tlJustChange AND FILE(m.lcSettingsFile)
			.Save(m.lcSettingsFile)
		Endwith
		
	ENDPROC

	PROCEDURE savesearchinfo
		Local lcDateTime, lcFileContents, lcFilename, lcFolder, lcScope, lcSearchExpression
		Local lnHours, lnResults
		
		lnHours = Set("Hours")
		Set Hours To 24
		lcDateTime = Ttoc(Datetime())
		Set Hours To &lnHours
		
		lcSearchExpression = Thisform.oSearchEngine.oSearchOptions.cSearchExpression
		lcScope = Alltrim(Lower(Thisform.comboSearchScopeHistory.text))
		lnResults = Reccount(Thisform.oSearchEngine.cSearchResultsAlias)
		
		lcFileContents =	lcDateTime + CRLF + ;
							lcSearchExpression + CRLF + ;
							lcScope + CRLF + ;
							Transform(lnResults)
		
		lcFolder = Thisform.GetLastSavedResultsFolder()
		lcFilename = lcFolder + Alltrim(Thisform.cSavedSearchResultsFolder) + ".txt"
		StrToFile(lcFileContents, lcFilename)   
	ENDPROC

	PROCEDURE savesearchresults
		Local llReturn, lnSelect
		Local lcSearchEngineResultsAlias
		Local lcTable, lcDBF
		
		lcSearchEngineResultsAlias = Thisform.oSearchEngine.cSearchResultsAlias
		
		*lcTable = JustStem(This.cSaveResultsDbc)
		lcName = Thisform.cSavedSearchResultsFolder
		
		lnSelect = Select()
		*SF 20221018 -> local storage
		*lcRoot = Home(7) + lcName
		lcRoot = This.cCR_StoreLocal + lcName
		*/SF 20221018 -> local storage
		
		*-- Create root folder of saved searches
		Try
			MkDir (lcRoot)
		Catch
		EndTry
		
		*-- Create a new subfolder for current search results
		Try
			lcFolder = Ttoc(Datetime(), 1)
			lcNewDir = Addbs(lcRoot) + lcFolder
			MkDir (lcNewDir)
		Catch
		EndTry
		
		lcCurrentDatabase = Set("Database")
		*- Create the DBC
		Try
			lcDbc = Addbs(lcNewDir) + lcName
			Create Database (lcDbc)
		Catch
		Endtry
		
		*-- Create the table to save the search results
		Try
			lcDBF = Addbs(lcNewDir) + lcName
			Select (lcSearchEngineResultsAlias)
			Copy To (lcDBF) Database (lcName)
		Catch
		Endtry
		
		Close Database
		Set Database To (lcCurrentDatabase)
		
		Thisform.SaveFormSettings(lcNewDir)
		ThisForm.oSearchEngine.SaveOptions(Addbs(lcNewDir) + This.cSearchOptionsXMLFile)
		
		*-- Copy the Filter form settings XML file to our new folder
		Try
			lcFilterSettingsFilename = "GF_Filter_Settings.xml"
		*SF 20221018 -> local storage
		*	lcSourceFile = Home(7) + lcFilterSettingsFilename
			lcSourceFile = This.cCR_StoreLocal + lcFilterSettingsFilename
		*/SF 20221018 -> local storage
			lcTargetFile = Addbs(lcNewDir) + lcFilterSettingsFilename
			Copy File (lcSourceFile) to (lcTargetFile) 
		Catch
		Endtry
		
		*-- Save a textfile with information about the saved search
		Thisform.SaveSearchInfo()
		
		Select(lnSelect)
		
		
		
		
		
		   
	ENDPROC

	PROCEDURE search
		Lparameters tlDoNotSearch
		
		Local lcFilter, lcFirstChar, lcLastChar, lcSearchExpression, lnResponse
		
		lcSearchExpression = Thisform.oSearchEngine.oSearchOptions.cSearchExpression
		lcFirstChar = Left(lcSearchExpression, 1)
		lcLastChar = Right(lcSearchExpression, 1)
		
		*====== Deal with any leading or trailing spaces in the search expression ======================
		If Empty(tlDoNotSearch) and (lcFirstChar = Chr(32) Or lcLastChar = Chr(32))
			lnResponse = Messagebox('Notice: The search expression contains leading or trailing spaces.' + ;
				  Chr(13) + Chr(13) + ;
				  'Do you want to remove these spaces from the search expression?', 3 + 32, 'GoFish notice:') && Yes, No, Cancel dialog box
			If lnResponse = 2 && Cancel
				Thisform.editSearch.SetFocus()
				Return
			Endif
		
			If lnResponse = 6 && Yes
				Thisform.oSearchEngine.oSearchOptions.cSearchExpression = Alltrim(lcSearchExpression)
			Endif
		Endif
		
		lcFilter = Thisform.cFilter
		
		Set Filter To &lcFilter In (Thisform.cSearchResultsAlias) && Need to remove any filter that the Treeview has applied
		
		lcBell = Set("Bell")
		Set Bell Off
		
		Thisform.DoSearch(tlDoNotSearch)
		
		Set Bell &lcBell
		
		If Thisform.lSearching = .T.
			Thisform.lSearching = .F.
		Endif
		
		Thisform.editSearch.SetFocus()
		
		If Thisform.oSearchEngine.oSearchOptions.lShowErrorMessages
			ThisForm.ShowSearchErrors()
		EndIf 
		
	ENDPROC

	PROCEDURE setcaption
		Lparameters toControl, tcCaption
		
		toControl.Caption = tcCaption
		
		toControl.Refresh()
	ENDPROC

	PROCEDURE seterror
	ENDPROC

	PROCEDURE setpath
		Lparameters tcDir
		
		MessageBox('Form.SetPath() shoudl no longer be needed.')
		Return
		
		
		
		Local lcPath, llReturn
		
		lcPath = Alltrim(Thisform.oSearchEngine.oSearchOptions.cPath)	&& Store it. Might be invalid, and if so, we'll restore it to save them
		
		llReturn = Thisform.oSearchEngine.SetPath(tcDir) && Will also rebuild list of Projects that are present in this path
		
		If !llReturn
			MessageBox('Invalid path. Please correct',32, 'GoFish Error:')
			Thisform.oSearchEngine.oSearchOptions.cPath	= lcPath
		Endif
		
		Thisform.Refresh()
		
		Return llReturn
		
		     
	ENDPROC

	PROCEDURE setproject
	ENDPROC

	PROCEDURE setscope
		Lparameters tcScope
		
		tcScope = Alltrim(tcScope)
		tcScope = Rtrim(Lower(tcScope), '\')
		
		If (!Directory(tcScope, 1) and !('.pjx' $ Lower(tcScope))) or Empty(tcScope)
			MessageBox('Invalid scope setting', 0, 'Error:')
			Return
		Endif
		
		Thisform.comboSearchScopeHistory.SaveSearchScope(tcScope)
		Thisform.comboSearchScopeHistory.Value = tcScope
		Thisform.comboSearchScopeHistory.Valid()
		
		Thisform.Refresh()
	ENDPROC

	PROCEDURE setsearchexpression
		Lparameters tcSearchExpression
		
		Thisform.oSearchEngine.oSearchOptions.cSearchExpression = tcSearchExpression
		
		Thisform.Refresh()
	ENDPROC

	PROCEDURE set_gridcolour		&& Set the colours for the grid, moved to load options
		Local lcFormatGridPrg, lcPRG, lcPRGColor, lcResultsCursor, lcSCX, lcSCXColor, lcVCX, lcVCXColor, lcDefaultColor, lcAppPath
		
		Local;
			lcDynamicBackColor As String,;
			loColumn           As Object
		
		lcResultsCursor = Thisform.cSearchResultsAlias
		
		lcFormatGridPrg = 'GoFish_FormatGrid.PRG'
		
		* First choice: Thor
		If Type('_Screen.cThorDispatcher') = 'C'
			lcFileName = Execscript(_Screen.cThorDispatcher, 'Full Path=Thor_Proc_GoFish_FormatGrid.PRG')
			If (Not Isnull(m.lcFileName)) And File(lcFileName)
				lcFormatGridPrg = m.lcFileName
			Endif
		Endif
		
		
		If !File(lcFormatGridPrg) && If not found in the VFP path
			lcFormatGridPrg = Addbs(_Screen._GoFishClassic.capppath) + lcFormatGridPrg && Look for it in the GoFish folder.
		Endif
		
		If File (lcFormatGridPrg) && Call user file to assign colors, if present, otherwise use default
			Do (lcFormatGridPrg) With Thisform.oGrid, lcResultsCursor
		Else
		
		*SF 20221016 added colour options
			lcSCX = 'Upper(' + lcResultsCursor + '.filetype) = "SCX"'
		*	lcSCXColor = 'RGB(0,0,128)'
			lcSCXColor = Padr(Thisform.nFileSCXDynamicForeColour,8)
		
			lcVCX = 'Upper(' + lcResultsCursor + '.filetype) = "VCX"'
		*	lcVCXColor = 'RGB(0,128,0)'
			lcVCXColor = Padr(Thisform.nFileVCXDynamicForeColour,8)
		
			lcPRG = 'Upper(' + lcResultsCursor + '.filetype) $ "PRG TXT H INI XML HTM HTML ASP ASPX"'
		*	lcPRGColor = 'RGB(255,0,0)'
			lcPRGColor = Padr(Thisform.nFilePRGDynamicForeColour,8)
		
			lcDefaultColor = Padr(Thisform.nFileDefaultDynamicForeColour,8)
		
		*	This.SetAll('DynamicForeColor', 'Iif(' + lcSCX + ', ' + lcSCXColor + ', ' +  ;
		'Iif(' + lcVCX + ', ' + lcVCXColor + ', ' + ;
		'Iif(' + lcPRG + ',' + lcPRGColor + ', RGB(0,0,0))' + ;
		')' + ;
		')', 'COLUMN')
			Thisform.oGrid.SetAll('DynamicForeColor', 'Iif(' + lcSCX + ', ' + lcSCXColor + ', ' +  ;
				'Iif(' + lcVCX + ', ' + lcVCXColor + ', ' + ;
				'Iif(' + lcPRG + ',' + lcPRGColor + ',  '+ ;
				lcDefaultColor + ' )'+ ;
				')' + ;
				')', 'COLUMN')
		*/ SF 20221016 added colour options
		
		*SF 20221029 fix column restore
			loColumn = Thisform.oGrid.FindColumn("TrimmedReplaceLine")
		*lcDynamicBackColor = "ICase(replaced, RGB(149,249,147), replacerisk > Thisform.nReplaceRisk, Rgb(210,210,210), Rgb(255,255,255))"
			If Vartype(m.loColumn) = "O" Then
				lcDynamicBackColor = "ICase(" +;
					"replaced, " + Padr(Thisform.nReplacedDynamicBackColour,8) + ", " +;
					"replacerisk > Thisform.nReplaceRisk, " + Padr(Thisform.nRiskExceededDynamicBackColour,8) + ", " +;
					"Rgb(255,255,255))"
				loColumn.DynamicBackColor = m.lcDynamicBackColor
			Endif &&Vartype(m.loColumn) = "O"
		*SF 20221029 fix column restore
		Endif
		
	ENDPROC

	PROCEDURE showadvancedform
		
		If Thisform.lSearchFormVisible = .f.
			Thisform.lSearchFormVisible = .t.
			Do Form 'GoFish_Advanced' with Thisform
		Else
			ThisForm.ShowForm('GF_Advanced')
		Endif
		
		
	ENDPROC

	PROCEDURE showcodeforcurrentrow
		Lparameters tlForce
		
		*-- This method will only generate the html if the ROW has changed, not the colum. This prevents
		*-- the html from being regenerated if the user tabs to a new column in the grid, without changing rows.
		
		Local lnId
		
		If Eof(Thisform.cSearchResultsAlias) or Thisform.lSearching = .t.
			Return
		Endif
		
		lnId = Evaluate(Thisform.cSearchResultsAlias + '.id')
		
		If (lnId <> Thisform.nCurrentId and lnId > 0) or tlForce
			Thisform.LoadReplaceLine()
			Thisform.Refresh()
			Thisform.ShowHtmlCodeView()
		EndIf
		
		Thisform.nCurrentId = lnId
	ENDPROC

	PROCEDURE showerrors
		Lparameters loCollection
		
		Local lcErrorText, lcTempFile, loEditorWin, loObject
		*!* ******************** Removed 11/09/2015 *****************
		*!* Do Form 'GF_Collection_Explorer'
		
		lcErrorText = ''
		For Each m.loObject In m.loCollection FoxObject
			lcErrorText = m.lcErrorText + m.loObject + CR
		EndFor 
		
		If Empty(lcErrorText)
			Return
		EndIf 
		
		lcTempFile	  = Addbs(Sys(2023)) + 'GF_Search_Errors' + Sys(2015) + '.txt'
		Strtofile(m.lcErrorText, m.lcTempFile)
		Modify File (m.lcTempFile) Nowait
		
		If IsThorThere()
			loEditorWin = Execscript(_Screen.cThorDispatcher, 'Class= editorwin from pemeditor')
			m.loEditorWin.ResizeWindow(1200, 600)
			m.loEditorWin.SetTitle(m.lcTempFile)
		Endif
		
	ENDPROC

	PROCEDURE showfilterform
		Lparameters lcFormName
		
		Local lcCurrentFilter, lcCursor, lcFilter
		
		lcCursor = thisform.cSearchResultsAlias
		lcCurrentFilter = Filter(lcCursor)
		Thisform.nCurrentId = 0
		
		Set Filter To In (lcCursor) && Clear current filter so Filter form and process all records
		Goto top In (lcCursor)
		
		Do Form (lcFormName) With Thisform To lcFilter
		
		If IsNull(lcFilter)
			Set Filter To &lcCurrentFilter in (lcCursor)
			Goto top In (lcCursor)
			Return
		Else
			This.LoadFilterSettings()
			Thisform.cFilter = lcFilter
			Thisform.lApplyFilter = .t.
			Thisform.ApplyFilter()
		EndIf
		
		ThisForm.UpdateTreeView()
		
		
		
	ENDPROC

	PROCEDURE showform
		Lparameters tcFormName
		
		Local llReturn, lnI
		
		If Empty(tcFormName)
			Return
		Endif
		llReturn = .f.
		
		For lnI = 1 To _Screen.FormCount
		    If Upper(_Screen.Forms(lnI).Name) = Upper(tcFormName)
		
		        With _Screen.Forms (lnI)
		            If .WindowState = 1
		                .WindowState = 0
		            Endif
		            .Show()
		        EndWith
		        llReturn = .t.
		        Exit
		    Endif
		EndFor
		
		Return llReturn 
	ENDPROC

	PROCEDURE showgofishhelppage
		messagebox('No help available at this time.', 0, 'GoFish')
		*** TODO: Shell('URL for replace help')
		
	ENDPROC

	PROCEDURE showgridcolumn
		Lparameters tlShow, toColumn, tnPosition, tnWidth
		
		Local lnColumnCount
		
		lnColumnCount = toColumn.Parent.ColumnCount
		toColumn.Width = tnWidth
		
		If tlShow = .t.
			toColumn.Visible = .t.
			Do While toColumn.ColumnOrder <> tnPosition 
				toColumn.ColumnOrder = toColumn.ColumnOrder + Iif(toColumn.ColumnOrder < tnPosition, 1, -1)
			EndDo
		Else
			Do While toColumn.ColumnOrder < lnColumnCount
				toColumn.ColumnOrder = toColumn.ColumnOrder + 1
			EndDo
			toColumn.Visible = .f.
		Endif  
	ENDPROC

	PROCEDURE showhelpform
		Do Form 'GoFish_About' With Thisform
	ENDPROC

	PROCEDURE showhtml
		Lparameters tcHtml
		
		Local loWebContainer
		
		loWebContainer = Thisform.containerRight.container2.ContainerWebControl
		
		loWebContainer.ShowHtml(tcHtml) 
	ENDPROC

	PROCEDURE showhtmlcodeview
		Local lcCode, lcCss, lcCssFile, lcCursor, lcExt, lcHTML, lcHtmlFile, lcJavaScript, lcJavaScriptFile
		Local lcMatchLine, lcReplaceLine, lnMatchStart, loSearchEngine, loWebControl
		
		lcCursor	   = Thisform.cSearchResultsAlias
		loSearchEngine = Thisform.oSearchEngine
		loWebControl   = Thisform.Containerright.Container2.containerWebControl
		
		*-- These file types cannot be rendered ------------------
		lcExt = Alltrim(Upper(&lcCursor..FileType))
		If (' ' + m.lcExt + ' ') $ This.cDoNotRenderExtensions
			m.loWebControl.ShowHTML('Cannot render this file type.')
			Return
		Endif
		
		lcCode = Substr(&lcCursor..Code, &lcCursor..ProcStart + 1)
		
		lnMatchStart  = &lcCursor..MatchStart - &lcCursor..ProcStart
		lcMatchLine	  = &lcCursor..MatchLine
		lcReplaceLine = &lcCursor..ReplaceLine
		
		* Custom file for a user
		lcCss = This.GetCustomCss()
		If Empty(lcCss)
			lcCssFile	 = Home(7) + 'GoFishCustom.css'
			If Not File(m.lcCssFile)
				* The default file (path does not matter when part of the APP)
				lcCssFile	 = _Screen._GoFishClassic.cAppPath + 'CSS\GoFish.css'
			Endif
			lcCss		 = Iif(File(m.lcCssFile), Filetostr(m.lcCssFile), '')
		Endif
		
		lcJavaScriptFile = _Screen._GoFishClassic.cAppPath + 'HTML\GoFish.js'
		lcJavaScript	 = Iif(File(m.lcJavaScriptFile), Filetostr(m.lcJavaScriptFile), '')
		
		If Len(m.lcCode) < Thisform.nMaxSizeToRenderHtml
			lcHTML = m.loSearchEngine.GenerateHTMLCode(m.lcCode, m.lcMatchLine, m.lnMatchStart, m.lcCss, m.lcJavaScript, m.lcReplaceLine, &lcCursor..Replaced, Thisform.nTabsToSpaces, ;
				  Thisform.oSearchEngine.oSearchOptions.cSearchExpression,								;
				  Alltrim(Iif(This.lApplyFilter, This.oFilter.Statement_Filter, '')),					;
				  Alltrim(Iif(This.lApplyFilter, This.oFilter.ProcCode_Filter, '')))
		Else
			lcHTML = '<pre>' + m.lcCode + '</pre>'
		Endif
		
		If This.lGoogleChromeFrame = .T.  && Slower due to file activity, but allows selecting of text from matched row in html view.
			*SF 20221018 -> local storage
			*	lcHtmlFile = Home(7) + 'gf_html_code.html'
			lcHtmlFile = This.cCR_StoreLocal + 'gf_html_code.html'
			*/SF 20221018 -> local storage
			Delete File (m.lcHtmlFile)
			Strtofile(m.lcHTML, m.lcHtmlFile)
			loWebControl.lGoogleChromeFrame = .T.
			m.loWebControl.ShowHtmlFile(m.lcHtmlFile)
		Else
			m.loWebControl.ShowHTML(m.lcHTML)
		Endif
		
		
		
		
	ENDPROC

	PROCEDURE showoptionsform
		*SF 20221017, get form settings, nothing from some odd stored search.
		This.LockScreen = .T.
		Thisform.LoadFormSettings(.T.)
		This.LockScreen = .F.
		*/SF 20221017, get form settings, nothing from some odd stored search.
		
		Do Form GoFish_Options With Thisform && Calls a Modal form...
		
		This.LockScreen = .T.
		
		lnRecno = Recno(This.cSearchResultsAlias)
		
		If This.nFirstLoad=2 Then
		*we have lCR_Allow active (i.e. we started this way.)
		*just store changes to lCR_Allow
			Thisform.SaveFormSettings(Home(7), .T.)
		
		Endif &&This.nFirstLoad=2
		Thisform.SaveFormSettings()
		Thisform.LoadFormSettings(.T.)
		
		If Thisform.nReplaceRisk = 0
			Thisform.lReplaceMode = .F. && Will trigger the _assign method
		Endif
		
		*-- Unmark any marked records where the replacerisk is higher than the new setting
		Update (Thisform.cSearchResultsAlias) Set Process = .F. Where replacerisk > Thisform.nReplaceRisk
		
		Select (This.cSearchResultsAlias)
		
		Try
				Goto (lnRecno)
			Catch
		Endtry
		
		Thisform.Refresh()
		
		This.LockScreen = .F.
		
	ENDPROC

	PROCEDURE showreplaceerrors
		Local loReplaceErrors
		loReplaceErrors = Thisform.oSearchEngine.oReplaceErrors
		If m.loReplaceErrors.Count > 0
			Thisform.ShowErrors(m.loReplaceErrors)
		Endif
		
	ENDPROC

	PROCEDURE showreplacehistory
		Local lcDetail, lcDetailDBC, lcMaster, lnSelect
		
		lnSelect = Select()
		
		*SF 20221018 -> local storage
		*!*	lcMaster = Addbs(Home(7)) + 'GF_Replace_History.dbf'
		*!*	lcDetail = Addbs(Home(7)) + 'GF_Replace_DetailV5.dbf'
		*!*	lcDetailDBC = Addbs(Home(7)) + 'GF_Replace_DetailV5.dbc'
		lcMaster    = This.cCR_StoreLocal + 'GF_Replace_History.dbf'
		lcDetail    = This.cCR_StoreLocal + 'GF_Replace_DetailV5.dbf'
		lcDetailDBC = This.cCR_StoreLocal + 'GF_Replace_DetailV5.dbc'
		*/SF 20221018 -> local storage
		
		If !File(lcMaster) or !File(lcDetail) or !File(lcDetailDBC) 
			MessageBox('One of your Replace History files is missing. Cannot browse Replace History.', 16, 'File(s) missing')
			Return .f.
		Endif
		
		Select Master.Id as Batch__Id, ;
					 Master.Date_time, ;
					 Master.scope, ;
					 Master.searchstr as Search_String, ;
					 Master.replacestr as Replace_String, ;
					 Detail.* ;
		  From (lcMaster) Master ;
				Join (lcDetail) Detail on Master.id = Detail.HistoryFK ;
			Order By Master.ID  desc, Detail.PK ;
			Into Cursor GoFishReplaceHistory
		
		Browse NoWait Normal Title "GoFish Replace History"
		 
		Select (lnSelect)  
	ENDPROC

	PROCEDURE showreplacepanel
		loReplacePanel = Thisform.containerRight.container1.containerReplaceText
		
		If loReplacePanel.visible = .t.
			Return
		Endif
		
		lnHeightChange = This.parent.containerReplaceText.Height * -1
		
		
	ENDPROC

	PROCEDURE showsearcherrors
		Local loSearchErrors
		loSearchErrors = Thisform.oSearchEngine.oSearchErrors
		If m.loSearchErrors.Count > 0
			Thisform.ShowErrors(m.loSearchErrors)
		Endif
		
	ENDPROC

	PROCEDURE sortcolumn
		Local laCurrentEvent[1], lcField, lcNewSortOrder, lcSortField, lcSortOrder, loCalledBy, loColumn
		Local loHeader
		
		AEvents(laCurrentEvent,0)
		loCalledBy = laCurrentEvent[1] && should be a Header object
		loHeader = Evl(loHeader, loCalledBy)
		
		lcField = Upper(GetWordNum(loHeader.Parent.ControlSource, 2, '.'))
		lcNewSortOrder= ''
		
		IF INLIST(UPPER(lcField), 'CODE', 'PROCCODE', 'MATCHLINE', 'STATEMENT')
			MessageBox('Cannot sort by this column.', 16, 'Notice:')
			Return .f.
		Endif
		
		*-- Read current Sort field and Sort Order ------------------
		lcSortField = Thisform.cSortField
		lcSortOrder = Upper(Thisform.cSortOrder)
		
		If 'TIMESTAMP' $ Upper(loHeader.Parent.ControlSource)
			lcNewSortOrder= 'DESC'
		EndIf
		
		*-- If same column, reverse Asc/Desc, bump 2 to 3, and 1 to 2, so new column can go in 1
		If lcField = lcSortField or Empty(lcSortField) 
			lcNewSortOrder = Iif(('DESC' $ lcSortOrder) or Empty(lcSortOrder), 'ASC', 'DESC')
		Else
			Thisform.cSortFieldTertiary = Thisform.cSortFieldSecondary
			Thisform.cSortOrderTertiary = Thisform.cSortOrderSecondary
			Thisform.cSortFieldSecondary = Thisform.cSortField
			Thisform.cSortOrderSecondary = Thisform.cSortOrder
		EndIf
		
		Thisform.cSortField = lcField
		Thisform.cSortOrder = lcNewSortOrder
		
		Thisform.FillSearchResultsCursor()
		
		If thisform.lReplaceMode = .t.
			Thisform.DoReplace(.t.) && .t. means do a "Preview" Replace
		Endif
		
		Thisform.oGrid.Setfocus()
		
		Keyboard '{UPARROW}' && Required to get the grid to update and sync with newly built cursor.  
	ENDPROC

	PROCEDURE sortcolumnsecondary
		Local laCurrentEvent[1], lcField, lcNewSortOrder, lcSortField, lcSortOrder, loCalledBy, loHeader
		
		AEvents(laCurrentEvent,0)
		loCalledBy = laCurrentEvent[1] && should be a Header object
		loHeader = Evl(loHeader, loCalledBy)
		
		lcField = Upper(GetWordNum(loHeader.Parent.ControlSource, 2, '.'))
		lcNewSortOrder = ''
		
		IF INLIST(UPPER(lcField), 'CODE', 'PROCCODE', 'MATCHLINE', 'STATEMENT')
			MessageBox('Cannot sort by this column.', 16, 'Notice:')
			Return .f.
		Endif
		
		*-- Read current Secondary Sort Field and Sort Order ------------------
		lcSortField = Thisform.cSortFieldSecondary
		lcSortOrder = Upper(Thisform.cSortOrderSecondary)
		
		If 'TIMESTAMP' $ Upper(loHeader.Parent.ControlSource)
			lcNewSortOrder = 'DESC'
		Endif
		
		*-- If same column, need to reverse Asc/Desc, otherwise, bump 2nd to 3rd
		If lcField = lcSortField 
			lcNewSortOrder = Iif(('DESC' $ lcSortOrder) or Empty(lcSortOrder), 'ASC', 'DESC')
		Else
			Thisform.cSortFieldTertiary = Thisform.cSortFieldSecondary
			Thisform.cSortOrderTertiary = Thisform.cSortOrderSecondary
		Endif
		
		Thisform.cSortFieldSecondary = lcField
		Thisform.cSortOrderSecondary = lcNewSortOrder
		
		Thisform.FillSearchResultsCursor()
		
		If thisform.lReplaceMode = .t.
			Thisform.DoReplace(.t.) && .t. means do a "Preview" Replace
		Endif
		
		Thisform.oGrid.Setfocus()
		
		Keyboard '{UPARROW}' && Required to get the grid to update and sync with newly built cursor. 
	ENDPROC

	PROCEDURE updateformaftereplace
		Lparameters tnRecordId
		
		Thisform.FillSearchResultsCursor()
		
		Select(Thisform.cSearchResultsAlias)
		Goto Top
		
		Locate For Id = tnRecordId
		
		Try
			Thisform.oGrid.SetFocus()
		Catch
		Endtry
		
		Thisform.Refresh()
		
		Thisform.ShowCodeForCurrentRow(.T.)
		
		
	ENDPROC

	PROCEDURE updateformaftersearch
		Local loSearchEngine
		
		Thisform.lSearching = .f.
		
		loSearchEngine = Thisform.oSearchEngine
		
		If loSearchEngine.lEscPress
			Messagebox('Processing stopped due to ESCAPE press.', 16, 'Notice:', 2500)
		EndIf
		
		If loSearchEngine.lResultsLimitReached
			Messagebox('Processing stopped due to maximum results limit.' + Chr(13) + Chr(13) +;
								 'Adjust value in Options if desired.', 64, 'Notice:')
		EndIf
		
		If loSearchEngine.nMatchLines > 0
			Thisform.ApplyFilter()
			ThisForm.FillSearchResultsCursor() && Pulls records from the search engine's results cursor.
			Thisform.ShowCodeForCurrentRow()
		Else
			Thisform.editSearch.SetFocus()
		EndIf
		
		This.FormatProcessColumn()
		
		ThisForm.UpdateTreeView()
		
		
	ENDPROC

	PROCEDURE updatesearchenginecursor
		*-- This method copies over certain fields from the local cursor to the GFSE cursor
		Local lcSearchEngineCursor, lcSearchResultsAlias, lnSelect
		
		lcSearchResultsAlias = Thisform.cSearchResultsAlias
		lcSearchEngineCursor = Thisform.oSearchEngine.cSearchResultsAlias
		
		lnSelect = Select()
		Select (lcSearchResultsAlias)
		
		MessageBox("start 1")
		Scan
			Update (lcSearchEngineCursor) ;
				Set  Process = &lcSearchResultsAlias..Process ;
				Where id = &lcSearchResultsAlias..id  
		Endscan 
		MessageBox("end 1")
		
		
		
		MessageBox("start 2")
		
		Scan
		lnId = id
		llProcess = process
		replace process with llProcess for id = lnId in (lcSearchEngineCursor) 
		Endscan 
		
		
		
		MessageBox("end 2")
		Select (lnSelect) 
	ENDPROC

	PROCEDURE updatesearchscopevariables
		With Thisform
			.cActiveProject = Thisform.oSearchEngine.GetActiveProject()
			.cCurrentDir = Thisform.oSearchEngine.GetCurrentDirectory()
			.oSearchEngine.AddProject(.cActiveProject)
		
			If Empty(.oSearchEngine.oSearchOptions.cPath)
				.oSearchEngine.oSearchOptions.cPath = .cCurrentDir
			Endif
		
		Endwith
		
		
		
	ENDPROC

	PROCEDURE updatetreeview
		Goto Top In (Thisform.cSearchResultsAlias)
		
		Thisform.Refresh()
		
		If !Eof(Thisform.cSearchResultsAlias)&& Thisform.oSearchEngine.nMatchLines > 0
			Thisform.PopulateTreeview()
			Thisform.oGrid.SetFocus()
		Else
			lcResults = Thisform.containerRight.container1.lblResults.Caption
		*SF 20221016 added colour options
		*	Thisform.PopulateTreeview(lcResults, 128)
			Thisform.PopulateTreeview(lcResults, Thisform.nTreeUpdateColour)
		*/ SF 20221016 added colour options
			Thisform.ShowHtml('<h3>&nbsp;&nbsp;&nbsp;' + lcResults + '</h3>')
		Endif
		
		
	ENDPROC

	PROCEDURE validateinputs
		Local loGrid, loSearchEngine, loSearchOptions, loTimeStampToControl, lcPath
		
		loSearchOptions = Thisform.oSearchEngine.oSearchOptions
		lcScope = Thisform.GetCurrentScope()
		
		*-- Validate Directory (for Curr Dir or Browsed Dir)
		If InList(loSearchOptions.nSearchScope, 3, 4)
		
			lcPath = Addbs(lcScope)
			If !Directory(lcPath, 1)
				MessageBox('Invalid Directory [' + lcPath + ']. Please correct.', 0, 'GoFish Error:')
				Return .f.
			Endif
		Endif
		
		*-- Validate Project file can be found (for Active Project and Browsed Project)
		If InList(loSearchOptions.nSearchScope, 1, 2)
			If !File(lcScope)
				MessageBox('Cannot find project file [' + lcScope + ']. Please correct.', 0, 'GoFish Error:')
				Return .f.
			Endif
		Endif
		
		*-- Must Specify a search expression, unless you are searching by TimeStamps
		If Empty(loSearchOptions.cSearchExpression) and !loSearchOptions.lTimeStamp
			Messagebox('Please specify a search string.', 16, 'GoFish')
			Return .f.
		Endif
		
		*-- Make sure at least one date is supplied if timestamp box is checked.
		If loSearchOptions.lTimeStamp = .t. and Empty(loSearchOptions.dTimeStampFrom) and Empty(loSearchOptions.dTimeStampTo)
			MessageBox('At least one TimeStamp date must be entered, or else clear checkbox.', 16, 'GoFish')
		EndIf
		
		If !Thisform.ClearSearchResultsCursor()
			Return .f.
		EndIf
		
		 
	ENDPROC

	PROCEDURE validatereplaceexpression
		#DEFINE CR Chr(13)
		Local laHighRiskCount[1], laSelectedCount[1], lcExample, lcReplaceExpression, lnResponse
		
		lcReplaceExpression = Thisform.oSearchEngine.oSearchOptions.cReplaceExpression
		lcUDFCode = Thisform.oSearchEngine.cReplaceUDFCode
		lcExample = Strtran(lcReplaceExpression, ' ', '{SPACE}') 
		
		
		If Thisform.nReplaceMode = 3  && UDF Replace mode
			If Empty(lcUDFCode)
				MessageBox('UDF Replace code is empty.',16, 'WARNING:')
				Return .f.
			Else
				Return .t.
			Endif
		Endif
		
		If Len(lcReplaceExpression) = 0
			lnResponse = MessageBox('The Replace expression is an empty string.' + CR + CR + ;
															'Are you sure you want to proceed with an empty Replace string?', 3, 'WARNING:')
			If lnResponse <> 6
				Thisform.oSearchEngine.oSearchOptions.lAllowBlankReplace = .f.
				Return .f.
			EndIf
			
			Thisform.oSearchEngine.oSearchOptions.lAllowBlankReplace = .t.
		EndIf
		
		If Empty(lcReplaceExpression) and Len(lcReplaceExpression) > 0
			lnResponse = MessageBox('The Replace expression contains only spaces.' + CR + CR + ;
															'Are you sure you want to proceed with this Replace string?' + CR + CR + ;
															lcExample, 3, 'WARNING:')
			If lnResponse <> 6
				Thisform.oSearchEngine.oSearchOptions.lAllowBlankReplace = .f.
				Return .f.
			EndIf
			
			Thisform.oSearchEngine.oSearchOptions.lAllowBlankReplace = .t.
		EndIf
		
		If Left(lcReplaceExpression, 1) = ' ' and Right(lcReplaceExpression, 1) <> ' '
			lnResponse = MessageBox('The Replace expression contains 1 or more leading spaces.' + CR + CR + ;
															'Are you sure you want to proceed with this Replace string?'  + CR + CR + ;
															lcExample, 3, 'WARNING:')
			If lnResponse <> 6
				Return .f.
			EndIf
		EndIf
		
		If Left(lcReplaceExpression, 1) <> ' ' and Right(lcReplaceExpression, 1) = ' '
			lnResponse = MessageBox('The Replace expression contains 1 or more trailing spaces.' + CR + CR + ;
															'Are you sure you want to proceed with this Replace string?'  + CR + CR + ;
															lcExample, 3, 'WARNING:')
			If lnResponse <> 6
				Return .f.
			EndIf
		EndIf
		
		If Left(lcReplaceExpression, 1) = ' ' and Right(lcReplaceExpression, 1) = ' ' and !Empty(lcReplaceExpression) 
			lnResponse = MessageBox('The Replace expression contains leading and trailing SPACES.' + CR + CR + ;
															'Are you sure you want to proceed with this Replace string?'  + CR + CR + ;
															lcExample, 3, 'WARNING:')
			If lnResponse <> 6
				Return .f.
			EndIf
		EndIf
		
		*-- Notify user if they have selected any high-risk rows to replace
		Select Count(id) from (thisform.cSearchResultsAlias);
		 Where process = .t. and ReplaceRisk > 1;
		 Into Array laHighRiskCount
		
		If laHighRiskCount > 0 
		
			lnResponse = MessageBox('====================================================' + CR +;
															'             W  A  R  N  I  N  G	' + CR + ;
															'====================================================' + CR + CR +;
															'You have one or more high risk Match Types selected which could damage' + CR + ;
															'your files and prevent them from opening if your replace expression ' + CR + ;
															'results in invalid code.' + CR + CR + ;
															'Are you sure you want to proceed?', 3, 'GoFish Replace')
			If lnResponse <> 6
				Return .f.
			EndIf
		EndIf 
		
		
		
		   
	ENDPROC

	PROCEDURE viewreport
		Local laFields[1], lcAscDesc, lcCursor, lcField, lcFieldList, lcFilename, lcFilter, lcHeader, lcHtml
		Local lcOrderBy, lcResultsGridHtmlCursor, lcTable, lnX, loColumn, loShell
		
		lnSelect = Select()
		lcCursor = This.cSearchResultsAlias
		
		Dimension laFields[1, 2]
		lcFieldList = ''
		lnX = 1
		
		*-- Set Header captions from Field name -----------------
		For Each loColumn In Thisform.oGrid.Columns
			If loColumn.Visible = .T.
				If lnX > 1
					Dimension laFields[lnX, 2]
				Endif
				laFields[lnX, 1] = Transform(loColumn.ColumnOrder, '999')
				laFields[lnX, 2] = loColumn.ControlSource
				lnX = lnX + 1
			Endif
		Endfor
		
		=Asort(laFields)
		
		For lnX = 1 To Alen(laFields) / 2
			If !Empty(lcFieldList)
				lcFieldList = lcFieldList + ','
			Endif
			lcFieldList = lcFieldList + laFields[lnX, 2]
		Endfor
		
		lcFilter = Filter(lcCursor)
		
		If !Empty(lcFilter)
			lcFilter = 'Where ' + lcFilter 
		Endif
		
		If !Empty(Thisform.cSortFields)
			lcField = Getwordnum(Thisform.cSortFields, 1, ',')
			lcAscDesc = Getwordnum(Thisform.cSortOrder, 1, ',')
			lcAscDesc = Iif('DESC' $ lcAscDesc, 'DESCENDING', '')
		
			lcOrderBy = 'Order By ' + lcField + ' ' + lcAscDesc
		Else
			lcOrderBy = ''
		Endif
		
		lcResultsGridHtmlCursor = 'ResultsGridHtml'
		Select &lcFieldList From &lcCursor &lcFilter &lcOrderBy Into Cursor &lcResultsGridHtmlCursor Readwrite
		
		If 'matchtype' $ Lower(lcFieldList)
			Replace matchtype With Strtran(matchtype, '<', '') All
			Replace matchtype With Strtran(matchtype, '>', '') All
		Endif
		
		Goto Top
		
		*SF 20221016 added colour options
		*!*	Text To lcHeader Textmerge Noshow
		*!*		<Html>
		*!*		<Head>
		
		*!*		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
		
		*!*		<script>$(document).ready(function(){
		*!*		   $("tr:even").css("background-color", "#F4F4A8");
		*!*		   $("tr:odd").css("background-color", "#EFF1D1");});
		*!*		</script>
		
		*!*		</Head>
		
		*!*		<Body>
		*!*			Scope&nbsp;: &nbsp;&nbsp; <<Thisform.GetCurrentScope()>> &nbsp;&nbsp;&nbsp;&nbsp; <<Thisform.cSearchResultsMessage>> &nbsp;&nbsp;&nbsp;&nbsp; <<Ttoc(DateTime())>> <br />
		*!*			Search: &nbsp;&nbsp; <<Thisform.oSearchEngine.oSearchOptions.cSearchExpression>> <br />
		*!*			<<Thisform.cResultsMessage>> <br />
		*!*			<hr />
		
		*!*	Endtext
		Text To lcHeader Textmerge Noshow
			<Html>
			<Head>
		
			<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
		
			<script>$(document).ready(function(){
			   $("tr:even").css("background-color", "#<<RIGHT(TRANSFORM(Thisform.nCSS_tr_even_Colour,'@0'),6)>>");
			   $("tr:odd").css("background-color", "#<<RIGHT(TRANSFORM(Thisform.nCSS_tr_odd_Colour,'@0'),6)>>");
			</script>
		
			</Head>
		
			<Body>
				Scope&nbsp;: &nbsp;&nbsp; <<Thisform.GetCurrentScope()>> &nbsp;&nbsp;&nbsp;&nbsp; <<Thisform.cSearchResultsMessage>> &nbsp;&nbsp;&nbsp;&nbsp; <<Ttoc(DateTime())>> <br />
				Search: &nbsp;&nbsp; <<Thisform.oSearchEngine.oSearchOptions.cSearchExpression>> <br />
				<<Thisform.cResultsMessage>> <br />
				<hr />
		
		Endtext
		*/ SF 20221016 added colour options
		
		lcTable = Thisform.oWebControl.CursorToHtml(lcResultsGridHtmlCursor, 'Results')
		
		lcHtml = lcHeader + lcTable + '</body></Html>'
		
		lcFilename = Addbs(Sys(2023)) + 'GF_ResultsGrid.html'
		
		Strtofile(lcHtml, lcFilename)
		
		loShell = Newobject('_ShellExecute', Home(1) + 'Ffc\' + '_environ.vcx')
		loShell.ShellExecute(lcFilename)
		loShell.Release()
		
		Select (lnSelect)
		
	ENDPROC

	PROCEDURE ButtonContainer.chkLimitToProjectFolder.Refresh
		This.Enabled = !Thisform.lSearching &&and !Thisform.lReplaceMode
		
		This.Visible = ('.PJX' $ Upper(Thisform.comboSearchScopeHistory.Text))
		
	ENDPROC

	PROCEDURE ButtonContainer.chkSubdirectories.Refresh
		This.Enabled = !Thisform.lSearching && and !Thisform.lReplaceMode
		
		This.Visible = !('.PJX' $ Upper(Thisform.comboSearchScopeHistory.text))
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdAdvanced.Click
		Thisform.ShowAdvancedForm()
		Thisform.Refresh()
		
		
		
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdAdvanced.Refresh
		This.Enabled = !Thisform.lSearching && and !Thisform.lReplaceMode
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdAdvanced.RightClick
		Local lcChoice, lnBar
		lcChoice = ''
		lnBar	 = 0
		CreateContextMenu('AdvancedContextMenu')
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<Plain Search'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Plain Search'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.nSearchMode = 1
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<Wildcards (* and ?)'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Wildcards (* and ?)'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.nSearchMode = 2
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<RegEx Search'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'RegEx Search'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.nSearchMode = 3
		
		lnBar = m.lnBar + 1
		
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\-'
		
		If ('.PJX' $ Upper(Thisform.comboSearchScopeHistory.Text))
			lnBar = m.lnBar + 1
			Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<Limit search to project home directory and sub-folders'
			On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = '\<Limit search to project home directory and sub-folders'
			Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lLimitToProjectFolder
		Else
			lnBar = m.lnBar + 1
			Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<Include Subdirectories'
			On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Match \<Case'
			Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lIncludeSubdirectories
		Endif
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt 'Match \<Whole Word'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Match \<Whole Word'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lMatchWholeWord
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt 'Match \<Case'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Match \<Case'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lMatchCase
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt 'Search \<Comments'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Search \<Comments'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lSearchInComments
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\-'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<Ignore field RESERVED3 in SCXs / VCXs'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Ignore Properties field'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lIgnorePropertiesField
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AdvancedContextMenu Prompt '\<Ignore values in MemberData'
		On Selection Bar (m.lnBar) Of AdvancedContextMenu m.lcChoice = 'Ignore values in MemberData'
		Set Mark Of Bar (m.lnBar) Of AdvancedContextMenu To Thisform.oSearchOptions.lIgnoreMemberData
		
		* --------------------------------------------------------------------------------
		Activate Popup AdvancedContextMenu
		Release Popups AdvancedContextMenu
		* --------------------------------------------------------------------------------
		
		Do Case
			Case m.lcChoice = 'Plain Search'
				Thisform.oSearchOptions.nSearchMode = 1
			Case m.lcChoice = 'Wildcards (* and ?)'
				Thisform.oSearchOptions.nSearchMode = 2
			Case m.lcChoice = 'RegEx Search'
				Thisform.oSearchOptions.nSearchMode = 3
			Case m.lcChoice = '\<Limit search to project home directory and sub-folders'
				Thisform.oSearchOptions.lLimitToProjectFolder = Not Thisform.oSearchOptions.lLimitToProjectFolder
			Case m.lcChoice = '\<Include Subdirectories'
				Thisform.oSearchOptions.lIncludeSubdirectories = Not Thisform.oSearchOptions.lIncludeSubdirectories
			Case m.lcChoice = 'Match \<Case'
				Thisform.oSearchOptions.lMatchCase = Not Thisform.oSearchOptions.lMatchCase
			Case m.lcChoice = 'Match \<Whole Word'
				Thisform.oSearchOptions.lMatchWholeWord = Not Thisform.oSearchOptions.lMatchWholeWord
			Case m.lcChoice = 'Search \<Comments'
				Thisform.oSearchOptions.lSearchInComments = Not Thisform.oSearchOptions.lSearchInComments
			Case m.lcChoice = 'Ignore Properties field'
				Thisform.oSearchOptions.lIgnorePropertiesField = Not Thisform.oSearchOptions.lIgnorePropertiesField
			Case m.lcChoice = 'Ignore values in MemberData'
				Thisform.oSearchOptions.lIgnoreMemberData = Not Thisform.oSearchOptions.lIgnoreMemberData
		
		Endcase
		
		Thisform.Refresh()
		
		
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdHelp.Click
		ThisForm.ShowHelpForm()
	ENDPROC

	PROCEDURE ButtonContainer.cmdHelp.Refresh
		This.Enabled = !Thisform.lSearching
	ENDPROC

	PROCEDURE ButtonContainer.cmdOptions.Click
		ThisForm.ShowOptionsForm()
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdOptions.Refresh
		This.Enabled = !Thisform.lSearching&& and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE ButtonContainer.cmdRegexpHelp.Click
		Local lcChoice, lcValue, lnBar, lnSelStart, loEdit
		
		lcChoice = ''
		lnBar	 = 0
		CreateContextMenu('RegExpHelpMenu')
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '. Any single character'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '.'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '* Zero or more'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '*'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '+ One or more'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '+'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\-'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '^ Beginning of line'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '^'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '$ End of line'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '$'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '[] Any one character in the set'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '[]'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '[^] Any one character not in the set'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '[^]'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\-'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '| OR'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '|'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\\ Escape Special Character'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '\'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\\s White space (blank or tab)'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '\s'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\\s* Zero or more blanks or tabs'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '\s'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\\b Word boundary'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = '\b'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt '\-'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt 'VFP Help for RegExp'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = 'VFP Help'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of RegExpHelpMenu Prompt 'RegEx Cheat Sheet'
		On Selection Bar (m.lnBar) Of RegExpHelpMenu m.lcChoice = 'RegEx Cheat Sheet'
		
		* --------------------------------------------------------------------------------
		Activate Popup RegExpHelpMenu
		Release Popups RegExpHelpMenu
		* --------------------------------------------------------------------------------
		
		Do Case
			Case m.lcChoice = 'VFP Help'
				Help Id 1231103
			Case m.lcChoice = 'RegEx Cheat Sheet'
				Shell('http://tinyurl.com/qxv3e96')
			Case Not Empty(m.lcChoice)
				loEdit	   = Thisform.editSearch
				lcValue	   = m.loEdit.Value
				lnSelStart = m.loEdit.SelStart
		
				loEdit.Value = Left(m.lcValue, m.lnSelStart) + m.lcChoice + Substr(m.lcValue, lnSelStart + 1)
		Endcase
		
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdRegexpHelp.Refresh
		This.Visible = Thisform.oSearchOptions.nSearchMode = 3
	ENDPROC

	PROCEDURE ButtonContainer.cmdSearch.Click
		ThisForm.Search()
		
	ENDPROC

	PROCEDURE ButtonContainer.cmdSearch.Refresh
		This.Enabled = !Thisform.lSearching &&and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE ButtonContainer.cmdSearch.RightClick
		Do Form 'GF_Collection_Explorer' with This
		
	ENDPROC

	PROCEDURE ButtonContainer.comboViewPosition.Init
		This.AddItem('Plain search')
		This.AddItem('Wildcards (* and ?)')
		This.AddItem('Regular Expression')
		
	ENDPROC

	PROCEDURE ButtonContainer.comboViewPosition.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE ButtonContainer.comboViewPosition.Valid
		DoDefault()
		This.Parent.cmdRegexpHelp.Refresh()
		
	ENDPROC

	PROCEDURE ButtonContainer.Command1.Click
		Thisform.RestoreSearchFromHistory()
	ENDPROC

	PROCEDURE ButtonContainer.Command1.Refresh
		This.Enabled = !Thisform.lSearching&& and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE ButtonContainer.Command1.RightClick
		Local lcChoice, lnBar
		lcChoice = ''
		lnBar	 = 0
		CreateContextMenu('AccessContextMenu')
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AccessContextMenu Prompt '\<Restore last saved search'
		On Selection Bar (m.lnBar) Of AccessContextMenu m.lcChoice = 'Restore last search'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AccessContextMenu Prompt '\<Save last search'
		On Selection Bar (m.lnBar) Of AccessContextMenu m.lcChoice = 'Save last search'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AccessContextMenu Prompt '\<Browse saved search history'
		On Selection Bar (m.lnBar) Of AccessContextMenu m.lcChoice = 'Restore from history'
		
		lnBar = m.lnBar + 1
		
		Define Bar (m.lnBar) Of AccessContextMenu Prompt '\-'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AccessContextMenu Prompt 'Save \<All search results'
		On Selection Bar (m.lnBar) Of AccessContextMenu m.lcChoice = 'Save all search results'
		Set Mark Of Bar (m.lnBar) Of AccessContextMenu To Thisform.lSaveSearchResults
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of AccessContextMenu Prompt 'Restore \<Previous results on startup'
		On Selection Bar (m.lnBar) Of AccessContextMenu m.lcChoice = 'Restore previous results on startup'
		Set Mark Of Bar (m.lnBar) Of AccessContextMenu To Thisform.lRestorePreviousSearchResultsOnStartup
		
		
		Activate Popup AccessContextMenu
		Release Popups AccessContextMenu
		
		Do Case
			Case m.lcChoice = 'Save last search'
				Thisform.SaveSearchResults()
				Messagebox('Saved')
			Case m.lcChoice = 'Restore last search'
				Thisform.RestoreLastSearch()
			Case m.lcChoice = 'Restore from history'
				Thisform.RestoreSearchFromHistory()
		
			Case m.lcChoice = 'Save all search results'
				Thisform.lSaveSearchResults = Not Thisform.lSaveSearchResults
			Case m.lcChoice = 'Restore previous results on startup'
				Thisform.lRestorePreviousSearchResultsOnStartup = Not Thisform.lRestorePreviousSearchResultsOnStartup
		Endcase
		
		
		
	ENDPROC

	PROCEDURE ButtonContainer.Container1.chkApplyFilter.Valid
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE ButtonContainer.Container1.Refresh
		If thisform.oSearchEngine.oSearchOptions.lMatchWholeWord and !Thisform.lSearching
			This.BorderWidth = 2
		Else
			This.BorderWidth = 0
		EndIf 
		
	ENDPROC

	PROCEDURE ButtonContainer.Container2.chkApplyFilter.Valid
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE ButtonContainer.Container2.Refresh
		If Thisform.oSearchEngine.oSearchOptions.lMatchCase and !Thisform.lSearching
			This.BorderWidth = 2
		Else
			This.BorderWidth = 0
		EndIf 
		
	ENDPROC

	PROCEDURE ButtonContainer.Container3.chkApplyFilter.Valid
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE ButtonContainer.Container3.Refresh
		If Thisform.oSearchEngine.oSearchOptions.lSearchInComments = .F. and !Thisform.lSearching
			This.BorderWidth = 2
		Else
			This.BorderWidth = 0
		EndIf 
		
	ENDPROC

	PROCEDURE ButtonContainer.lblCodeView.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE ButtonContainer.lblSearchTime.Refresh
		Local lcFiles, lcMatchLines, lnSeconds
		
		lnSeconds = Thisform.oSearchEngine.nSearchTime
		lcMatchLines = Transform(Thisform.oSearchEngine.nMatchLines)
		lcFiles = Transform(Thisform.oSearchEngine.nFileCount)
		
		If Thisform.lInit and !thisform.lSearching
			Text To Thisform.cSearchResultsMessage Noshow Textmerge
		<<lcMatchLines>> lines
		<<lcFiles>> file(s)
		in <<Alltrim(Transform(lnSeconds, '99999.9'))>> seconds
			EndText 
		Else
			 Thisform.cSearchResultsMessage = ''
		Endif
		
		This.Caption = Thisform.cSearchResultsMessage 
		
		
	ENDPROC

	PROCEDURE ButtonContainer.Refresh
		This.Visible = !Thisform.lSearching && and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE comboSearchExpressionHistory.Refresh
		DoDefault()
		
		This.FontSize = Thisform.nSearchBoxFontSize
	ENDPROC

	PROCEDURE comboSearchExpressionHistoryDropDownArrow.GotFocus
		Local loCombo
		
		*-- Store current value of editbox. I the user presses ESCAPE in the actual combobox,
		*-- the oringal value can be recovered from here.
		This.Tag = This.Parent.editSearch.Value
		
		loCombo = This.Parent.comboSearchExpressionHistory
		
		With loCombo
			.ListIndex = 1
			.Visible = .T.
			.SetFocus()
		Endwith
		
		This.ZOrder(1)
		
		*-- Do this to force the combobox to drop down...
		Mouse Click At This.Top + Int(This.height / 2), This.Left + Int(This.width/2) PIXELS Window (Thisform.Name)
		
		*Keyboard '{ALT+DNARROW}' && To expand the actual dropdown listbox that holds all the values
	ENDPROC

	PROCEDURE comboSearchExpressionHistoryDropDownArrow.Init
		this.Top = this.Parent.editSearch.top
	ENDPROC

	PROCEDURE comboSearchExpressionHistoryDropDownArrow.Refresh
		This.Enabled = !Thisform.lSearching && and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE comboSearchScopeHistory.Refresh
		This.Enabled = !Thisform.lSearching && and !Thisform.lReplaceMode
		
		DoDefault()
		
		this.FontSize = Thisform.nSearchBoxFontSize
	ENDPROC

	PROCEDURE containerLeft.cntVersion.cmdVFPX.Click
		Shell('http://vfpx.org')
	ENDPROC

	PROCEDURE containerLeft.cntVersion.Gf_versionlabel1.Click
		Shell('https://github.com/VFPX/GoFishClassic')
		
	ENDPROC

	PROCEDURE containerLeft.cntVersion.Gf_versionlabel1.Refresh
		Local lcAppName, lcVersion
		
		lcAppName = JustStem(_Screen._GoFishClassic.cAppName)
		lcVersion = _Screen._GoFishClassic.cVersion
		
		Try
			This.Caption = 'Classic ' + lcVersion + Iif('BETA' $ Upper(lcAppName), ' Beta', '')
		Catch
			This.Caption = 'GoFish'
		Finally
		Endtry
		
		This.Caption = This.Caption + ' ... ' + Dtoc(_Screen._GoFishClassic.dBuildDate)
		
		
	ENDPROC

	PROCEDURE containerLeft.cntVersion.Refresh
		*	This.Visible = !Thisform.lSearching && and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE containerLeft.oTreeView.Click
		*** ActiveX Control Event ***
		
	ENDPROC

	PROCEDURE containerLeft.oTreeView.DblClick
		Local loPBT as 'GF_PEME_BaseTools'
		Local lcClass, lcExt, lcFile, lcKey, llClass, lnCount, loNode
		
		lcFile = ''
		lcExt = ''
		lcClass = ''
		llClass = .f.
		
		loNode = This.selectedItem
		lcKey = loNode.Key
		lnCount = Atc('_', lcKey, 2)
		lcFile = Substr(lcKey, lnCount + 1)
		lcExt = JustExt(lcFile)
		
		Do Case
			Case loNode.index = 1 or loNode.parent.index = 1 && One of the Main Root Nodes
				lcFile = ''
			
			Case not Eof(Thisform.cSearchResultsAlias)
				Thisform.oSearchEngine.EditFromCurrentRow(thisform.cSearchResultsAlias,,Thisform.lMoveNewCodeToTopLeft)
			
			Case 'O' = Vartype(loNode.Tag)
				lcFile = loNode.Tag.Filename
				lcClass = loNode.Tag.Class
				
			Case Empty(lcExt) or lnCount = 0
				lcClass = loNode.Text
				lcKey = This.selectedItem.parent.Key
				lnCount = Atc('_', lcKey, 2)
				lcFile = Substr(lcKey, lnCount + 1)
				If File(lcFile) and !Empty(lcClass)
					llClass = .t.
				Endif
				
		EndCase
		
		If Empty(lcFile) or !File(lcFile)
			Return
		Endif
		
		loPBT = CreateObject('GF_PEME_BaseTools')
		loPBT.EditSourceX(lcFile, lcClass, 0, 0, '')
		
		
		    
	ENDPROC

	PROCEDURE containerLeft.oTreeView.Init
		thisform.oTree = this
	ENDPROC

	PROCEDURE containerLeft.oTreeView.NodeClick
		Lparameters node
		
		ThisForm.ClickTreeviewNode(node)
		
		Return
		
		* ================================================================================
		* ================================================================================
		
		Lparameters node
		
		Local lcAlias, lcClass, lcFileType, lcFilename, lcFilter, lcFullFileName, lcFullSearchResults
		Local lcNewFilter, lnId, lnSelect, loClassLibsNode, loVcxNode
		
		lnSelect = Select()
		lcAlias = Thisform.cSearchResultsAlias
		lcFilter = ''
		
		*-- Build Filter clause for selected Node----------------------------
		Do Case
			Case node.index = 1 && Master top node
				lcFilter = ''
			
			Case node.parent.index = 1 && One of the Main Root Nodes
				lcFileType = Upper(GetWordNum(node.key, 2, '_'))
				Do Case
					Case lcFileType $ ' SCX VCX PRG FRX DBF PJX'
						lcFilter = 'Upper(Filetype) = [' + lcFileType + ']'
					Case Upper(lcFileType) = 'CLASSES'
						lcFilter = 'not Empty(class)'
					Otherwise 
						lcFilter = '!(Upper(Filetype) $ [ SCX VCX PRG FRX DBF PJX ])'
				Endcase
		
			Otherwise
				lnId = Val(GetWordNum(node.key, 2, '_'))
		
				If ThisForm.NavigateToMasterRecord(lnId)
					lcFilter = 'filepath = [' + Alltrim(filepath) + ']'
				Endif
		EndCase
		
		If 'CLASS_' $ Upper(node.key)
			lcFilter = Iif(Empty(lcFilter), '', lcFilter + ' and ') + 'class = [' + Alltrim(class) + ']'
		Endif
		
		*--- Merge Main form filter and TreeView filter
		If thisform.lApplyFilter and !Empty(Thisform.cFilter) and !Empty(lcFilter)
			lcNewFilter = Alltrim(Thisform.cFilter) + ' and ' + lcFilter
		Else
			lcNewFilter = lcFilter
		Endif
		
		Select(lcAlias) 
		Set Filter To &lcNewFilter
		Goto top
		
		Thisform.oGrid.SetFocus
		This.SetFocus() 
		*Thisform.Refresh()
		
		Select(lcAlias) 
		
		
	ENDPROC

	PROCEDURE containerLeft.oTreeView.Refresh
		*** ActiveX Control Method ***
		
	ENDPROC

	PROCEDURE containerRight.Container1.chkReplaceMode.Click
		If thisform.oSearchEngine.oSearchOptions.lEnableReplaceMode = .f.
			This.Value = .f.
			MessageBox('You must enable Replace Mode in the Options form before it can be used.', 32, 'Notice')
			Thisform.editSearch.SetFocus()
		Endif
		
		DoDefault()
		
		If thisform.lReplaceMode = .t.
		
			ThisForm.FocusOnReplacePageframe()
		
		EndIf
		
	ENDPROC

	PROCEDURE containerRight.Container1.chkReplaceMode.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdClassBrowser.Click
		Local lcClass, lcFile
		
		lcFile	= Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
		lcClass	= Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.class'))
		
		Do Case
			Case Empty(m.lcFile)
				Return
			Case Empty(m.lcClass)
				Do (_Browser) With m.lcFile
			Otherwise
				Do (_Browser) With m.lcFile, m.lcClass
		Endcase
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdClassBrowser.Refresh
		Local lcFile
		
		lcFile = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
		
		This.visible = !Empty(lcFile) and Upper(JustExt(lcFile)) = 'VCX'
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdEdit.Click
		Thisform.EditFile()
	ENDPROC

	PROCEDURE containerRight.Container1.cmdEdit.Refresh
		Local lcFile
		
		This.Enabled = Reccount(Thisform.cSearchResultsAlias) > 0
		
		lcFile = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
		This.visible = !Empty(lcFile)
		 
	ENDPROC

	PROCEDURE containerRight.Container1.cmdEdit.RightClick
		Local lcAlias, lcCode, lcMethod, lcTempFile, loEditorWin
		
		lcAlias	= (Thisform.cSearchResultsAlias)
		lcCode	= &lcAlias..ProcCode
		If Empty(m.lcCode)
			Return
		Endif
		
		lcMethod   = Trim(Evl(&lcAlias..MethodName, 'Method'))
		lcTempFile = Addbs(Sys(2023)) + m.lcMethod + Sys(2015) + '.prg'
		Strtofile(m.lcCode, m.lcTempFile)
		Modify command (m.lcTempFile) Nowait
		
		If IsThorThere()
			loEditorWin = Execscript(_Screen.cThorDispatcher, 'Class= editorwin from pemeditor')
			m.loEditorWin.SetTitle(m.lcTempFile)
			ThisForm.oSearchEngine.ThorMoveWindow()
		Endif
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdGoToObject.Click
		Thisform.editObjectfromCurrentRow()
	ENDPROC

	PROCEDURE containerRight.Container1.cmdGoToObject.Refresh
		Local lcFile, lcMatchType, lcName
		
		If IsThorThere()
			lcFile		= Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
			lcName		= Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.name'))
			lcMatchType	= Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.MatchType'))
		
			This.Visible = Not Empty(m.lcName)							;
				And Not Empty(m.lcFile)									;
				And Inlist(Upper(Justext(m.lcFile)), 'SCX', 'VCX')		;
				And 0 = Atc(m.lcMatchType, MatchType_Name + MATCHTYPE_PROPERTY_NAME + MATCHTYPE_PROPERTY_VALUE + MATCHTYPE_PROPERTY_DEF)
		Else
			This.Visible = .F.
		Endif
	ENDPROC

	PROCEDURE containerRight.Container1.cmdMenu.Click
		Thisform.EditMenufromCurrentRow()
	ENDPROC

	PROCEDURE containerRight.Container1.cmdMenu.Refresh
		Local lcFile, lcName
		
		If IsThorThere()
			lcFile		 = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
			This.Visible = Not Empty(m.lcFile) And Inlist(Upper(Justext(m.lcFile)), 'MNX', 'MPR')
		Else
			This.Visible = .F.
		Endif
	ENDPROC

	PROCEDURE containerRight.Container1.cmdOpenExplorer.Click
		Local lcPath, lcFile
		
		lcFile = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
		
		If Empty(lcFile)
			Return
		Endif
		
		OpenExplorerWindow(lcFile)
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdOpenExplorer.Refresh
		Local lcFile
		
		lcFile = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
		
		This.visible = !Empty(lcFile)
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdReport.Click
		Local lcChoice, lnBar
		lcChoice = ''
		lnBar	 = 0
		CreateContextMenu('ExportContextMenu')
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of ExportContextMenu Prompt 'To DBF or XLSX'
		On Selection Bar (m.lnBar) Of ExportContextMenu m.lcChoice = 'To DBF or XLSX'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of ExportContextMenu Prompt 'To Cursor'
		On Selection Bar (m.lnBar) Of ExportContextMenu m.lcChoice = 'To Cursor'
		
		lnBar = m.lnBar + 1
		Define Bar (m.lnBar) Of ExportContextMenu Prompt 'View in Browser'
		On Selection Bar (m.lnBar) Of ExportContextMenu m.lcChoice = 'View in Browser'
		
		
		
		Activate Popup ExportContextMenu
		Release Popups ExportContextMenu
		
		Do Case
			Case m.lcChoice = 'To DBF or XLSX'
				Thisform.ExportToExcel(.T.)
			Case m.lcChoice = 'To Cursor'
				Thisform.ExportToExcel(.F.)
			Case m.lcChoice = 'View in Browser'
				Thisform.ViewReport()
		Endcase
		
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.cmdReport.Refresh
		This.Visible = !Thisform.lSearching and !Eof(Thisform.cSearchResultsAlias) && and !Thisform.lReplaceMode
	ENDPROC

	PROCEDURE containerRight.Container1.cmdSearchErrors.Click
		ThisForm.ShowSearchErrors()
		
		*-- For now, Object Inspector slow VFP way down, so can't use it until that gets fixed.
		*!*	Local loInspector
		
		*!*	loInspector = ExecScript(_Screen.cThorDispatcher, "Class= inspector from inspector")
		
		*!*	If Vartype(loInspector) = 'O' 
		*!*		loInspector.oRoot = Thisform.oSearchEngine.oSearchErrors
		*!*		loInspector.Caption = 'GoFish Search Errors:'
		*!*		loInspector.Show()
		*!*	Endif
		
		
		 
	ENDPROC

	PROCEDURE containerRight.Container1.cmdSearchErrors.Refresh
		This.Visible = (Thisform.oSearchEngine.oSearchErrors.Count > 0) and !thisform.lSearching
	ENDPROC

	PROCEDURE containerRight.Container1.Command1.Click
		ThisForm.ShowGoFishHelpPage()
	ENDPROC

	PROCEDURE containerRight.Container1.Command1.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.chkApplyFilter.Click
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.chkApplyFilter.Valid
		Thisform.ApplyFilter()
		ThisForm.UpdateTreeView()
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.cmdFilter.Click
		ThisForm.ShowFilterForm('GoFish_FilterPF')
		This.Parent.Parent.gridFiles.Refresh()
		This.Parent.Parent.gridFiles.SetFocus()
		
		External form GoFish_Filter
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.cmdFilter.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		Local lcFilter
		
		lcFilter = Evl(Filter(Thisform.cSearchResultsAlias), '')
		lcFilter = Strtran(lcFilter, ".And.", Chr[13] + '   And ', 1, -1, 1)
		
		This.ToolTipText = lcFilter
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.cmdFilter.Refresh
		Local lcFilter
		This.FontBold = Not Empty(Thisform.cFilter)&& and Thisform.lApplyFilter
		
		This.Enabled = Reccount(Thisform.cSearchResultsAlias) > 0 And Not Thisform.lSearching &&and !Thisform.lReplaceMode
		
		This.Parent.chkApplyFilter.Enabled = This.Enabled And Not Empty(Thisform.cFilter)
		
		lcFilter = Evl(Thisform.cFilter, '')
		lcFilter = Strtran(m.lcFilter, '.And.', Chr[13] + '   And ', 1, -1, 1)
		
		This.ToolTipText = Iif(Thisform.lApplyFilter, '', '*** Not currently active ***' + Chr[13]) + m.lcFilter
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.cmdFilter.RightClick
		Local lcFilter
		
		lcFilter = Evl(Filter(Thisform.cSearchResultsAlias), '')
		lcFilter = Strtran(lcFilter, ".And.", Chr[13] + '   And ', 1, -1, 1)
		
		lcFilter = Iif(Thisform.lApplyFilter, '', '*** Not currently active ***' + Chr[13]) + m.lcFilter
		MessageBox(lcFilter, 0, 'GoFish Filter') 
	ENDPROC

	PROCEDURE containerRight.Container1.Container1.Refresh
		If Thisform.lApplyFilter and Reccount(Thisform.cSearchResultsAlias) > 0 and !Thisform.lSearching
			This.BorderWidth = 2
		*	this.BorderColor = Rgb(255,0,0)
			this.BorderColor = Thisform.nContainerFrameColour
		Else
			This.BorderWidth = 1
			this.BorderColor = Rgb(0,0,0)
		EndIf 
		
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container2.Check1.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container2.Check1.Valid
		Local lcFilter
		
		If This.Value
			Thisform.lCodeOnly = .F.
		EndIf 
		
		lcFilter = Thisform.ApplyFilter()
		
		If Empty(Thisform.cTreeViewFilter)
			Thisform.UpdateTreeView()
		Else
			lcFilter = Thisform.CombineFilters(m.lcFilter, Thisform.cTreeViewFilter)
			Set Filter To &lcFilter In (Thisform.cSearchResultsAlias)
		Endif
		
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container2.chkCodeOnly.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container2.chkCodeOnly.Valid
		Local lcFilter
		
		If This.Value
			Thisform.lCommentsOnly = .F.
		EndIf 
		
		lcFilter = Thisform.ApplyFilter()
		
		If Empty(Thisform.cTreeViewFilter)
			Thisform.UpdateTreeView()
		Else
			lcFilter = Thisform.CombineFilters(m.lcFilter, Thisform.cTreeViewFilter)
			Set Filter To &lcFilter In (Thisform.cSearchResultsAlias)
		Endif
		
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.Container2.Refresh
		Do Case
			Case Thisform.lSearching
				This.BorderWidth = 0
			Case Thisform.lCodeOnly Or Thisform.lCommentsOnly
				This.BorderWidth = 2
				This.BorderColor = Rgb(255, 0, 0)
			Otherwise 
				This.BorderWidth = 1
				This.BorderColor = Rgb(0, 0, 0)
		Endcase
		
		DoDefault()
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.cmdReplaceErrors.Click
		ThisForm.ShowReplaceErrors()
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.cmdReplaceErrors.Refresh
		This.Visible = (Thisform.oSearchEngine.oReplaceErrors.Count > 0) and !thisform.lSearching
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.cmdReplaceHistory.Click
		Thisform.ShowReplaceHistory()
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.cmdReplaceHistory.Refresh
		This.Visible = Thisform.lReplaceMode
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.optiongroupReplaceMode.optionAdvancedReplace.Valid
		ThisForm.FocusOnReplacePageframe()
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.optiongroupReplaceMode.Refresh
		This.Visible = (Thisform.nReplaceRisk > 0) And ;
						Thisform.oSearchEngine.oSearchOptions.lEnableReplaceMode = .T. ;
						And Thisform.lReplaceMode = .T.
		
		If Thisform.oSearchEngine.oSearchOptions.lEnableReplaceMode = .F.
			Thisform.lReplaceMode = .F.
		Endif
		
		
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdCheckAll.Click
		ThisForm.CheckAll()
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdCheckAll.Refresh
		This.Visible = Thisform.lReplaceMode and Thisform.nReplaceMode <> 2
		
		This.Enabled = (Reccount(Thisform.cSearchResultsAlias) > 0)
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdClearAll.Click
		ThisForm.ClearAll()
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdClearAll.Refresh
		This.Visible = Thisform.lReplaceMode and Thisform.nReplaceMode <> 2
		
		This.Enabled = (Reccount(Thisform.cSearchResultsAlias) > 0)
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdReplace.Click
		ThisForm.Replace()
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.cmdReplace.Refresh
		This.Enabled = Reccount(Thisform.cSearchResultsAlias) > 0
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.editReplaceExpression.GotFocus
		This.SelStart = 0
		This.SelLength = Len(This.Value)
		this.Tag = this.value
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page1.editReplaceExpression.LostFocus
		If this.Value <> this.Tag
			Thisform.DoReplace(.t.) && .t. means do a "Preview" Replace
		Endif
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page2.cmdSaveLine.Click
		Thisform.ReplaceLine()
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page2.cmdSaveLine.Refresh
		Local lcCursor, llReplaced, lnRiskLevel
		
		lcCursor = Thisform.cSearchResultsAlias
		lnRiskLevel = &lcCursor..ReplaceRisk
		llReplaced = &lcCursor..Replaced
		
		This.Enabled = Reccount(Thisform.cSearchResultsAlias) > 0 and (lnRiskLevel <= Thisform.nReplaceRisk) and !llReplaced 
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page2.editReplaceLine.Refresh
		Local lcCursor, llReplaced, lnRiskLevel
		
		lcCursor = Thisform.cSearchResultsAlias
		lnRiskLevel = &lcCursor..ReplaceRisk
		llReplaced = &lcCursor..Replaced
		
		This.Enabled = !Eof(lcCursor) and (lnRiskLevel <= Thisform.nReplaceRisk) and !llReplaced   
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page2.editReplaceLine.Valid
		Local lcCursor, llReplaced, lnRiskLevel
		
		*!*	Replace ReplaceLine with This.Value in (Thisform.cSearchResultsAlias)
		*!*	Replace TrimmedReplaceLine with Thisform.oSearchEngine.TrimWhiteSpace(This.value)	in (Thisform.cSearchResultsAlias)
		
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdBrowse.Click
		lcFile = GetFile('PRG', '', 'Select', 0, 'Choose UDF File:')
		
		If Empty(lcFile)
			Thisform.oSearchEngine.cReplaceUDFCode = ''
			Thisform.cReplaceUDFFilename = ''
		Else
			Thisform.oSearchEngine.cReplaceUDFCode = FileToStr(lcFile)
			Thisform.cReplaceUDFFilename = lcFile
		Endif
		
		Thisform.DoReplace(.t.)
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdCheckAll.Click
		ThisForm.CheckAll()
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdCheckAll.Refresh
		This.Visible = Thisform.lReplaceMode and Thisform.nReplaceMode <> 2
		
		This.Enabled = (Reccount(Thisform.cSearchResultsAlias) > 0)
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdClearAll.Click
		ThisForm.ClearAll()
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdClearAll.Refresh
		This.Visible = Thisform.lReplaceMode and Thisform.nReplaceMode <> 2
		
		This.Enabled = (Reccount(Thisform.cSearchResultsAlias) > 0)
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdEdit.Click
		Local lcFile
		
		lcFile = Thisform.cReplaceUDFFilename
		Modify Command (lcFile)  
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdEdit.Refresh
		This.Enabled = !Empty(Thisform.cReplaceUDFFilename)
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdReplace.Click
		ThisForm.Replace()
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.cmdReplace.Refresh
		This.Enabled = !Empty(Thisform.cReplaceUDFFilename) and ;
						!Empty(Thisform.oSearchEngine.cReplaceUDFCode) and ;
						Reccount(Thisform.cSearchResultsAlias) > 0
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Page3.Text1.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		This.ToolTipText = This.Value
		
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Pageframe.Refresh
		This.ActivePage = Thisform.nReplaceMode
	ENDPROC

	PROCEDURE containerRight.Container1.containerReplaceText.Refresh
		This.Visible = Thisform.lReplaceMode
		
		*!*	llEnableControls = (Reccount(Thisform.cSearchResultsAlias) > 0)
		
		*!*	This.SetAll('Enabled', llEnableControls)
		
		*!*	This.cmdHelp.Enabled = .t.
		*!*	This.cmdReplaceHistory.Enabled = .t.
		
		*!*	lnColor = Rgb(128,128,128)
		
		*!*	Do Case
		*!*		Case Thisform.nReplaceRisk = 1 
		*!*			lnColor = Rgb(0,176,80)&& Green
		
		*!*		Case Thisform.nReplaceRisk = 2
		*!*			lnColor = Rgb(255,255,128) && Yellow
		
		*!*		Case Thisform.nReplaceRisk = 3
		*!*			lnColor = Rgb(255,192,0)&& Orange
		*!*	Endcase
		
		*!*	This.BackColor = lnColor
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.GridFiles.AfterRowColChange
		Lparameters nColIndex
		
		ThisForm.ShowCodeForCurrentRow()
		
		
		 
	ENDPROC

	PROCEDURE containerRight.Container1.GridFiles.colProcess.Check1.Click
		Local lcCursor, llValue
		
		DoDefault()
		
		llProcess = Evaluate(Thisform.cSearchResultsAlias + '.process')
		lnId = Evaluate(Thisform.cSearchResultsAlias + '.id')
		
		*-- Update GFSE cursor for same Id
		Replace process with llProcess in (Thisform.oSearchEngine.cSearchResultsAlias) for id = lnId
		
		If Thisform.nReplaceMode = 3 and (Empty(Thisform.cReplaceUDFFilename) or Empty(Thisform.oSearchEngine.cReplaceUdfCode))
			Return
		Endif
		
		Thisform.oSearchEngine.oSearchOptions.lPreviewReplace = .T.
		Thisform.oSearchEngine.ReplaceFromCurrentRow(Thisform.cSearchResultsAlias)
		
		Thisform.ShowCodeForCurrentRow(.T.)
		
		*This.Parent.Parent.AfterRowColChange()
		
		
	ENDPROC

	PROCEDURE containerRight.Container1.GridFiles.colProcess.Check1.When
		Local lcCursor
		
		lcCursor = thisform.cSearchResultsAlias
		
		Return !(Evaluate(lcCursor + '.replaced')) 
	ENDPROC

	PROCEDURE containerRight.Container1.GridFiles.Init
		*Local lcFormatGridPrg, lcPRG, lcPRGColor, lcResultsCursor, lcSCX, lcSCXColor, lcVCX, lcVCXColor, lcAppPath
		
		Thisform.oGrid = This
		
		*SF 20221016 added colour options
		* moved code to method of the , to allow call from options change
		THISFORM.Set_GridColour
		
		*!*	lcResultsCursor = Thisform.cSearchResultsAlias
		
		*!*	lcFormatGridPrg = 'GoFish_FormatGrid.PRG'
		
		*!*	* First choice: Thor
		*!*	If Type('_Screen.cThorDispatcher') = 'C'
		*!*		lcFileName = Execscript(_Screen.cThorDispatcher, 'Full Path=Thor_Proc_GoFish_FormatGrid.PRG')
		*!*		If (Not Isnull(m.lcFileName)) and File(lcFileName)
		*!*			lcFormatGridPrg = m.lcFileName
		*!*		Endif
		*!*	Endif
		
		
		*!*	If !File(lcFormatGridPrg) && If not found in the VFP path
		*!*		lcFormatGridPrg = Addbs(_Screen._GoFishClassic.capppath) + lcFormatGridPrg && Look for it in the GoFish folder.
		*!*	EndIf
		
		*!*	If File (lcFormatGridPrg) && Call user file to assign colors, if present, otherwise use default
		*!*	      Do (lcFormatGridPrg) with This, lcResultsCursor
		*!*	Else
		
		*!*		lcSCX = 'Upper(' + lcResultsCursor + '.filetype) = "SCX"'
		*!*		lcSCXColor = 'RGB(0,0,128)'
		
		*!*		lcVCX = 'Upper(' + lcResultsCursor + '.filetype) = "VCX"'
		*!*		lcVCXColor = 'RGB(0,128,0)'
		
		*!*		lcPRG = 'Upper(' + lcResultsCursor + '.filetype) $ "PRG TXT H INI XML HTM HTML ASP ASPX"'
		*!*		lcPRGColor = 'RGB(255,0,0)'
		*!*		
		*!*		This.SetAll('DynamicForeColor', 'Iif(' + lcSCX + ', ' + lcSCXColor + ', ' +  ;
		*!*				'Iif(' + lcVCX + ', ' + lcVCXColor + ', ' + ;
		*!*				'Iif(' + lcPRG + ',' + lcPRGColor + ', RGB(0,0,0))' + ;
		*!*				')' + ;
		*!*				')', 'COLUMN')
		*!*	Endif
		
		This.ReadOnly = .F.
		This.SetAll('Width', 80, 'Column')
		This.SetAll('ReadOnly', .T., 'Column')
		This.colProcess.ReadOnly = .F.
		
		This.SetAll('Movable', .t., 'Column') 
		*SF 20221016 added colour options
		
	ENDPROC

	PROCEDURE containerRight.Container1.GridFiles.Refresh
		This.Enabled = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container1.lblResults.Refresh
		
		Local laFileCount[1], laRecordCount[1], lcCursor, lcFilter, lcMessage, llFiltered, lnRecords
		Local lnSeconds, loSearchEngine
		
		loSearchEngine = Thisform.oSearchEngine
		
		lcCursor = Thisform.cSearchResultsAlias
		lcFilter = Filter(lcCursor)
		lnSeconds = thisform.oSearchEngine.nSearchTime
		lcMessage = ''
		
		If Empty(lcFilter)
			lcFilter = '1=1'
		EndIf
		
		lnRecords = Reccount(lcCursor)
		
		Select Count(*) from (Select filename distinct from &lcCursor where &lcFilter order by 1) temp into array laFileCount
		Select Count(*) from (Select matchline from &lcCursor where &lcFilter) temp into array laRecordCount
		
		llFiltered = !Empty(Filter(lcCursor))
		
		Do Case
			*-- If we have a filter, but it results in no results being displayed...
			Case !Thisform.lInit
				lcMessage = ''
				
			Case Thisform.oSearchEngine.nMatchLines = 0 and Thisform.oSearchEngine.lEscPress = .t.
				lcMessage = 'No Results'
		
			Case Thisform.lSearching = .t.
				lcMessage = 'Searching...'
		
			Case Thisform.oSearchEngine.nMatchLines > 0 and !Empty(Thisform.cFilter) and Eof(Thisform.cSearchResultsAlias) 
				lcMessage = 'No matches on specified filter.'
				
			Case Thisform.oSearchEngine.nMatchLines = 0
				lcMessage = 'No matches found.'
		
			Otherwise 
				lcMessage = Iif(llFiltered, 'Filtered to ', '') + ; 
										Alltrim(Str(laRecordCount)) + ;
										Iif(Empty(thisform.oSearchEngine.oSearchOptions.cSearchExpression), ' matches ', ' match lines') + ;
										' in ' + Alltrim(Str(laFileCount)) + ' File(s)'
		Endcase
		
		Thisform.cResultsMessage = lcMessage
		
		This.Caption = lcMessage
		
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.ButtonContainer.lblFilePath.Refresh
		#Define Spacing Space(4)
		
		Local lcBaseClass, lcClass, lcFilePath, lcMatchType, lcMethod, lcMethodName, lcObjectName
		Local lcRelativePath, lcTimeStamp, lnMaxWidth, ltTimeStamp
		
		lcFilePath	   = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.filepath'))
		
		ltTimeStamp	= Evaluate(Thisform.cSearchResultsAlias + '.timestamp')
		lcTimeStamp	= Iif(Not Empty(m.ltTimeStamp), Ttoc(m.ltTimeStamp), '')
		
		lcClass = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.Class'))
		If Not Empty(m.lcClass)
			lcBaseClass = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.BaseClass'))
			If Not Empty(m.lcBaseClass)
				lcClass = m.lcClass + ' (' + m.lcBaseClass + ')'
			Endif
		
		Endif
		
		lcObjectName = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.Name'))
		lcMethodName = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.MethodName'))
		lcMatchType	 = Alltrim(Evaluate(Thisform.cSearchResultsAlias + '.MatchType'))
		
		Do Case
			Case Empty(m.lcObjectName) And Empty(m.lcMethodName)
				lcMethod = ''
			Case Empty(m.lcObjectName)
				lcMethod =  m.lcMethodName + '()'
			Case Empty(m.lcMethodName)
				lcMethod =  m.lcObjectName
			Otherwise
				lcMethod =  m.lcObjectName + '.' + m.lcMethodName + '()'
		Endcase
		
		This.ToolTipText =  'File: ' + m.lcFilePath																;
			+ Iif(Empty(m.lcClass), '', CR + 'Class: ' + m.lcClass)										;
			+ Iif(Empty(m.lcObjectName), '', CR + 'Object: ' + m.lcObjectName)							;
			+ Iif(Empty(m.lcMethodName), '', CR + Iif(0 # Atc('<Property', m.lcMatchType), 'Property: ', 'Method: ') + m.lcMethodName) ;
			+ CR + m.lcTimeStamp
		
		lnMaxWidth	   = This.Parent.Width - This.Left - 10
		lcRelativePath = Sys(2014, m.lcFilePath, Curdir())
		
		This.Caption =  Left(m.lcFilePath + Iif(Empty(m.lcClass), '', Spacing + m.lcClass) + Iif(Empty(m.lcMethod), '', Spacing + m.lcMethod) + Spacing + m.lcTimeStamp, 255)
		If This.Width <= m.lnMaxWidth
			Return
		Endif
		
		lcFilePath	 = Lower(m.lcFilePath)
		This.Caption =  Left(m.lcFilePath + Iif(Empty(m.lcClass), '', Spacing + m.lcClass) + Iif(Empty(m.lcMethod), '', Spacing + m.lcMethod) + Spacing + m.lcTimeStamp, 255)
		If This.Width <= m.lnMaxWidth
			Return
		Endif
		
		* consider relative path
		If Len(m.lcRelativePath) < Len(m.lcFilePath) And Not '..\..\..\' $ m.lcRelativePath And Not ':' $ m.lcRelativePath
			lcFilePath	 = Lower(m.lcRelativePath)
			This.Caption =  Left(m.lcFilePath + Iif(Empty(m.lcClass), '', Spacing + m.lcClass) + Iif(Empty(m.lcMethod), '', Spacing + m.lcMethod) + Spacing + m.lcTimeStamp, 255)
			If This.Width <= m.lnMaxWidth
				Return
			Endif
		Endif
		
		This.Caption =  Left(m.lcFilePath + Iif(Empty(m.lcClass), '', Spacing + m.lcClass) + Iif(Empty(m.lcMethod), '', Spacing + m.lcMethod), 255)
		If This.Width <= m.lnMaxWidth
			Return
		Endif
		
		This.Caption =  Left(m.lcFilePath + Iif(Empty(m.lcClass), '', Spacing + m.lcClass), 255)
		If This.Width <= m.lnMaxWidth
			Return
		Endif
		
		This.Caption =  Left(m.lcFilePath, 255)
		If This.Width <= m.lnMaxWidth
			Return
		Endif
		
		This.Caption =  'See tooltip'
		
		
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.cmdCompressCodeview.Click
		Local lnRestorePos, loSplitter
		
		With This.Parent.Parent.Parent
			loSplitter			= .Splitter1
			.Splitter1.Visible	= .T.
			.Container1.Visible	= .T.
		Endwith
		
		Do Case
			Case Thisform.lMaximizeCodeView 
				m.loSplitter.MoveSplitterToPosition(Thisform.Height - 30)
			Case This.Parent.Height > 55
				Thisform.nSplitterPosRatio = m.loSplitter.Top / Thisform.Height
				m.loSplitter.MoveSplitterToPosition(Thisform.Height - 30)
			Otherwise
				lnRestorePos = Int(Evl(Thisform.nSplitterPosRatio, .50) * Thisform.Height)
				m.loSplitter.MoveSplitterToPosition(m.lnRestorePos)
		EndCase
		
		Thisform.lMaximizeCodeView = .F.
		
		This.Parent.Refresh()
		
		Thisform.editSearch.SetFocus()
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.cmdCompressCodeview.Refresh
		This.Visible = .T.
		Do Case
			Case Thisform.nCodeWindowPosition = 1 And This.Parent.Height > 55
				This.Picture	 = 'images\Minimizecodeview.gif'
				This.ToolTipText = 'Collapse code view'
				This.Visible	 = Not Thisform.lSearching
			Case Thisform.nCodeWindowPosition = 1
				This.Picture	 = 'images\Restorecodeview.gif'
				This.ToolTipText = 'Expand code view'
				This.Visible	 = Not Thisform.lSearching
			Otherwise
				This.Visible = .F.
		Endcase
		
		
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.cmdMaximizeCodeView.Click
		Local lnRestorePos, loSplitter
		
		Do Case
			Case Thisform.nCodeWindowPosition = 1 and Thisform.lMaximizeCodeView = .T.
				Thisform.lMaximizeCodeView = .F.
				With This.Parent.Parent.Parent
					loSplitter			= .Splitter1
					.Splitter1.Visible	= .T.
					.Container1.Visible	= .T.
				Endwith
				lnRestorePos = Int(Evl(Thisform.nSplitterPosRatio, .50) * Thisform.Height)
				m.loSplitter.MoveSplitterToPosition(m.lnRestorePos)
		
				Thisform.oBrowser.SetFocus()
				Thisform.editSearch.SetFocus()
		
			Case Thisform.nCodeWindowPosition = 1 and Thisform.lMaximizeCodeView = .F. and This.Parent.Height > 55
				With This.Parent.Parent.Parent
					loSplitter			= .Splitter1
				Endwith
				Thisform.nSplitterPosRatio = m.loSplitter.Top / Thisform.Height
				Thisform.lMaximizeCodeView = Not Thisform.lMaximizeCodeView
		
			Otherwise
				Thisform.lMaximizeCodeView = Not Thisform.lMaximizeCodeView
		Endcase
		
		
		This.Parent.Refresh()
		
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.cmdMaximizeCodeView.Refresh
		*!* ******************** Removed 11/20/2015 *****************
		*!* Do Case
		*!* 	Case Thisform.lMaximizeCodeView = .F.
		*!* 		This.Picture	 = 'images\zoom-in-2-16.bmp'
		*!* 		This.ToolTipText = 'Maximize code view (Ctrl+F11)'
		*!* 	Case Thisform.nCodeWindowPosition = 1
		*!* 		This.Picture	 = 'images\zoom-out-2-16.bmp'
		*!* 		This.ToolTipText = 'Restore to non-collapsed view (Ctrl+F11)'
		*!* 	Otherwise
		*!* 		This.Picture	 = 'images\zoom-out-2-16.bmp'
		*!* 		This.ToolTipText = 'Restore Down code view (Ctrl+F11)'
		*!* Endcase
		
		
		Do Case
			Case Thisform.nCodeWindowPosition = 1 and Thisform.lMaximizeCodeView = .T.
				This.Picture	 = 'images\restorecodeview.gif'
				This.ToolTipText = 'Restore to non-collapsed view (Ctrl+F11)'
			Case Thisform.nCodeWindowPosition = 1 and Thisform.lMaximizeCodeView = .F.
				This.Picture	 = 'images\maximizecodeview.gif'
				This.ToolTipText = 'Maximize code view (Ctrl+F11)'
			Case Thisform.lMaximizeCodeView = .T.
				This.Picture	 = 'images\Restore.bmp'
				This.ToolTipText = 'Restore Down code view (Ctrl+F11)'
			Case Thisform.lMaximizeCodeView = .F.
				This.Picture	 = 'images\maximize.bmp'
				This.ToolTipText = 'Maximize code view (Ctrl+F11)'
		Endcase
		
		This.Visible = Not Thisform.lSearching
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.cmdZoomIn.Refresh
		This.Enabled = Reccount(Thisform.cSearchResultsAlias) > 0
		This.Visible = (This.Parent.Height > 55) And Not Thisform.lSearching
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.cmdZoomOut.Refresh
		This.Enabled = Reccount(Thisform.cSearchResultsAlias) > 0
		This.Visible = (This.Parent.Height > 55) And Not Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.comboViewPosition.Init
		This.AddItem('Below')
		This.AddItem('Right')
		This.AddItem('Left')
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.comboViewPosition.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.Init
		Thisform.oWebControl = This
		
		DoDefault()
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.lblCodeView.Refresh
		This.Visible = !Thisform.lSearching
		
	ENDPROC

	PROCEDURE containerRight.Container2.containerWebControl.Resize
		ThisForm.ResizeCodePage()
		
	ENDPROC

	PROCEDURE containerRight.Splitter1.movesplittertoposition
		lparameters tnPosition
		
		DoDefault(tnPosition)
		
		If This.Parent.container2.Height < 55	
			Thisform.ShowHtmlCodeView()
		Endif
		
		Thisform.Refresh() 
	ENDPROC

	PROCEDURE editSearch.GotFocus
		This.Tag = Upper(This.Value)
		
		This.SelStart = 0
		This.SelLength = Len(This.Value)
	ENDPROC

	PROCEDURE editSearch.InteractiveChange
		Local lcFillerChar, lcIllegalCharacters, lcValue
		
		lcValue = This.value
		lcFillerChar = Chr(8)
		
		For x = 1 to 31
			If !lcIllegalCharacters 
				lcIllegalCharacters = Chr(x) $ lcValue
			Endif
			
			lcValue = Strtran(lcValue, Chr(x), lcFillerChar) 
		EndFor
		
		If lcIllegalCharacters
			MessageBox('The search expression contains invalid characters, which will be replaced with "' + lcFillerChar + '"' + ;
						Chr(13) + Chr(13) +;
						'You must correct the search expression before searching will work correctly.', 16, 'GoFish notice:')
		Endif
		
		This.value = lcValue
		this.Parent.comboSearchExpressionHistory.Value = lcValue
		  
	ENDPROC

	PROCEDURE editSearch.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		lcControlSource = This.ControlSource
		
		Store this.value to &lcControlSource
		
		If nKeyCode = 13
			Thisform.Search()
		EndIf
		
		If nKeyCode = 160 && '{ALT+DNARROW}'
			Thisform.comboSearchExpressionHistoryDropDownArrow.SetFocus()
		Endif
		
	ENDPROC

	PROCEDURE editSearch.LostFocus
		Return
		
		
		*!*	If Upper(This.Value) <> This.Tag
		*!*		Thisform.nCurrentId = 0
		*!*		Thisform.oTree.Nodes.Clear()
		*!*		Thisform.ClearSearchResultsCursor()
		*!*		lcFilter = Thisform.cFilter
		*!*		Set Filter To &lcFilter in (thisform.cSearchResultsAlias) && Need to remove any filter that the Treeview has applied	
		*!*		Thisform.ShowHtml('&nbsp')	
		*!*		Thisform.Refresh()
		*!*	EndIf
		
		
	ENDPROC

	PROCEDURE editSearch.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		This.ToolTipText = This.value
	ENDPROC

	PROCEDURE editSearch.Refresh
		This.Enabled = Not Thisform.lSearching && and !Thisform.lReplaceMode
		
		This.FontSize = Thisform.nSearchBoxFontSize
	ENDPROC

	PROCEDURE lblScope.Refresh
		This.Enabled = !Thisform.lSearching
	ENDPROC

	PROCEDURE lblSearch.Refresh
		This.Enabled = !Thisform.lSearching
	ENDPROC

	PROCEDURE ProgressBar.Init
		This.Visible = .f.
		
	ENDPROC

	PROCEDURE ProgressBar.start
		Lparameters tnMaxValue, lcCaption
		
		This.Left = Thisform.splitter2.Left + 20 + Thisform.containerRight.Container1.Left
		This.Top = Thisform.oGrid.Top + 85
		This.Label1.Caption = Evl(lcCaption, 'Searching...')
		
		DoDefault(tnMaxValue)
	ENDPROC

	PROCEDURE timerShowAdvancedForm.Timer
		If thisform.lInit = .t.
			This.Interval = 0
			Thisform.ShowAdvancedForm()
		Endif
		
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_textboxcontainer AS gf_filtercheckboxcontainer OF "gofishui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txt1" UniqueID="" Timestamp="" />

	*<PropValue>
		Height = 390
		Name = "gf_textboxcontainer"
		_memberdata = <VFPData>
			<memberdata name="clear" display="Clear"/>
		</VFPData>
		Label1.Name = "Label1"
		Command1.Caption = "Clear"
		Command1.Height = 21
		Command1.Left = 10
		Command1.Name = "Command1"
		Command1.Top = 366
		Command1.Width = 43
		Command2.Left = 65
		Command2.Name = "Command2"
		Command2.Top = 366
		Command2.Visible = .F.
		LINE1.Name = "LINE1"
		LINE2.Name = "LINE2"
	*</PropValue>

	ADD OBJECT 'txt1' AS textbox WITH ;
		Anchor = 10, ;
		ControlSource = "", ;
		Height = 23, ;
		Left = 7, ;
		MaxLength = 255, ;
		Name = "txt1", ;
		Top = 26, ;
		Width = 206
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE clear
		this.txt1.Value = ''
		This.ClearDecoration()
	ENDPROC

	PROCEDURE decorate
		llDecorate = This.ShouldBeDecorated()
		
		This.ClearDecoration()
		
		If llDecorate
			DoDefault()
		EndIf
		
	ENDPROC

	PROCEDURE Init
		Local lcPrefix
		
		If !Empty(This.Label1.Tag) && Tag can override caption to set controlsource
			lcPrefix = Strtran(This.Label1.Tag, ' ', '')
		Else
			lcPrefix = Strtran(This.Label1.Caption, ' ', '')
		Endif
		
		This.txt1.ControlSource =  lcPrefix + '_Filter'
	ENDPROC

	PROCEDURE Refresh
		This.Decorate()
	ENDPROC

	PROCEDURE shouldbedecorated
		Return !Empty(this.txt1.Value)
	ENDPROC

	PROCEDURE Command1.Click
		This.Parent.txt1.Value = ''
		this.Parent.Refresh()
		This.Parent.txt1.SetFocus()
		
	ENDPROC

	PROCEDURE txt1.InteractiveChange
		This.parent.Decorate()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_timestampcontainer AS gf_filtercheckboxcontainer OF "gofishui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkTimeStamp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTimeStampFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTimeStampTo" UniqueID="" Timestamp="" />

	*<PropValue>
		Height = 111
		Name = "gf_timestampcontainer"
		Width = 206
		Label1.Height = 16
		Label1.Left = 137
		Label1.Name = "Label1"
		Label1.Top = 2
		Label1.Visible = .F.
		Label1.Width = 60
		Command1.Name = "Command1"
		Command1.Top = 88
		Command1.Visible = .F.
		Command2.Name = "Command2"
		Command2.Top = 88
		Command2.Visible = .F.
		LINE1.Name = "LINE1"
		LINE1.Width = 195
		LINE2.Name = "LINE2"
		LINE2.Top = 83
		LINE2.Visible = .F.
		LINE2.Width = 194
	*</PropValue>

	ADD OBJECT 'chkTimeStamp' AS checkbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "TimeStamp Filter", ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.lTimeStamp", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 7, ;
		Name = "chkTimeStamp", ;
		TabIndex = 20, ;
		Top = 1, ;
		Value = .T., ;
		Width = 104
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Label11' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 0,128,0, ;
		BackStyle = 0, ;
		Caption = "From", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label11", ;
		TabIndex = 40, ;
		Top = 31, ;
		Width = 26
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label12' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 0,128,0, ;
		BackStyle = 0, ;
		Caption = "To", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label12", ;
		TabIndex = 40, ;
		Top = 55, ;
		Width = 14
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'txtTimeStampFrom' AS textbox WITH ;
		Alignment = 3, ;
		Anchor = 0, ;
		ControlSource = "Thisform.oFilter.Timestamp_FilterFrom", ;
		FontName = "Tahoma", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 42, ;
		Name = "txtTimeStampFrom", ;
		SelectOnEntry = .T., ;
		TabIndex = 30, ;
		Top = 26, ;
		Value = {}, ;
		Width = 95, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtTimeStampTo' AS textbox WITH ;
		Alignment = 3, ;
		Anchor = 0, ;
		ControlSource = "Thisform.oFilter.Timestamp_FilterTo", ;
		FontName = "Tahoma", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 42, ;
		Name = "txtTimeStampTo", ;
		SelectOnEntry = .T., ;
		TabIndex = 31, ;
		Top = 53, ;
		Value = {}, ;
		Width = 95, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Refresh
		This.ClearDecoration()
		
		llChecked = This.ShouldBeDecorated()
		This.txtTimeStampFrom.Enabled = llChecked
		This.txtTimeStampTo.Enabled = llChecked
		
		If llChecked
			This.Decorate()
		EndIf
		
		
		
	ENDPROC

	PROCEDURE shouldbedecorated
		Return !Empty(this.chkTimeStamp.Value)
	ENDPROC

	PROCEDURE chkTimeStamp.Click
		DoDefault()
		
		This.Parent.Refresh()
		
		This.Parent.txtTimeStampFrom.SetFocus()
	ENDPROC

	PROCEDURE Command2.Click
		This.Parent.txtTimeStampFrom.Value = {}
		This.Parent.txtTimeStampTo.Value = {}
		this.Parent.ChkTimeStamp.Value = .f.
		this.Parent.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_versionlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Alignment = 1
		Anchor = 8
		BackColor = 0,128,0
		BackStyle = 0
		Caption = "Version"
		FontBold = .F.
		FontItalic = .F.
		FontName = "Tahoma"
		FontSize = 8
		ForeColor = 0,0,0
		Height = 13
		Name = "gf_versionlabel"
		TabIndex = 12
		Width = 228
	*</PropValue>
	
	PROCEDURE Refresh
		Local lcAppName, lcVersion
		
		lcAppName = JustStem(_Screen._GoFishClassic.cAppName)
		lcVersion = _Screen._GoFishClassic.cVersion
		
		Try
			This.Caption = 'Version ' + lcVersion + Iif('BETA' $ Upper(lcAppName), ' Beta', '')
		Catch
			This.Caption = 'GoFish'
		Finally
		Endtry
		
		This.Caption = This.Caption + ' (' + _Screen._GoFishClassic.cBuildDate + ')'
	ENDPROC

ENDDEFINE
